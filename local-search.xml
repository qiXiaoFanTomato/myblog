<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/SpringMVC/"/>
    <url>/myblog/2021/10/24/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><h4 id="一、SpringMVC框架简介"><a href="#一、SpringMVC框架简介" class="headerlink" title="一、SpringMVC框架简介"></a>一、SpringMVC框架简介</h4><blockquote><p>使用Servlet遇到的问题：</p><ol><li>参数的传递，封装成对象</li><li>类型的转换</li><li>Servlet功能单一，往往需要很多个</li><li>编码处理</li><li>文件上传</li><li>异常处理</li><li>界面的跳转</li><li>数据的传递（作用域）</li><li>json的处理</li><li>与spring框架的整合问题</li></ol></blockquote><blockquote><p>SpringMVC框架是一个MVC模式的框架，用来实现MVC模式，并且简化了开发过程。</p></blockquote><blockquote><p>SpringMVC与Struts框架比较：</p></blockquote><h4 id="二、SpringMVC入门案例"><a href="#二、SpringMVC入门案例" class="headerlink" title="二、SpringMVC入门案例"></a>二、SpringMVC入门案例</h4><blockquote><p>POJO：plain object java object Java对象，狭义上指实体类</p><p>VO：value object 值对象，用来与界面交互的，接收页面提交的数据封装的对象，将数据传递到页面的封装对象</p><p>BO：business object 业务对象，用于service层对象</p><p>PO：persist object 持久化对象，用于DAO层</p><p>DAO：data access object 数据访问对象，一般就是指的数据库操作层</p><p>DTO：data transfer object 数据转换（传输）对象，VO与BO转换，BO与PO转换的类。</p></blockquote><blockquote><p>步骤：</p><p>1、导入依赖</p><p>2、编写entity、service、controller</p><p>3、编写spring-mvc.xml</p><p>4、编写web.xml配置</p><p>5、编写jsp文件</p><p>6、运行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Users</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Users users)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (users.getUsername().equals(<span class="hljs-string">&quot;zhangsan&quot;</span>) &amp;&amp; users.getPassword().equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span> <span class="hljs-comment">// 该方法的访问路径</span><br>    <span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">// 将返回的值直接显示在页面上（json）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(Users users)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> isLogin = userService.login(users);<br>        <span class="hljs-keyword">if</span> (isLogin)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qf.day3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--使用注解驱动mvc框架，使用默认的一些类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--springmvc框架的核心Servlet，会加载spring-mvc.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--此servlet是核心servlet，不论请求什么路径都需要经过此servlet，除了jsp文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;login&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;&lt;br/&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;密码&quot;</span>/&gt;&lt;br/&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4 id="三、SpringMVC运行流程和配置详解-重点"><a href="#三、SpringMVC运行流程和配置详解-重点" class="headerlink" title="三、SpringMVC运行流程和配置详解[重点]"></a>三、SpringMVC运行流程和配置详解<code>[重点]</code></h4><blockquote><p>运行流程：</p><p>DispatcherServlet：（核心处理器&lt;中央控制器&gt;）分发，接收所有的用户请求，返回响应。（视图渲染：将数据传递到相应的页面）</p><p>HandlerMapping：根据请求路径查找相应的类（Controller）和相应的方法</p><p>HandlerAdapter：去执行Handler，调用相应的方法</p><p>ViewResolver：视图解析器，解析视图，根据视图名称查找到相应的页面</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/9751a944607f70dbd86b660d9d7f875f/3AFEF7D540224567839696E0BD09EAB3?ynotemdtimestamp=1597883714724" srcset="/myblog/img/loading.gif" lazyload></p><blockquote><p>配置详解：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qf.day4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    使用系统提供的默认HandlerMapping和HandlerAdapter</span><br><span class="hljs-comment">    &lt;bean id=&quot;handlerMapping&quot; class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&gt;&lt;/bean&gt;</span><br><span class="hljs-comment">    &lt;bean id=&quot;handlerAdapter&quot; class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;&lt;/bean&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--使用默认的servlet的处理方式，就不会处理静态资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--视图解析器，将视图的名称解析成路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/pages/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="四、请求参数处理"><a href="#四、请求参数处理" class="headerlink" title="四、请求参数处理"></a>四、请求参数处理</h4><blockquote><p>@RequestMapping  定义请求的url，可以在类上使用，也可以在方法上使用，可以使用GET或POST</p><p>在方法上表示给方法添加url，在类上表示给当前类中的所有方法添加url前缀</p><p>如果没有写method属性，表示GET和POST都可以提交到该方法中</p><p>@GetMapping只能GET方法使用</p><p>@PostMapping只能POST方法使用</p></blockquote><blockquote><p>1、在方法中，使用HttpServletRequest类型的参数，也可以通过getParameter(“”)方法来获取参数，类似之前Servlet用法。</p><p>2、可以在方法中直接写参数，用来接收请求参数，要求变量名要与表单元素name属性一致。</p><p>3、方法的参数可以不写String类型，会根据情况自动转换类型，但是如果转换类型不成功会出现<code>400错误</code>。</p><p>4、实体类属性和方法的参数，如果有有基本数据类型，尽量使用包装类，这样可以接收null值。如果使用基本数据类型，当遇到null值时，会<code>400错误</code>。</p><p>5、如果参数类型是Date这类需要提供格式的类型，也无法直接转换，会出现<code>400错误</code>，需要提供格式。</p><p>6、可以直接使用实体类的对象来接收表单提交的所有参数，实体类属性的名称需要与表单元素的name一致，如果不能自动转换类型的（日期），需要设定格式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-comment">// 如果变量名与表单元素name属性一致，可以不写@RequestParam，</span><br><span class="hljs-comment">// value属性表示表单元素的名称，defaultValue设置默认值，required参数是否必须</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;, defaultValue = &quot;1&quot;, required = false)</span> String username, String age)</span></span>&#123;<br>    System.out.println(username);<br>    System.out.println(age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;, defaultValue = &quot;1&quot;, required = false)</span> String username,Integer age, <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> Date birthday)</span></span>&#123;<br>    System.out.println(username);<br>    System.out.println(age);<br>    System.out.println(birthday);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Users</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> <span class="hljs-comment">//提交参数时将字符串转换程Date类型</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users)</span></span>&#123;<br>    System.out.println(users);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="五、数据的传递"><a href="#五、数据的传递" class="headerlink" title="五、数据的传递"></a>五、数据的传递</h4><blockquote><p>1、可以直接使用requset进行传递数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users, HttpServletRequest request)</span></span>&#123;<br>    System.out.println(users);<br>    request.setAttribute(<span class="hljs-string">&quot;u&quot;</span>, users);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>2、使用Model来传递数据</p><p>在SpringMVC框架中，ModelAndView类用来处理视图和模型对象。视图主要用来封装视图名称，模型主要用来保存并传递数据。也可以分开用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users, Model model)</span></span>&#123;<br>    System.out.println(users);<br>    model.addAttribute(<span class="hljs-string">&quot;u&quot;</span>, users);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>3、使用ModelAndView</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">reg</span><span class="hljs-params">(Users users)</span></span>&#123;<br>    ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;success&quot;</span>); <span class="hljs-comment">// 封装视图名称</span><br>    System.out.println(users);<br>    mv.addObject(<span class="hljs-string">&quot;u&quot;</span>, users); <span class="hljs-comment">// 传递数据</span><br>    <span class="hljs-keyword">return</span> mv;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>4、使用Map传值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users, Map&lt;String, Object&gt; map)</span></span>&#123;<br>    System.out.println(users);<br>    map.put(<span class="hljs-string">&quot;u&quot;</span>, users); <span class="hljs-comment">// 传递数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="5-1-在方法中使用HttpServlet相关对象"><a href="#5-1-在方法中使用HttpServlet相关对象" class="headerlink" title="5.1 在方法中使用HttpServlet相关对象"></a>5.1 在方法中使用HttpServlet相关对象</h5><blockquote><p>想用哪一个对象，就在方法参数中声明哪个对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users, HttpServletRequest request, </span></span><br><span class="hljs-params"><span class="hljs-function">                  HttpSession session, </span></span><br><span class="hljs-params"><span class="hljs-function">                  HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                  PrintWriter out)</span></span>&#123;<br>    System.out.println(users);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>不使用HttpSession来操作session作用域的办法：</p><p>当在类上面添加注解@SessionAttributes({“u”, “users”})，表示在方法中添加数据到request作用域时，会同时添加到session作用域，例如此处的u。</p><p>如果在方法中要取得session中的值，可以使用注解@SessionAttribute，如果在没有值的时候来取值，会出错，需要设置属性<code>required = false</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SessionAttributes(&#123;&quot;u&quot;, &quot;users&quot;&#125;)</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users, Model model)</span></span>&#123;<br>        System.out.println(users);<br>        model.addAttribute(<span class="hljs-string">&quot;u&quot;</span>, users);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/s&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-meta">@SessionAttribute(name = &quot;u&quot;, required = false)</span> Users u)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span> + u);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/show&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="六、页面的跳转"><a href="#六、页面的跳转" class="headerlink" title="六、页面的跳转"></a>六、页面的跳转</h4><blockquote><p>1、使用String</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reg</span><span class="hljs-params">(Users users, Model model)</span></span>&#123;<br>    System.out.println(users);<br>    model.addAttribute(<span class="hljs-string">&quot;u&quot;</span>, users);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>2、使用ModelAndView</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">reg</span><span class="hljs-params">(Users users)</span></span>&#123;<br>    ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;success&quot;</span>); <span class="hljs-comment">// 封装视图名称</span><br>    System.out.println(users);<br>    mv.addObject(<span class="hljs-string">&quot;u&quot;</span>, users); <span class="hljs-comment">// 传递数据</span><br>    <span class="hljs-keyword">return</span> mv;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>3、使用void，默认会将请求路径作为视图名称。例如下面的示例：会将user/s作为视图名称。（不推荐使用）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><span class="hljs-meta">@RequestMapping(&quot;/s&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-meta">@SessionAttribute(name = &quot;u&quot;, required=false)</span> Users u)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span> + u);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>4、也可以使用重定向或请求转发来跳转页面，但是需要将页面的路径写详细，因为此时已经不会走视图解析器的步骤。</p></blockquote><blockquote><p><code>思考：</code></p><p>通过视图解析器去跳转的路径，是请求转发，还是重定向？请求转发。</p><p><code>问题：</code></p><p>在Controller中一个方法调用完毕后，如何继续调用其他方法?</p><p>可以在当前方法的返回值中写redirect:或者forward:后面加上需要访问其他的方法的url。流程上将本应该走视图解析器变成重新走一次SpringMVC的运行流程。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/s&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-meta">@SessionAttribute(name = &quot;u&quot;, required=false)</span> Users u)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;============&quot;</span> + u);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/user/reg&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>SSM整合：</p><p>1、以Spring和Mybatis整合为基础。</p><p>2、将SpringMVC框架使用加入。</p><p>3、在spring-mvc.xml中设置只扫描controller包。</p><p>4、在web.xml中添加spring.xml的加载配置信息。</p></blockquote><h5 id="6-1-页面-lt-base-gt-标签的作用"><a href="#6-1-页面-lt-base-gt-标签的作用" class="headerlink" title="6.1 页面&lt;base&gt;标签的作用"></a>6.1 页面<code>&lt;base&gt;</code>标签的作用</h5><blockquote><p>页面的base标签作用会让当前页面上所有本地静态路径（img、a、link、script）都会自动加上base中的地址，称为基地址。</p><p>当使用了base标签后，所有地址需要从根目录开始</p><p><code>[注意：]</code>css和js的引入需要写在base标签的后面。</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;img src=<span class="hljs-string">&quot;imgs/9.jpg&quot;</span>&gt;<br><br>    &lt;h1&gt;欢迎&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4 id="七、文件上传"><a href="#七、文件上传" class="headerlink" title="七、文件上传"></a>七、文件上传</h4><blockquote><p>步骤：</p><p>1、在form表单中设置enctype=”multipart/form-data”</p><p>2、添加相应的第三方库commons-fileupload，commons-io</p><p>3、添加相应的文件上传的配置信息，（文件大小、类型等）</p><p>4、使用流的形式接收文件（表单中文件的name要与接收时的变量名对应）</p><p><a href>注意：</a> spring中的配置bean标签的id必须为multipartResolver，不要随意改动</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-comment">&lt;!-- 此处的id名称不要改变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100000000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 请求中所有文件总和大小 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSizePerFile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 请求中单个文件大小 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1、使用MultipartHttpServletRequest</span><br><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">(Books books, MultipartHttpServletRequest request)</span></span>&#123;<br>    MultipartFile file = request.getFile(<span class="hljs-string">&quot;file&quot;</span>);<br>    bookService.save(books);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/list&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 2、使用MultipartRequest</span><br><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">(Books books, MultipartRequest request)</span></span>&#123;<br>    MultipartFile file = request.getFile(<span class="hljs-string">&quot;file&quot;</span>);<br>    bookService.save(books);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/list&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 3、直接使用MultipartFile</span><br><span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">(Books books, MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 接收了文件后，保存到服务器，并且将名称保存到数据库</span><br>    <span class="hljs-keyword">if</span>(file.getSize() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 生成唯一的图片名称</span><br>        String name = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 保存到实体</span><br>        books.setImgPath(name);<br>        <span class="hljs-comment">// 保存到服务器</span><br>        file.transferTo(<span class="hljs-keyword">new</span> File(filePath + name));<br>        <span class="hljs-comment">// 保存真实文件名称</span><br>        books.setFileName(file.getOriginalFilename());<br>    &#125;<br>    bookService.save(books);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/list&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="7-1-文件查看和下载"><a href="#7-1-文件查看和下载" class="headerlink" title="7.1 文件查看和下载"></a>7.1 文件查看和下载</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/show&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(String imgPath, HttpServletResponse response)</span></span>&#123;<br>    File file = <span class="hljs-keyword">new</span> File(filePath + imgPath);<br>    doFile(file, response);<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(Integer id, HttpServletResponse response)</span></span>&#123;<br>    Books books = bookService.findById(id); <span class="hljs-comment">// 根据id查询数据</span><br>    File file = <span class="hljs-keyword">new</span> File(filePath + books.getImgPath()); <span class="hljs-comment">//得到图片路径</span><br>    <span class="hljs-comment">// 通过文件名称设置下载格式</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span>+books.getFileName());<br>    doFile(file, response);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFile</span><span class="hljs-params">(File file, HttpServletResponse response)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-comment">// 表示在finally时会自动判断是否为空并关闭</span><br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        ServletOutputStream outputStream = response.getOutputStream();<br>    )&#123;<br>        <span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            outputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        outputStream.flush();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="7-2-图片修改"><a href="#7-2-图片修改" class="headerlink" title="7.2 图片修改"></a>7.2 图片修改</h5><blockquote><p>一般情况下，如果不修改文件，则不需要上传文件，后台会使用动态sql判断用户是否上传文件来决定是否修改文件字段。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/update&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">(Books books, MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 接收了文件后，保存到服务器，并且将名称保存到数据库</span><br>    <span class="hljs-comment">// 如果没有上传图片，则不会执行括号中的代码，数据库操作使用的动态sql，就不会去修改图片相关内容</span><br>    <span class="hljs-keyword">if</span>(file.getSize() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 生成唯一的图片名称</span><br>        String name = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 保存到实体</span><br>        books.setImgPath(name);<br>        <span class="hljs-comment">// 保存到服务器</span><br>        file.transferTo(<span class="hljs-keyword">new</span> File(filePath + name));<br>        <span class="hljs-comment">// 保存真实文件名称</span><br>        books.setFileName(file.getOriginalFilename());<br>    &#125;<br>    bookService.update(books);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/list&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>如果要提交多个文件，可以在表单中写多个文件上传的元素，然后如果名称不同，controller中用多个名称接收（不推荐），如果名称相同，controller中MultipartFile使用数组或者List<code>&lt;MultipartFile&gt;</code>格式接收。</p></blockquote><h4 id="八、JSON处理"><a href="#八、JSON处理" class="headerlink" title="八、JSON处理"></a>八、JSON处理</h4><blockquote><p>1、服务器返回一段JSON数据。</p><p>2、客户端提交JSON数据给服务器。</p></blockquote><h5 id="8-1-服务器返回JSON数据"><a href="#8-1-服务器返回JSON数据" class="headerlink" title="8.1 服务器返回JSON数据"></a>8.1 服务器返回JSON数据</h5><blockquote><p>Servlet中一般采用out = response.getWrite(); out.write();</p></blockquote><blockquote><p>SpringMVC中处理办法如下：</p><p>1、导入json相关依赖</p><p>2、将方法的返回值类型设置为需要转换成JSON的数据类型。</p><p>3、在方法上添加@ResponseBody注解。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">// 将当前方法的返回值转成JSON格式并返回</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/listJson&quot;, method = RequestMethod.GET)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">listJson</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;Books&gt; list = bookService.findAll();<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="8-2-客户端提交JSON数据"><a href="#8-2-客户端提交JSON数据" class="headerlink" title="8.2 客户端提交JSON数据"></a>8.2 客户端提交JSON数据</h5><blockquote><p>当客户端在使用AJAX提交数据时，如果没有设置格式为application/json，直接使用看似JSON格式的数据，其实都是application/x-www-form-urlencoded方式提交的，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">$(function () &#123;<br>    $.ajax(&#123;<br>        <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;add.do&quot;</span>,<br>        <span class="hljs-comment">// 此处代码也可以写作：&quot;data&quot;:&quot;username=zhangsan&amp;password=123456&quot;&#125;,</span><br>        <span class="hljs-string">&quot;data&quot;</span>:&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        <span class="hljs-string">&quot;success&quot;</span>:function () &#123;<br><br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><blockquote><p>这种写法后台应该使用String username = request.getParameter(“username”);接收数据。</p></blockquote><blockquote><p>正确的JSON格式传值是按如下方式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">$(function () &#123;<br>    <span class="hljs-keyword">var</span> j = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>&#125;;<br>    $.ajax(&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;add.do&quot;</span>,<br>        <span class="hljs-string">&quot;contentType&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>,<br>        <span class="hljs-string">&quot;data&quot;</span>:JSON.stringify(j), <span class="hljs-comment">// 将json格式转换成字符串</span><br>        <span class="hljs-string">&quot;success&quot;</span>:function () &#123;<br><br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><blockquote><p>在servlet中的接收方式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/add.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletInputStream inputStream = request.getInputStream();<br>        BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(inputStream));<br>        String str = <span class="hljs-keyword">null</span>;<br>        StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br>        <span class="hljs-keyword">while</span> ((str = reader.readLine()) != <span class="hljs-keyword">null</span>)&#123;<br>            stringBuffer.append(str);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;stringBuffer:&quot;</span> + stringBuffer);<br>        <span class="hljs-comment">// 还需要使用JSON来转换成对象</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>在SpringMVC中接收的方式：使用@RequestBody注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/jsonAdd&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jsonAdd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Books books)</span></span>&#123;<br>    System.out.println(books);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/list&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="九、RESTful风格"><a href="#九、RESTful风格" class="headerlink" title="九、RESTful风格"></a>九、RESTful风格</h4><blockquote><p>REST，Representational State Transfer，表述性状态传递，是一种软件架构风格（规范），可以降低开发的复杂性，提高系统的可伸缩性。</p><p>约定优于配置：在做项目之前进行一些约定，如果遵循约定，可以减少配置。</p><p>利用四种请求：GET（查询）、POST（添加）、PUT（修改）、DELETE（删除）</p><p><a href>注意：</a>springMVC框架中，使用POST模拟PUT和DELETE，因为表单默认没有PUT和DELETE请求</p><p>具体风格如下：比如操作product资源</p><p>查询所有: /products    GET</p><p>根据ID查询：/products/1    GET</p><p>添加：/prodcts   POST</p><p>修改：/prodcts/1   PUT</p><p>删除：/prodcts/1   DELETE</p></blockquote><blockquote><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 当项目遇到下面的异常：<br>java.lang.IllegalStateException: No WebApplicationContext found: not <span class="hljs-keyword">in</span> a DispatcherServlet request and no ContextLoaderListener registered?<br><span class="hljs-regexp">//</span> 不在一个springmvc的标准请求中，并且没有ContextLoaderListener注册<br><span class="hljs-regexp">//</span> 错误原因：在页面上使用了spring的标签库，却没有使用springMVC的上下文<br><span class="hljs-regexp">//</span> 解决办法：使用springmvc的页面跳转方式跳转到该页面，或者使用ContextLoaderListener注册<br></code></pre></div></td></tr></table></figure></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <span class="hljs-comment">// 表示所有的方法都自动添加@ResponseBody注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 路径变量的特点：一定不能为空</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/products/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">detail</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;detail=&quot;</span> + id;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/products/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;delete=&quot;</span> + id;<br>    &#125;<br><br>    <span class="hljs-comment">// 路径变量的特点：一定不能为空</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/products/&#123;id&#125;&quot;, method = RequestMethod.PUT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update=&quot;</span> + id;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;form&quot;</span> uri=<span class="hljs-string">&quot;http://www.springframework.org/tags/form&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;a href=<span class="hljs-string">&quot;products&quot;</span>&gt;查询所有&lt;/a&gt;<br>    &lt;a href=<span class="hljs-string">&quot;products/3&quot;</span>&gt;根据ID查询&lt;/a&gt;<br>    &lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;products/1&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;PUT&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;修改&quot;</span>&gt;<br>    &lt;/form&gt;<br>    &lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;products&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;添加&quot;</span>&gt;<br>    &lt;/form&gt;<br>    &lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;products/1&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;DELETE&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;删除&quot;</span>&gt;<br>    &lt;/form&gt;<br><br><br>    &lt;form:form action=<span class="hljs-string">&quot;products/1&quot;</span> method=<span class="hljs-string">&quot;PUT&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;修改1&quot;</span>&gt;<br>    &lt;/form:form&gt;<br><br>    &lt;form:form action=<span class="hljs-string">&quot;products/1&quot;</span> method=<span class="hljs-string">&quot;DELETE&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;删除1&quot;</span>&gt;<br>    &lt;/form:form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4 id="十、异常处理"><a href="#十、异常处理" class="headerlink" title="十、异常处理"></a>十、异常处理</h4><blockquote><p>在项目中异常处理原则：</p><p>1、如果是业务异常，应该使用自定义异常，并且将该异常从底层（DAO）抛出，然后在能够将信息传递给用户的层（Controller）进行处理（try），并且给用户提示。</p><p>2、如果不是业务异常，应该在出现异常的当前层直接处理，处理方式一般是写日志。</p></blockquote><blockquote><p>在业务层面异常应该有相关的定义：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-comment">// 消息编码</span><br>            <span class="hljs-comment">// 赋予相关的含义:</span><br>            <span class="hljs-comment">// 例如：异常级别：+模块编号+分层编号+方法顺序编号+异常编号</span><br>            <span class="hljs-comment">// 在业务异常(S)+用户模块(101)，的controller层(01)，的添加方法(01),的添加失败异常(01)</span><br>            <span class="hljs-comment">// S101010101</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BussinessExcetion(<span class="hljs-string">&quot;S101010101&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>全局异常处理，Controller中也只需要直接抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span> <span class="hljs-comment">// 全局异常处理，会捕获所有的Controller中抛出的异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AllExceptionHandler</span> </span>&#123;<br>    <span class="hljs-comment">// 如果此方法在Controller类中，只会捕获当前类出现的异常</span><br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doException</span><span class="hljs-params">(Exception ex, Model model)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> BussinessExcetion)&#123; <span class="hljs-comment">// 如果该异常是业务异常</span><br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, ex.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/exception&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 写日志</span><br>            System.out.println(<span class="hljs-string">&quot;此处写日志&quot;</span>);<br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;E1000001&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/exception&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="十一、拦截器"><a href="#十一、拦截器" class="headerlink" title="十一、拦截器"></a>十一、拦截器</h4><blockquote><p>SpringMVC的拦截器与Servlet中的过滤器作用差不多。但是拦截器的粒度更细，在拦截器中，不仅可以在url对应的方法被调用之前拦截用户的请求，而且还可以在其他的时机来拦截。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/qf/**&quot;</span>/&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.test.MyInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span></span>&#123;<br>    <span class="hljs-comment">// 在请求执行前拦截</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                             HttpServletResponse response, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle&quot;</span>);<br>        <span class="hljs-comment">// 当返回false时，表示拦截请求，不继续执行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// controller中方法执行完毕后</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 在页面渲染完毕之后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                                Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="十二、国际化"><a href="#十二、国际化" class="headerlink" title="十二、国际化"></a>十二、国际化</h4><blockquote><p>国际化，也叫i18n，指就是用户界面语言可以本地化。</p><p>原理：每个语言使用一个配置文件，根据不同的地区语言去加载不同的配置文件，界面所有的文字使用变量表示，该变量是由配置文件加载而来。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;locale&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>新建相应的properties文件</p></blockquote><p><code>msg_en.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">msg.username</span>=<span class="hljs-string">username</span><br><span class="hljs-meta">msg.password</span>=<span class="hljs-string">password</span><br><span class="hljs-meta">msg.submit</span>=<span class="hljs-string">login</span><br></code></pre></div></td></tr></table></figure><p><code>msg_zh_CN.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">msg.username</span>=<span class="hljs-string">用户名</span><br><span class="hljs-meta">msg.password</span>=<span class="hljs-string">密码</span><br><span class="hljs-meta">msg.submit</span>=<span class="hljs-string">登录</span><br></code></pre></div></td></tr></table></figure><p><code>msg_ja.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">msg.username</span>=<span class="hljs-string">ユーザ名</span><br><span class="hljs-meta">msg.password</span>=<span class="hljs-string">パスワード</span><br><span class="hljs-meta">msg.submit</span>=<span class="hljs-string">ログイン</span><br></code></pre></div></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;spring&quot;</span> uri=<span class="hljs-string">&quot;http://www.springframework.org/tags&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form method=<span class="hljs-string">&quot;post&quot;</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&#x27;&lt;spring:message code=&quot;msg.username&quot;&gt;&lt;/spring:message&gt;&#x27;</span>/&gt;&lt;br/&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;&lt;spring:message code=&quot;</span>msg.password<span class="hljs-string">&quot;&gt;&lt;/spring:message&gt;&quot;</span>/&gt;&lt;br/&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;&lt;spring:message code=&quot;</span>msg.submit<span class="hljs-string">&quot;&gt;&lt;/spring:message&gt;&quot;</span>/&gt;&lt;br/&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">常见错误：<br><span class="hljs-keyword">No</span> WebApplicationContext <span class="hljs-built_in">found</span>: <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> a DispatcherServlet request <span class="hljs-keyword">and</span> <span class="hljs-keyword">no</span> ContextLoaderListener registered?<br>没有找到Spring的上下文：不是在一个SpringMVC流程请求中，并且也没有ContextLoaderListener注册。<br><br>出现上面错误的原因是：页面上使用spring的标签，而该标签需要找到配置的国际化文件的名称，该名称在spring-mvc.xml中配置，<span class="hljs-keyword">index</span>.jsp页面的加载是通过web.xml中配置的welcome-file加载的，该加载并非一个SpringMVC的访问请求。<br><br>解决方案有两种：<br><span class="hljs-number">1.</span>将spring的配置文件写出来，通过ContextLoaderListener去加载，并且把国际化的配置配置到spring.xml中。<br><span class="hljs-number">2.</span>访问<span class="hljs-keyword">index</span>.jsp时通过DispatcherServlet跳转，而不要使用web.xml中的直接加载。<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/UML%E5%9F%BA%E6%9C%AC%E5%9B%BE%E4%BE%8B/"/>
    <url>/myblog/2021/10/24/UML%E5%9F%BA%E6%9C%AC%E5%9B%BE%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="UML基本图例"><a href="#UML基本图例" class="headerlink" title="UML基本图例"></a>UML基本图例</h3><p>UML（Unified Modeling Language）<a href="https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80/3160571">统一建模语言</a>，又称<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80/10967573">标准建模语言</a>。是用来对软件密集系统进行可视化<a href="https://baike.baidu.com/item/%E5%BB%BA%E6%A8%A1">建模</a>的一种语言。UML的定义包括UML语义和UML表示法两个元素。</p><p>UML是在开发阶段，说明、可视化、构建和书写一个<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089">面向对象</a>软件密集系统的制品的开放方法。最佳的应用是工程实践，对大规模，复杂系统进行建模方面，特别是在<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/7485920">软件架构</a>层次，已经被验证有效。统一建模语言（UML）是一种模型化语言。模型大多以图表的方式表现出来。一份典型的建模图表通常包含几个块或框，连接线和作为模型附加信息之用的文本。这些虽简单却非常重要，在UML规则中相互联系和扩展。</p><p><strong>UML图的作用：</strong></p><p><a href="https://baike.baidu.com/item/UML/446747">UML</a>的目标是以面向对象图的方式来描述任何类型的系统，具有很宽的应用领域。其中最常用的是建立软件系统的模型，但它同样可以用于描述非软件领域的系统，如机械系统、企业机构或业务过程，以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之，UML是一个通用的标准建模语言，可以对任何具有静态结构和动态行为的系统进行<a href="https://baike.baidu.com/item/%E5%BB%BA%E6%A8%A1/814831">建模</a>，而且适用于系统开发的不同阶段，从需求规格描述直至系统完成后的测试和维护。</p><p><strong>特点：</strong></p><p>（1）UML统一了各种方法对不同类型的系统、不同开发阶段以及不同内部概念的不同观点，从而有效的消除了各种建模语言之间不必要的差异。它实际上是一种通用的建模语言，可以为许多面向对象建模方法的用户广泛使用。</p><p>（2）UML建模能力比其它<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2262089">面向对象</a>建模方法更强。它不仅适合于一般系统的开发，而且对并行、分布式系统的建模尤为适宜。</p><p>（3）UML是一种建模语言，而不是一个开发过程。</p><p>——以上引用自百度百科</p><h3 id="下面是九种常用的UML图："><a href="#下面是九种常用的UML图：" class="headerlink" title="下面是九种常用的UML图："></a>下面是九种常用的UML图：</h3><p><img src="https://img-blog.csdnimg.cn/20190702221837956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="1-用例图（UseCase-Diagrams）"><a href="#1-用例图（UseCase-Diagrams）" class="headerlink" title="1.用例图（UseCase Diagrams）"></a>1.用例图（UseCase Diagrams）</h3><p>用例图是从用户（角色）的角度出发，描述角色和用例之间的关系。即：谁要使用系统，一级他们使用系统可以做什么。简单来说就是：谁，可以用此系统做什么。</p><p><img src="https://img-blog.csdnimg.cn/20190702221901342.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="2-类图（Class-Diagram）"><a href="#2-类图（Class-Diagram）" class="headerlink" title="2.类图（Class Diagram）"></a>2.类图（Class Diagram）</h3><p>类图是描述系统中的类，以及各个类之间的关系的静态视图。是面向对象系统建模中最常用和最重要的图，是定义其他图的基础。</p><p>在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association），聚合（Aggregation），组合（Composition），依赖（Dependency）。</p><p>各种关系的强弱顺序： 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p><p>　　2.1.泛化（Generalization）</p><p>　　　　泛化是一种继承关系，表示一般与特殊的关系，它指定了子类如何继承父类的所有特征和行为。</p><p>　　　　<img src="https://img-blog.csdnimg.cn/20190702222051531.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><p>　　2.2.实现（Realization）</p><p>　　　　实现是一种类与接口的关系，表示类是接口所有特征和行为的实现。</p><p>　　　　　　<img src="https://img-blog.csdnimg.cn/20190702222224838.jpg" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><p>　　2.3.关联（Association）</p><p>　　　　关联是一种拥有的关系，它使一个类知道另一个类的属性和方法；关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p><p>　<img src="https://img-blog.csdnimg.cn/20190702222244410.jpg" srcset="/myblog/img/loading.gif" lazyload alt="img">　　　　　</p><p>　　2.4.聚合（Aggregation）</p><p>　　　　聚合是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。</p><p>​    　　聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</p><p>　<img src="https://img-blog.csdnimg.cn/2019070222233886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img">　　　 </p><p>　　2.5.组合（Composition）</p><p>　　　　组合是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。</p><p>​    　组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。</p><p>　　　　　　<img src="https://img-blog.csdnimg.cn/20190702222350850.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><p>　　2.6.依赖（Dependency）</p><p>   　　依赖是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p><p>　　　　<img src="https://img-blog.csdnimg.cn/20190702222358338.jpg" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="3-对象图（Object-Diagrams）"><a href="#3-对象图（Object-Diagrams）" class="headerlink" title="3.对象图（Object Diagrams）"></a>3.对象图（Object Diagrams）</h3><p>对象图和类图一样反映系统的静态过程，但它是从实际的或原型化的情景来表达的。对象图显示某时刻对象和对象之间的关系。一个UML对象图可看成一个类图的特殊用例，实例和类可在其中显示。</p><p><img src="https://img-blog.csdnimg.cn/20190702222424280.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="4-状态图（Statechart-Diagrams）"><a href="#4-状态图（Statechart-Diagrams）" class="headerlink" title="4.状态图（Statechart Diagrams）"></a>4.状态图（Statechart Diagrams）</h3><p>状态图描述类的对象所有可能的状态，以及事件发生时状态的转移条件。他们可以告知一个对象可以拥有的状态，并且事件会怎么随着时间的推移来影响这些状态。</p><p>状态图是对类图的补充。</p><p><img src="https://img-blog.csdnimg.cn/20190702222440456.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="5-活动图（Activity-Diagrams）"><a href="#5-活动图（Activity-Diagrams）" class="headerlink" title="5.活动图（Activity Diagrams）"></a>5.活动图（Activity Diagrams）</h3><p>活动图描述用例要求所要进行的活动，以及活动间的约束关系，有利于识别并行活动。能够演示出系统中哪些地方存在功能，以及这些功能和系统中其他组件的功能如何共同满足前面使用用例图的业务需求。</p><p>活动图是状态图的一种特殊情况，这些状态大都处于活动状态。本质是一种流程图，它描述了活动到活动的控制流。</p><p><img src="https://img-blog.csdnimg.cn/20190702222459191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="6-序列图-时序图（Sequence-Diagrams）"><a href="#6-序列图-时序图（Sequence-Diagrams）" class="headerlink" title="6.序列图-时序图（Sequence Diagrams）"></a>6.序列图-时序图（Sequence Diagrams）</h3><p>序列图是用来显示你的参与者如何以一系列顺序的步骤与系统的对象交互的模型。顺序图可以用来展示对象之间是如何进行交互的。序列图将显示的重点放在消息序列上，即强调消息是如何在对象之间被发送和接收的。</p><p>序列图展示的是多个系统或者对象之间的交互的顺序，强调时间顺序。</p><p><img src="https://img-blog.csdnimg.cn/20190702222528483.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="7-协作图（Collaboration-Diagrams）"><a href="#7-协作图（Collaboration-Diagrams）" class="headerlink" title="7.协作图（Collaboration Diagrams）"></a>7.协作图（Collaboration Diagrams）</h3><p>协作图和序列图相似，显示对象间的动态合作关系。可以看成是类图和顺序图的交集，协作图建模对象或者角色，以及它们彼此之间是如何通信的。</p><p><img src="https://img-blog.csdnimg.cn/20190702222535436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="8-构件图（Component-Diagrams）"><a href="#8-构件图（Component-Diagrams）" class="headerlink" title="8.构件图（Component Diagrams）"></a>8.构件图（Component Diagrams）</h3><p>构件图是用来表示系统中构件与构件之间，类或接口与构件之间的关系图。其中，构建图之间的关系表现为依赖关系，定义的类或接口与类之间的关系表现为依赖关系或实现关系。</p><p>构件图也叫组件图，由组件、接口和组件之间联系构成，描述的是在软件系统中遵从并实现一组接口的物理的、可替换的软件模块。</p><p>组件图 = 构件（Component）+接口（Interface）+关系（Relationship）+端口（Port）+连接器（Connector）</p><p><img src="https://img-blog.csdnimg.cn/20190702222542725.jpg" srcset="/myblog/img/loading.gif" lazyload alt="img"></p><h3 id="9-部署图（Deployment-Diagrams）"><a href="#9-部署图（Deployment-Diagrams）" class="headerlink" title="9.部署图（Deployment Diagrams）"></a>9.部署图（Deployment Diagrams）</h3><p>部署图又叫配置图，是用来建模系统的物理部署。</p><p>部署图由节点以及节点之间的关系组成。</p><p>部署图描述的是系统运行时的结构，展示了硬件的配置及其软件如何部署到网络结构中。</p><p>部署图通常用来帮助理解分布式系统，一个系统模型只有一个部署图。</p><p>部署图用于可视化的软件组件部署的系统中的物理组件的拓扑结构。</p><p><img src="https://img-blog.csdnimg.cn/20190702222554407.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI1MDA4NDg=,size_16,color_FFFFFF,t_70" srcset="/myblog/img/loading.gif" lazyload alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/Spring_IOC(%E9%A2%84%E4%B9%A0%E7%AC%94%E8%AE%B0)/"/>
    <url>/myblog/2021/10/24/Spring_IOC(%E9%A2%84%E4%B9%A0%E7%AC%94%E8%AE%B0)/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring基础"><a href="#Spring基础" class="headerlink" title="Spring基础"></a>Spring基础</h3><h4 id="一-Spring简介"><a href="#一-Spring简介" class="headerlink" title="一. Spring简介"></a>一. Spring简介</h4><h5 id="1-Spring介绍"><a href="#1-Spring介绍" class="headerlink" title="1. Spring介绍"></a>1. Spring介绍</h5><blockquote><p>Spring框架主页: <a href="http://spring.io/">Spring官网</a></p><p>Spring资源地址:<a href="http://repo.spring.io/release/org/springframework/spring">下载地址</a></p></blockquote><ul><li>Spring框架，由Rod Johnson开发</li><li>Spring是一个非常活跃的开源框架, 基于IOC和AOP来构架多层JavaEE系统，以帮助分离项目组件之间的依赖关系</li><li>它的主要目地是简化企业开发</li></ul><h5 id="2-Spring解决的问题"><a href="#2-Spring解决的问题" class="headerlink" title="2. Spring解决的问题"></a>2. Spring解决的问题</h5><ul><li>方便解耦，简化开发：Spring 就是一个大工厂，可以将所有对象创建和依赖关系维护，交给 Spring 管理</li></ul><ul><li>AOP 编程的支持：Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能</li><li>声明式事务的支持：只需要通过配置就可以完成对事务的管理，而无需手动编程</li><li>方便程序的测试：Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序</li><li>方便集成各种优秀框架：Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz 等）的直接支持</li><li>降低 JavaEE API 的使用难度：Spring对 JavaEE 开发中非常难用的API（JDBC、JavaMail、远程调用等），都提供了封装，使这些 API 应用难度大大降低</li></ul><h5 id="3-Spring的组成"><a href="#3-Spring的组成" class="headerlink" title="3. Spring的组成"></a>3. Spring的组成</h5><blockquote><p>Spring框架包含的功能大约由20个模块组成。这些模块按组可分为核心容器、数据访问/集成，Web，AOP(面向切面编程)、设备、消息和测试</p></blockquote><h6 id="3-1-Spring组成图"><a href="#3-1-Spring组成图" class="headerlink" title="3.1 Spring组成图"></a>3.1 Spring组成图</h6><p><img src="https://note.youdao.com/yws/public/resource/761be3201af0f3f2d4bc97f763ac08c5/xmlnote/22C1D1F95C774ED8A6D9E8153695E571/4352" srcset="/myblog/img/loading.gif" lazyload></p><p>#####4.core - 核心模块</p><ul><li><p>spring-core：依赖注入IoC与DI的最基本实现</p></li><li><p>spring-beans：Bean工厂与bean的装配</p></li><li><p>spring-context：spring的context上下文即IoC容器</p></li><li><p>spring-context-support</p></li><li><p>spring-expression：spring表达式语言</p></li></ul><p><strong>详细说明</strong></p><p>（1）spring-core</p><p>这个jar文件包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类</p><p>（2）spring-beans</p><p>这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。如果应用只需基本的IoC/DI支持，引入spring-core.jar及spring- beans.jar文件就可以了</p><p>（3）spring-context</p><p>Spring核心提供了大量扩展，这样使得由 Core 和 Beans 提供的基础功能增强：这意味着Spring 工程能以框架模式访问对象。Context 模块继承了Beans 模块的特性并增加了对国际化（例如资源绑定）、事件传播、资源加载和context 透明化（例如 Servlet container）。同时，也支持JAVA EE 特性，例如 EJB、 JMX 和 基本的远程访问。Context 模块的关键是 ApplicationContext 接口。spring-context-support 则提供了对第三方库集成到 Spring-context 的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</p><p>（4）spring-expression</p><p>为在运行时查询和操作对象图提供了强大的表达式语言。它是JSP2.1规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等。</p><p><strong>数据访问与集成层包含 JDBC、ORM、OXM、JMS和事务模块。</strong></p><p>（1）spring-jdbc</p><p>提供了 JDBC抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</p><p>（2）spring-tx</p><p>支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的 POJO 对象。编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细。</p><p>（3）spring-orm</p><p>提供了对流行的对象关系映射 API的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理。</p><p>（4）spring-oxm </p><p>模块提供了对 OXM 实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。</p><p>（5）spring-jms</p><p>模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了 spring-messaging 模块</p><p><strong>Spring 处理Web层jar</strong></p><p>Web 层包括 spring-web、spring-webmvc、spring-websocket、spring-webmvc-portlet 等模块。</p><p><strong>详细说明</strong></p><p>（1）spring-web</p><p>提供面向 web 的基本功能和面向 web 的应用上下文，比如 multipart 文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分</p><p>（2）spring-webmvc</p><p>为 web 应用提供了模型视图控制（MVC）和 REST Web 服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成</p><p>（3）spring-webmvc-portlet</p><p>（即Web-Portlet模块）提供了用于 Portlet 环境的 MVC 实现，并反映了 pring-webmvc 模块的功能</p><p><strong>Spring AOP涉及jar</strong></p><p>（1）spring-aop</p><p>提供了面向切面编程（AOP）的实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦。使用源码级的元数据。</p><p>（2）spring-aspects</p><p>提供了对 AspectJ 的集成</p><p><strong>Instrumentation 模块涉及jar</strong></p><p>（1）spring-instrument</p><p>模块提供了对检测类的支持和用于特定的应用服务器的类加载器的实现。</p><p>（2）spring-instrument-tomcat</p><p>模块包含了用于 Tomcat 的Spring 检测代理。</p><p><strong>Messaging消息处理 涉及jar</strong></p><p>spring-messaging 模块</p><p>从 Spring 4 开始集成，从一些 Spring 集成项目的关键抽象中提取出来的。这些项目包括 Message、MessageChannel、MessageHandler 和其它服务于消息处理的项目。这个模块也包含一系列的注解用于映射消息到方法</p><p><strong>Test模块涉及jar</strong></p><p>spring-test 模块</p><p>通过 JUnit 和 TestNG 组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring 上下文，也提供了用于单独测试代码的模拟对象（mock object）</p><h4 id="二-入门程序"><a href="#二-入门程序" class="headerlink" title="二. 入门程序"></a>二. 入门程序</h4><blockquote><p>目标：理解spring框架创建对象的过程。</p></blockquote><blockquote><p><a href>注意</a>：在导入依赖时，spring的所有依赖版本应该一致。</p></blockquote><blockquote><p>1、导入相关依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>2、编写相关代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDAO</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDAO被创建&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDAO === save&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserDAO userDAO;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserService</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService被创建&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDAO</span><span class="hljs-params">(UserDAO userDAO)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService===setUserDAO&quot;</span>);<br>        <span class="hljs-keyword">this</span>.userDAO = userDAO;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService===save&quot;</span>);<br>        userDAO.save();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserController</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserController被创建&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserService</span><span class="hljs-params">(UserService userService)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserController===setUserService&quot;</span>);<br>        <span class="hljs-keyword">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserController====save&quot;</span>);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>3、配置相关对象创建以及依赖</p></blockquote><p><code>spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建对象时类型的全名称，以及对象的依赖关系--&gt;</span><br>    <span class="hljs-comment">&lt;!--使用反射创建对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDAO&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day55.dao.UserDAO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day55.service.UserService&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDAO&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDAO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day55.controller.UserController&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>4、测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserControllerTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> UserController userController;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 读取配置文件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br>        userController = context.getBean(<span class="hljs-string">&quot;userController&quot;</span>, UserController.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        userController.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="三-对象创建的细节"><a href="#三-对象创建的细节" class="headerlink" title="三. 对象创建的细节"></a>三. 对象创建的细节</h4><h5 id="1-bean标签和属性讲解"><a href="#1-bean标签和属性讲解" class="headerlink" title="1.bean标签和属性讲解"></a>1.bean标签和属性讲解</h5><h6 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h6><p>bean标签,是根标签beans内部必须包含的标签,它是用于声明具体的类 的对象! </p><h6 id="bean标签对应属性"><a href="#bean标签对应属性" class="headerlink" title="bean标签对应属性"></a>bean标签对应属性</h6><table><thead><tr><th align="center">Property</th><th align="center">属性解释</th></tr></thead><tbody><tr><td align="center">class</td><td align="center">指定bean对应类的全路径</td></tr><tr><td align="center">name</td><td align="center">name是bean对应对象的一个标识</td></tr><tr><td align="center">scope</td><td align="center">执行bean对象创建模式和生命周期</td></tr><tr><td align="center">id</td><td align="center">id是bean对象的唯一标识,不能添加特别字符</td></tr><tr><td align="center">lazy-init</td><td align="center">是否延时加载 默认值:false</td></tr><tr><td align="center">init-method</td><td align="center">对象初始化方法</td></tr><tr><td align="center">destory</td><td align="center">对象销毁方法</td></tr></tbody></table><p>#####2.创建对象工厂</p><h6 id="2-1-BeanFactory"><a href="#2-1-BeanFactory" class="headerlink" title="2.1.  BeanFactory"></a>2.1.  BeanFactory</h6><p>使用bean工厂来创建对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBeanFactory1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">// 1. 通过类路径加载资源</span><br>       Resource resource1 = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>       <span class="hljs-comment">// 2. 通过硬盘绝对路径路径加载资源</span><br>       Resource resource2 = <span class="hljs-keyword">new</span> FileSystemResource(<span class="hljs-string">&quot;src/main/resources/applicationContext.xml&quot;</span>);<br>       <span class="hljs-comment">// 通过bean工厂创建对象</span><br>       BeanFactory factory1 = <span class="hljs-keyword">new</span> XmlBeanFactory(resource1);<br>       Person person1 = factory1.getBean(<span class="hljs-string">&quot;person&quot;</span>, Person.class);<br>       <br>       BeanFactory factory2 = <span class="hljs-keyword">new</span> XmlBeanFactory(resource2);<br>       Person person2 = factory2.getBean(<span class="hljs-string">&quot;person&quot;</span>, Person.class);<br>   &#125;<br></code></pre></div></td></tr></table></figure><h6 id="2-2-FileSystemXmlApplicationContext"><a href="#2-2-FileSystemXmlApplicationContext" class="headerlink" title="2.2.  FileSystemXmlApplicationContext"></a>2.2.  FileSystemXmlApplicationContext</h6><p>从硬盘绝对路径下加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBeanFactory2</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-comment">//通过绝对路径加载配置文件</span><br>  ApplicationContext context = <span class="hljs-keyword">new</span>         FileSystemXmlApplicationContext(<span class="hljs-string">&quot;src/main/resources/applicationContext.xml&quot;</span>);<br>       <span class="hljs-comment">// 从系统目录中加载配置文件</span><br>       ApplicationContext context1 = <span class="hljs-keyword">new</span> FileSystemXmlApplicationContext(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\spring.xml&quot;</span>);<br>      <br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="2-3-ClassPathXmlApplicationContext"><a href="#2-3-ClassPathXmlApplicationContext" class="headerlink" title="2.3.  ClassPathXmlApplicationContext"></a>2.3.  ClassPathXmlApplicationContext</h6><p>从类路径下加载配置文件</p><p>普通项目: src目录下</p><p>maven项目: resources目录下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBeanFactory3</span><span class="hljs-params">()</span></span>&#123;<br>ApplicationContext context2 = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-bean.xml&quot;</span>);<br>&#125; <br></code></pre></div></td></tr></table></figure><blockquote><p><a href>经典面试题</a>：</p><p>BeanFactory与ApplicationContext区别：</p><p>1、ApplicationContext继承自BeanFactory</p><p>2、BeanFactory是一个轻量级的对象工厂，作用是为了创建spring中管理的对象。而applicationContext作为上下文，有着更强大的功能。</p><p>3、BeanFactory在加载配置文件时并不会创建对象和设置依赖关系，直到获取对象并使用时才会创建对象并设置依赖。而applicationContext在加载配置文件时就会创建所有的上下文关联对象和设置其依赖关系。</p></blockquote><blockquote><p>在加载spring框架的配置文件时ClassPath和FileSystem的区别：</p><p>ClassPath通过当前项目类路径加载。</p><p>FileSystem是通过系统文件路径。</p></blockquote><h5 id="3-练习bean标签属性"><a href="#3-练习bean标签属性" class="headerlink" title="3. 练习bean标签属性"></a>3. 练习bean标签属性</h5><h6 id="3-1-name属性"><a href="#3-1-name属性" class="headerlink" title="3.1 name属性"></a>3.1 name属性</h6><p>   可以重复,可以使用特殊字符</p><h6 id="3-2-id属性"><a href="#3-2-id属性" class="headerlink" title="3.2 id属性"></a>3.2 id属性</h6><p>   id属性作用和name几乎相同,但是也有细微的差别,id不可重复,且不能使用特殊字符</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--同时添加name和id --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testBeanName&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testBeanId&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itqf.spring.bean.TestBean&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ApplicationContext applicationContext = <span class="hljs-keyword">new</span>  ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-bean.xml&quot;</span>);<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 参数1: name/id</span><br><span class="hljs-comment">        * 参数2(可选): 可以指定生成对象类型,如果不填此参数,需进行强转</span><br><span class="hljs-comment">        * 两种方式都可以获取!</span><br><span class="hljs-comment">        */</span><br>       TestBean testBeanName = applicationContext.getBean(<span class="hljs-string">&quot;testBeanName&quot;</span>,  TestBean.class);<br>       TestBean testBeanId = applicationContext.getBean(<span class="hljs-string">&quot;testBeanId&quot;</span>,  TestBean.class);<br></code></pre></div></td></tr></table></figure><h6 id="3-3-scope属性"><a href="#3-3-scope属性" class="headerlink" title="3.3  scope属性"></a>3.3  scope属性</h6><blockquote><p>bean标签中添加scope属性,设置bean对应对象生成规则.</p><p>singleton的设置在通过上下文加载时就会创建对象。而prototype则不会创建。</p></blockquote><h6 id="3-3-1-scope-“singleton”"><a href="#3-3-1-scope-“singleton”" class="headerlink" title="3.3.1  scope = “singleton”"></a>3.3.1  scope = “singleton”</h6><p>单例,默认值,适用于实际开发中的绝大部分情况.</p><p>配置:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testBeanName&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testBeanId&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itqf.spring.bean.TestBean&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//TODO 测试bean标签中 scope = singleton</span><br><br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-bean.xml&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1: name/id</span><br><span class="hljs-comment">         * 参数2(可选): 可以指定生成对象类型,如果不填此参数,需进行强转</span><br><span class="hljs-comment">         * 两种方式都可以获取!</span><br><span class="hljs-comment">         */</span><br>        TestBean testBeanName = applicationContext.getBean(<span class="hljs-string">&quot;testBeanName&quot;</span>, TestBean.class);<br>        TestBean testBeanId = applicationContext.getBean(<span class="hljs-string">&quot;testBeanId&quot;</span>, TestBean.class);<br><br>        System.out.println(testBeanName == testBeanId); <span class="hljs-comment">//打印 true</span><br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h6 id="3-3-2-scope-”prototype”"><a href="#3-3-2-scope-”prototype”" class="headerlink" title="3.3.2  scope=”prototype”"></a>3.3.2  scope=”prototype”</h6><p>多例,适用于struts2中的action配置</p><p>配置:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testBeanName&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testBeanId&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itqf.spring.bean.TestBean&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//TODO 测试bean标签中 scope = prototype</span><br><br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-bean.xml&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1: name/id</span><br><span class="hljs-comment">         * 参数2(可选): 可以指定生成对象类型,如果不填此参数,需进行强转</span><br><span class="hljs-comment">         * 两种方式都可以获取!</span><br><span class="hljs-comment">         */</span><br>        TestBean testBeanName = applicationContext.getBean(<span class="hljs-string">&quot;testBeanName&quot;</span>, TestBean.class);<br>        TestBean testBeanId = applicationContext.getBean(<span class="hljs-string">&quot;testBeanId&quot;</span>, TestBean.class);<br><br>        System.out.println(testBeanName == testBeanId); <span class="hljs-comment">//打印 false</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="3-4-lazy-init属性"><a href="#3-4-lazy-init属性" class="headerlink" title="3.4  lazy-init属性"></a>3.4  lazy-init属性</h6><p><strong>注意:</strong> 只对单例有效,设置scope=”singleton”时测试</p><p>延时创建属性.</p><p>lazy-init=”false” 默认值,不延迟创建,即在启动时候就创建对象.</p><p>lazy-init=”true” 延迟初始化,在用到对象的时候才会创建对象.</p><p>配置:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testBeanName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testBeanId&quot;</span>  <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span> <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qianfeng.day52.entity.TestBean&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试1: lazy-init=”false”</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>   <span class="hljs-comment">//TODO 测试bean标签中的 lazy-init=&quot;false&quot; 默认值</span><br>   ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-bean.xml&quot;</span>);<br>   System.out.println(<span class="hljs-string">&quot;获取数据之前!&quot;</span>); <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">      * 参数1: name/id</span><br><span class="hljs-comment">      * 参数2(可选): 可以指定生成对象类型,如果不填此参数,需进行强转</span><br><span class="hljs-comment">      * 两种方式都可以获取!</span><br><span class="hljs-comment">      */</span><br>    TestBean testBeanName = applicationContext.getBean(<span class="hljs-string">&quot;testBeanName&quot;</span>, TestBean.class);<br>    TestBean testBeanId = applicationContext.getBean(<span class="hljs-string">&quot;testBeanId&quot;</span>, TestBean.class);<br>System.out.println(<span class="hljs-string">&quot;获取数据之后!&quot;</span>); <br> <span class="hljs-comment">//测试结果: 先输出 实体类的构造方法 --&gt; 获取数据之前  --&gt; 获取数据之后</span><br>     <span class="hljs-comment">//证明: false 不延迟创建,在创建ApplicationContext的时候就创建了对象!</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试2:lazy-init=”true”</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-comment">//TODO 测试bean标签中的 lazy-init=&quot;true&quot; 默认值</span><br><br>  ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-bean.xml&quot;</span>);<br>  System.out.println(<span class="hljs-string">&quot;获取数据之前!&quot;</span>); <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 参数1: name/id</span><br><span class="hljs-comment">    * 参数2(可选): 可以指定生成对象类型,如果不填此参数,需进行强转</span><br><span class="hljs-comment">    * 两种方式都可以获取!</span><br><span class="hljs-comment">    */</span><br>  TestBean testBeanName = applicationContext.getBean(<span class="hljs-string">&quot;testBeanName&quot;</span>, TestBean.class);<br>  TestBean testBeanId = applicationContext.getBean(<span class="hljs-string">&quot;testBeanId&quot;</span>, TestBean.class);<br>  System.out.println(<span class="hljs-string">&quot;获取数据之后!&quot;</span>); <br>   <span class="hljs-comment">//测试结果: 先输出 获取数据之前 ---&gt; 实体类的构造方法 --&gt; 获取数据之后</span><br>   <span class="hljs-comment">//证明: true 延迟创建, 只有在获取的时候创建.</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="3-5-初始化-销毁"><a href="#3-5-初始化-销毁" class="headerlink" title="3.5 初始化/销毁"></a>3.5 初始化/销毁</h6><p>在TestBean类中添加初始化方法和销毁方法（名称自定义）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>   System.out.println(<span class="hljs-string">&quot;TestBean的初始化方法&quot;</span>);<br>&#125;<br>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>   System.out.println(<span class="hljs-string">&quot;TestBean的销毁方法&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testBeanName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;testBeanId&quot;</span>  <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qianfeng.day52.entity.TestBean&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>       TestBean testBean = context.getBean(<span class="hljs-string">&quot;testBeanId&quot;</span>, TestBean.class);<br>       <span class="hljs-comment">// 关闭上下文</span><br>       ((ClassPathXmlApplicationContext)context).close();<br>   &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight d"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs d">注：只有当<span class="hljs-keyword">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>或者不写<span class="hljs-keyword">scope</span>属性(不写的话默认是singleton)，并且关闭了applicationContext对象时destory方法才会执行。<br></code></pre></div></td></tr></table></figure><h4 id="四-对象创建的几种方式"><a href="#四-对象创建的几种方式" class="headerlink" title="四. 对象创建的几种方式"></a>四. 对象创建的几种方式</h4><p>创建配置文件:applicationContext-create.xml</p><p>创建测试代码:CreateTest.java</p><h5 id="1-无参构造函数"><a href="#1-无参构造函数" class="headerlink" title="1. 无参构造函数"></a>1. 无参构造函数</h5><p>之前使用的方式调用了类的无参构造函数.</p><h5 id="2-有参数构造函数"><a href="#2-有参数构造函数" class="headerlink" title="2. 有参数构造函数"></a>2. 有参数构造函数</h5><p>后面章节:对象的依赖-属性注入 (注入属性) 后面章节进行讲解.</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;car&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day55.entity.Car&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;person&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;蓝色&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="3-静态工厂模式"><a href="#3-静态工厂模式" class="headerlink" title="3. 静态工厂模式"></a>3. 静态工厂模式</h5><p>创建工厂类:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Person工厂类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Person  <span class="hljs-title">createPerson</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;静态工厂创建Person&quot;</span>);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> Person();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>配置文件:applicationContext-create.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;personFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qianfeng.day52.utils.PersonFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createPerson&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ApplicationContext context =<span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-create.xml&quot;</span>);<br><span class="hljs-comment">//获取工场bean对应的name</span><br>Person person = (Person) context.getBean(<span class="hljs-string">&quot;personFactory&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;person = &quot;</span> + person);<br></code></pre></div></td></tr></table></figure><h5 id="4-非静态工厂"><a href="#4-非静态工厂" class="headerlink" title="4. 非静态工厂"></a>4. 非静态工厂</h5><p>   创建工场类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * Person工厂类</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonFactory</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非静态创建对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Person</span><br><span class="hljs-comment">     */</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span>  Person <span class="hljs-title">createPerson1</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;非静态工厂创建Person&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person();<br> &#125; &#125;  <br></code></pre></div></td></tr></table></figure><p>配置文件:applicationContext-create.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;personFactory1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qianfeng.day52.utils.PersonFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;personFactory2&quot;</span>  <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;personFactory1&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createPerson1&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-comment">//TODO 测试非静态工厂模式</span><br> ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext-create.xml&quot;</span>);<br><br><span class="hljs-comment">//测试结果:会触发PersonFactory createPerson1方法 输出 System.out.println(&quot;非静态工厂创建Person&quot;);</span><br></code></pre></div></td></tr></table></figure><h4 id="五、IOC和DI"><a href="#五、IOC和DI" class="headerlink" title="五、IOC和DI"></a>五、IOC和DI</h4><blockquote><p>inverse of control 控制反转。将控制权反转给容器（spring），将对象的创建和依赖关系的设置交给容器来完成。</p><p>DI依赖注入。依赖注入是控制反转的一种实现方式。</p></blockquote><h5 id="5-1-注入的两种方式"><a href="#5-1-注入的两种方式" class="headerlink" title="5.1 注入的两种方式"></a>5.1 注入的两种方式</h5><blockquote><p>1、使用set方法</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--property的name属性是指定的set方法的名称，按照javabean的setter生成规则--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day55.controller.UserController&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>2、使用构造方法</p><p>参考有参构造的使用</p></blockquote><h5 id="5-2-简化过程"><a href="#5-2-简化过程" class="headerlink" title="5.2 简化过程"></a>5.2 简化过程</h5><blockquote><p>一般情况下，使用set方法注入，可以采用自动注入，避免大量的set编写。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span><br></code></pre></div></td></tr></table></figure><p>byType：根据类型注入。一个类型有多个对象则无法注入。</p><p>byName：根据名称注入。名称不一致就无法注入。</p></blockquote><blockquote><p>如果在每一个bean标签的配置上都添加一个autowire比较麻烦，可以直接在最上面的beans标签上配置默认的自动注入。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span></span><br><span class="hljs-tag">        <span class="hljs-attr">default-autowire</span>=<span class="hljs-string">&quot;byName&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="六、使用注解方式"><a href="#六、使用注解方式" class="headerlink" title="六、使用注解方式"></a>六、使用注解方式</h4><blockquote><p>问题：</p><p>使用配置文件来配置，每次创建一个类就需要配置一次，太过于麻烦，可以使用注解来将配置简化。</p><p><a href>注意：</a>由于注解需要写在类上，所以只有当该类是自定义的类，才可以使用注解，如果是第三方框架提供的类，还是需要使用配置文件配置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;userDAO&quot;)</span> <span class="hljs-comment">// 可以在后面的括号中指定创建的id，如果不指定，默认为当前类名第一个字母小写</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDAO === save&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;userDAO&quot;)</span> <span class="hljs-comment">// 指定名称注入</span><br>    <span class="hljs-keyword">private</span> UserDAO userDAO;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserService===save&quot;</span>);<br>        userDAO.save();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">// 自动注入</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;UserController====save&quot;</span>);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>如果在注入的过程中使用@Autowired（spring框架中的），默认使用类型注入。如果相同类型对象有两个，那么可以指定名称来注入，需用使用@Qualifier(“userDAO”)。</p><p>也可以使用@Resource注解（javax包中的）来注入。默认也是根据类型注入，如果要根据名称注入，那么需要指定name属性。</p><figure class="highlight kotlin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kotlin"><span class="hljs-meta">@Resource(name = <span class="hljs-meta-string">&quot;userService&quot;</span>)</span><br></code></pre></div></td></tr></table></figure></blockquote><blockquote><p><a href>经典面试题：</a></p><p>@Resource和@Autowired的区别。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--扫描类是否包含相关的注解，在base-package对应的包中扫描，如果包含则创建对象</span><br><span class="hljs-comment">    四大注解：</span><br><span class="hljs-comment">    @Controller：用在controller上</span><br><span class="hljs-comment">    @Service：用在service上</span><br><span class="hljs-comment">    @Repository：用在dao上</span><br><span class="hljs-comment">    @Component：用在其他上</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qf.day55&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span> Spring加载配置文件的方式的区别（ClassPath和FileSystem）<br><span class="hljs-number">2.</span> Spring加载bean的两种方式的区别（BeanFactory和ApplicationContext）<br><span class="hljs-number">3.</span> Spring创建的bean的生命周期（Singleton、Prototype、request、<span class="hljs-keyword">session</span>、<span class="hljs-keyword">global</span>-<span class="hljs-keyword">session</span>）<br>注：request、<span class="hljs-keyword">session</span>、<span class="hljs-keyword">global</span>-<span class="hljs-keyword">session</span>仅在web应用程序中才有效<br></code></pre></div></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/AOP/"/>
    <url>/myblog/2021/10/24/AOP/</url>
    
    <content type="html"><![CDATA[<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><blockquote><p>1、IOC概念</p><p>2、IOC底层体现了Java中什么原理。</p><p>3、spring中IOC创建的对象默认是？何时创建？</p></blockquote><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><blockquote><p>1、掌握AOP相关的概念</p><p>2、AOP底层动态代理的两种方式</p><p>3、Spring中AOP的实现</p><p>4、Spring中单元测试的支持</p><p>5、Spring中使用注解实现</p></blockquote><h4 id="零、日志的使用"><a href="#零、日志的使用" class="headerlink" title="零、日志的使用"></a>零、日志的使用</h4><blockquote><p>日志，在程序中记录程序的运行过程的文件。</p><p>作用：</p><p>1、排错。</p><p>2、行为记录。行为分析，行为模拟，推荐等。（大数据）</p><p>项目中的使用：（管理日志）</p><p>日志的每一次的记录。</p><p>日志的输出类型（错误日志等）控制。</p><p>输出的位置（控制台、文件）控制。</p></blockquote><blockquote><p>使用日志框架。log4j的使用：</p><p>步骤：1、导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>2、编写日志相关代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLog</span> </span>&#123;<br>    <span class="hljs-comment">// 根据当前类生成一个日志对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(TestLog.class);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myDay</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的一天&quot;</span>);<br>        <span class="hljs-comment">// 调试级别（一般情况只是在代码调试过程中才需要输出的内容）</span><br>        logger.debug(<span class="hljs-string">&quot;洗漱&quot;</span>);<br>        logger.debug(<span class="hljs-string">&quot;吃早饭&quot;</span>);<br>        <span class="hljs-comment">// 普通信息</span><br>        logger.info(<span class="hljs-string">&quot;坐公交去上班&quot;</span>);<br>        <span class="hljs-comment">// 警告信息</span><br>        logger.warn(<span class="hljs-string">&quot;有人踩了我一脚&quot;</span>);<br>        logger.warn(<span class="hljs-string">&quot;我就瞪了他一眼&quot;</span>);<br>        logger.warn(<span class="hljs-string">&quot;他骂了我一句&quot;</span>);<br>        <span class="hljs-comment">// 错误信息</span><br>        logger.error(<span class="hljs-string">&quot;我给了他一巴掌&quot;</span>);<br>        logger.error(<span class="hljs-string">&quot;他不让我走&quot;</span>);<br><br>        <span class="hljs-comment">// 普通信息</span><br>        logger.info(<span class="hljs-string">&quot;到公司上班&quot;</span>);<br>        logger.info(<span class="hljs-string">&quot;上班一天过去了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> TestLog().myDay();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>3、配置日志管理</p></blockquote><p><code>log4j.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># ROOTER</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">WARN,CONSOLE,FILE</span><br><span class="hljs-comment"># CONSOLE</span><br><span class="hljs-meta">log4j.appender.CONSOLE</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.CONSOLE.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="hljs-string">%-d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %-5p %-20c %x %m%n</span><br><span class="hljs-comment"># FILE</span><br><span class="hljs-meta">log4j.appender.FILE</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.FILE.File</span>=<span class="hljs-string">D:/day56.log</span><br><span class="hljs-meta">log4j.appender.FILE.MaxBackupIndex</span>=<span class="hljs-string">20</span><br><span class="hljs-meta">log4j.appender.FILE.MaxFileSize</span>=<span class="hljs-string">10MB</span><br><span class="hljs-meta">log4j.appender.FILE.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.FILE.layout.ConversionPattern</span>=<span class="hljs-string">%-d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %-5p %-20c %x %m%n</span><br><span class="hljs-comment"># ERROR</span><br><span class="hljs-meta">log4j.appender.ERR</span>=<span class="hljs-string">org.apache.log4j.DailyRollingFileAppender</span><br><span class="hljs-meta">log4j.appender.ERR.File</span>=<span class="hljs-string">D:/day56Error.log</span><br><span class="hljs-meta">log4j.appender.ERR.Append</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">log4j.appender.ERR.Threshold</span>=<span class="hljs-string">ERROR</span><br><span class="hljs-meta">log4j.appender.file.DatePattern</span>=<span class="hljs-string">&#x27;.&#x27;yyyy-MM-dd&#x27;.log&#x27;</span><br><span class="hljs-meta">log4j.appender.ERR.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.ERR.layout.ConversionPattern</span>=<span class="hljs-string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br></code></pre></div></td></tr></table></figure><h4 id="一、AOP的基本概念"><a href="#一、AOP的基本概念" class="headerlink" title="一、AOP的基本概念"></a>一、AOP的基本概念</h4><blockquote><p>AOP：面向切面（Aspect方面）的编程 。将核心业务与横切业务（日志、权限、事务）在开发时分离开来，直到真正执行时才动态的组合（静态织入）在一起实现。</p><p>好处：解耦。</p><p>AOP是OOP的一个补充。可以看成一种设计模式。</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/761be3201af0f3f2d4bc97f763ac08c5/xmlnote/E82EABB8B8664C35A653F73FD8D394ED/4457" srcset="/myblog/img/loading.gif" lazyload></p><h4 id="二、AOP的底层实现"><a href="#二、AOP的底层实现" class="headerlink" title="二、AOP的底层实现"></a>二、AOP的底层实现</h4><blockquote><p>1、动态代理</p><p> 代理模式：</p><p>a、JDK自带的动态代理：需要接口</p><p>b、asm（cglib）动态代理：不需要接口</p><p>2、静态织入</p></blockquote><h5 id="2-1-JDK动态代理"><a href="#2-1-JDK动态代理" class="headerlink" title="2.1 JDK动态代理"></a>2.1 JDK动态代理</h5><blockquote><p>示例：</p><p>核心业务：数据库操作ProductDAO、ProductDAOImpl</p><p>横切业务：日志操作MyLog</p><p>定义一个动态组合的规则：MyHandler</p></blockquote><blockquote><p>在MyHandler定义了ProductDAO在调用时，如何去切入MyLog的规则。</p><p>根据当前类的加载器，以及ProductDAO的接口，加上MyHanlder里面定义的规则，动态的创建了一个类（此处是$Proxy5），它实现了ProductDAO接口，并且将定义的规则也实现了，将其赋值给ProductDAO接口，并调用其方法（save），就动态的实现了动态代理的过程。</p><p><code>[要求：]</code>一定要有接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// JDK中实现动态代理的关键接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> Throwable</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ProductDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductDAOImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProductDAO</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法调用之前&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法调用之后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span></span>&#123;<br>    <span class="hljs-comment">// 目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br>    <span class="hljs-keyword">private</span> MyLog myLog = <span class="hljs-keyword">new</span> MyLog();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-title">MyHandler</span><span class="hljs-params">(Object target)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// 动态调用方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        myLog.before();<br>        Object re = method.invoke(target, args); <span class="hljs-comment">// 真正执行目标对象的方法</span><br>        myLog.after();<br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductDAOTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ProductDAO productDAO;<br><br>    <span class="hljs-meta">@Before</span> <span class="hljs-comment">// 在测试方法执行之前</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        productDAO = <span class="hljs-keyword">new</span> ProductDAOImpl(); <span class="hljs-comment">// target</span><br>        MyHandler handler = <span class="hljs-keyword">new</span> MyHandler(productDAO); <span class="hljs-comment">// 实现组装的规则</span><br>        <span class="hljs-comment">// 动态的创建一个代理对象来执行</span><br>        productDAO = (ProductDAO) Proxy.newProxyInstance(<br>                ProductDAO.class.getClassLoader(), <span class="hljs-comment">// 得到productDAO对应的类加载器</span><br>                productDAO.getClass().getInterfaces(), <span class="hljs-comment">// 得到productDAO对应的接口</span><br>                handler);<span class="hljs-comment">// 组装规则的对象</span><br>        System.out.println(productDAO.getClass());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;<br>        productDAO.save();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;<br>        productDAO.update();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="2-2-cglib动态代理"><a href="#2-2-cglib动态代理" class="headerlink" title="2.2 cglib动态代理"></a>2.2 cglib动态代理</h5><blockquote><p>示例：</p><p>核心业务：数据库操作StudentDAO</p><p>横切业务：日志操作MyLog1</p><p>定义一个动态组合的规则：MyCglibHandler</p></blockquote><blockquote><p>Cglib实现动态代理的原理：根据业务类，以及规则，动态生成一个业务类的子类，该子类中重组了该规则的实现，通过父类去引用子类的对象，来实现多态，以得到动态代理的效果。</p><p><code>[注意：]</code>在创建子类对象时，需要设置父类的类型和规则的对象。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入aspectj相关内容，例如asm(cglib)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在删除&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在查询&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法调用之前&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法调用之后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCglibHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span></span>&#123;<br>    <span class="hljs-keyword">private</span>  MyLog1 log = <span class="hljs-keyword">new</span> MyLog1();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects,</span></span><br><span class="hljs-params"><span class="hljs-function">                            MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">// 调用横切的日志</span><br>        log.before();<br>        <span class="hljs-comment">// 调用原本的父类业务操作</span><br>        Object re = methodProxy.invokeSuper(o, objects);<br>        log.after();<br>        <span class="hljs-keyword">return</span> re;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDAOTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> StudentDAO studentDAO; <span class="hljs-comment">// 父类</span><br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        studentDAO = new StudentDAO(); // 创建业务类的对象</span><br>        MyCglibHandler handler = <span class="hljs-keyword">new</span> MyCglibHandler(); <span class="hljs-comment">// 创建规则对象</span><br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer(); <span class="hljs-comment">// 创建一个用来生产动态代理对象的对象</span><br>        <span class="hljs-comment">// 设置相应的内容</span><br>        enhancer.setSuperclass(StudentDAO.class); <span class="hljs-comment">// 设置父类的类型</span><br>        enhancer.setCallback(handler); <span class="hljs-comment">// 设置规则，回调</span><br>        studentDAO = (StudentDAO) enhancer.create(); <span class="hljs-comment">// 动态创建一个子类的对象</span><br>        System.out.println(studentDAO.getClass());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span></span>&#123;<br>        studentDAO.delete();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFind</span><span class="hljs-params">()</span></span>&#123;<br>        studentDAO.find();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="三、Spring中的AOP实现"><a href="#三、Spring中的AOP实现" class="headerlink" title="三、Spring中的AOP实现"></a>三、Spring中的AOP实现</h4><h5 id="3-1-基本实现"><a href="#3-1-基本实现" class="headerlink" title="3.1 基本实现"></a>3.1 基本实现</h5><blockquote><p>步骤：</p><p>1、导入依赖</p><p>2、编写相应的业务和横切</p><p>3、编写spring的配置文件，配置aop过程</p><p>4、编写单元测试</p></blockquote><p><code>导入依赖</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>业务和横切</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ProductDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductDAOImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProductDAO</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查找成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法开始执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>配置文件</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;productDAO&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day1.dao.impl.ProductDAOImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentDAO&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day1.dao.StudentDAO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day1.aop.MyLog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--aop的配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--切入点：定义一个需要调用横切方法的表达式规范</span><br><span class="hljs-comment">        execution : 执行（里面就写规范）</span><br><span class="hljs-comment">        public void com.qf.day1.dao.ProductDAO.save()</span><br><span class="hljs-comment">        * (所有的返回值类型) com.qf.day1.*.*(..)</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qf.day1.dao.*.*(..))&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:pointcut</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--定义切面，横切业务相关的类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myLog&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--前置通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--后置通知--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>单元测试</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductDAOTest</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ProductDAO productDAO;<br>    <span class="hljs-keyword">private</span> StudentDAO studentDAO;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br>        productDAO = context.getBean(<span class="hljs-string">&quot;productDAO&quot;</span>, ProductDAO.class);<br>        studentDAO = context.getBean(<span class="hljs-string">&quot;studentDAO&quot;</span>, StudentDAO.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;<br>        productDAO.save();<br>        studentDAO.delete();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="3-2-通知种类"><a href="#3-2-通知种类" class="headerlink" title="3.2 通知种类"></a>3.2 通知种类</h5><blockquote><p>before：前置通知，方法调用前调用</p><p>after：后置通知，方法调用后调用</p><p>after-throwing：抛出异常时通知</p><p>after-returning：返回值时通知</p><p>around：环绕通知。可以手动去实现代码组合的过程。（回到底层实现）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-comment">// 动态调用方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>;<br>    myLog.before();<br>    Object re = method.invoke(target, args); <span class="hljs-comment">// 真正执行目标对象的方法</span><br>    myLog.after();<br>    System.out.println(i);<br>    <span class="hljs-keyword">return</span> re;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>连接点：当业务方法调用时，横切方法会切入，此时两者会在某个方法中同时被调用，此处会有一个连接点。可以通过连接点在横切方法中了解业务方法的特征。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(JoinPoint jp)</span></span>&#123;<br>        System.out.println(jp.getTarget().getClass().getName() + <span class="hljs-string">&quot;===&quot;</span> + jp.getSignature().getName());<br>        System.out.println(<span class="hljs-string">&quot;方法开始执行&quot;</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="四、Spring中对单元测试的支持"><a href="#四、Spring中对单元测试的支持" class="headerlink" title="四、Spring中对单元测试的支持"></a>四、Spring中对单元测试的支持</h4><blockquote><p>在spring框架中也有对Junit的支持，步骤如下：</p><p>1、导入依赖</p><p>2、在单元测试类上写相应的注解</p><p>3、在使用的属性上加相应的注解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="hljs-comment">// spring对junit的支持</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span> <span class="hljs-comment">// 指定配置文件的名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductServletTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductServlet productServlet;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;<br>        productServlet.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="五、Spring中使用注解实现AOP"><a href="#五、Spring中使用注解实现AOP" class="headerlink" title="五、Spring中使用注解实现AOP"></a>五、Spring中使用注解实现AOP</h4><blockquote><p>步骤：</p><p>1、导入相关的依赖</p><p>2、编写业务类和切面类</p><p>3、编写spring.xml中的配置（ioc的包扫描，以及aop的自动代理）</p><p>4、添加业务类中的ioc相关注解，以及切面类中的aop注解</p><p>5、编写单元测试</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>业务类和切面类</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&lt;aop:config&gt;</span><br><span class="hljs-comment">    &lt;aop:pointcut id=&quot;pc&quot; expression=&quot;execution(* com.qf.day2.dao.*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;</span><br><span class="hljs-comment">    &lt;aop:aspect ref=&quot;myLog&quot;&gt;</span><br><span class="hljs-comment">        &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;pc&quot;&gt;&lt;/aop:before&gt;</span><br><span class="hljs-comment">        &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pc&quot;&gt;&lt;/aop:after&gt;</span><br><span class="hljs-comment">    &lt;/aop:aspect&gt;</span><br><span class="hljs-comment">&lt;/aop:config&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// &lt;aop:aspect ref=&quot;myLog&quot;&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog</span> </span>&#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.qf.day2.dao.*.*(..))&quot;)</span> <span class="hljs-comment">//&lt;aop:pointcut id=&quot;pc&quot; expression=&quot;execution(* com.qf.day2.dao.*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pc</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pc()&quot;)</span> <span class="hljs-comment">//aop:before method=&quot;before&quot; pointcut-ref=&quot;pc&quot;&gt;&lt;/aop:before&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法开始执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pc()&quot;)</span> <span class="hljs-comment">//&lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pc&quot;&gt;&lt;/aop:after&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法执行结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>spring.xml中的配置</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qf.day2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--aop自动代理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>单元测试</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentDAOTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentDAO studentDAO;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;<br>        studentDAO.save();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="六、AOP中面试涉及到的概念"><a href="#六、AOP中面试涉及到的概念" class="headerlink" title="六、AOP中面试涉及到的概念"></a>六、AOP中面试涉及到的概念</h4><blockquote><ul><li><p>连接点(Joinpoint):</p><p>特定点是程序执行的某一个特定位置,如类开始初始化前,类初始化后,类某一个方法调用前/调用后,方法抛出异常后,一个类或一段程序代码拥有一些具有边界性质的特定点,这写代码中的特定点就称为”连接点”,Spring仅支持方法连接点,即仅能在方法调用前,方法调用后,方法抛出异常时,以及方法调用前后这些程序执行点织入通知.</p></li><li><p>切点(Pointcut)</p><p>每个程序类都拥有对个连接点,如一个拥有两个方法的类,这两个方法都是连接点,即连接点是程序类中客观存在的事物,但在众多连接点中,如何定位某些感兴趣的连接点呢?AOP通过”切点”定位特定的连接点.</p></li><li><p>通知(Advice)，增强</p><p>通知是织入目标类连接点上的一段程序代码,在Spring中,通知不仅可以描述程序代码,还拥有另一个和连接点相关的信息,这便是执行点的方位,结合执行点的方位信息和切点信息,就可以找到特定的连接,正因为通知既包含了用于添加到目标连接点上的一段执行逻辑,又包含用于定位连接点的方位信息,所以Spring所提供的通知接口都是带方位名的.如BeforeAdvice,AfterReturningAdvice,ThrowsAdvice等.BeforeAdvice表示方法调用前的位置.而AfterReturningAdivce表示访问返回后的位置,所以只有结合切点和通知,才能确定特定的连接点并实施通知逻辑.</p></li><li><p>目标对象(Target)</p><p>通知逻辑的织入目标类.如果没有AOP,那么目标业务类需要自己实现所有逻辑,如果使用AOP可以把一些非逻辑性代码通过AOP织入到主程序代码上.</p></li><li><p>引介(Introduction)</p><p>引介是一种特殊的增强,它为类添加一些属性和方法.这样,即使一个业务类原本没有实现某一个接口,通过AOP的引介功能,也可以动态地为该业务类添加接口的实现逻辑.让业务类成为这个接口的实现类.</p></li><li><p>织入(Weaving)</p><p>织入是将通知添加到目标类具体链接点上的过程,AOP就像一台织布机,将目标类,通知,或者引介天衣无缝的编织到一起,我们不能不说”织入”这个词太精辟了,根据不同的实现技术,AOP有3种织入方式:</p><ul><li><p>编译期织入,这要求使用特殊的Java编译器.</p></li><li><p>类装载期织入,这要求使用特殊的类装载器.</p></li><li><p>动态代理织入,在运行期为目标类添加通知生成子类的方式.</p><p><strong>Spring采用动态代理织入,而AspectJ采用编译期织入和类装载器织入.</strong></p></li></ul></li><li><p>代理(Proxy)</p><p>一个类被AOP织入通知后,就产生了一个结果类.它是融合了原类和通知逻辑的代理类,根据不同的代理方式,代理类既可能是和原类具有相同接口的类,也可能就是原类的子类,所以可以采用与调用原类相同的方法调用代理类.</p></li><li><p>切面(Aspect)</p><p>切面由切点和通知(介入)组成,它既包括横切逻辑的定义,也包括链接点的定义,也包括链接点的定义,Spring AOP就是负责实施切面的框架,它将切面所定义的横切所定义的横切逻辑织入切面所指定的链接点中.</p><p>AOP的工作重心在于如何将通知应用于目标对象的连接点中上,这里包含两项工作:</p><p>第一,如何通过切点和通知定位到链接点上;</p><p>第二,如何在通知中编写切面代码;</p></li></ul></blockquote><h4 id="七、Spring整合MyBatis框架"><a href="#七、Spring整合MyBatis框架" class="headerlink" title="七、Spring整合MyBatis框架"></a>七、Spring整合MyBatis框架</h4><blockquote><p>写一个MyBatis框架的基本操作代码。</p></blockquote><blockquote><p>加入Spring整合的步骤：</p><p>1、导入相关依赖</p><p>2、编写spring的配置文件</p><p>3、修改代理以使用spring的IOC的注解</p><p>4、编写单元测试</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.40<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.18.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.qf.day2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:dbconfig.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--数据源连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置sessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*Mapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置mapper对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mapperScannerConfigurer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.qf.day2.dao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>作业：</p><p>1、将Spring和MyBatis框架整合</p><p>2、将Spring的AOP相关内容整理</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/%E4%BA%8B%E5%8A%A1/"/>
    <url>/myblog/2021/10/24/%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h4><h5 id="1-1-事务概念"><a href="#1-1-事务概念" class="headerlink" title="1.1 事务概念"></a>1.1 事务概念</h5><blockquote><p>把多条数据库操作单元放到一起，让这些操作能够实现同时成功或者同时失败的过程。</p></blockquote><h5 id="1-2、事务的特征"><a href="#1-2、事务的特征" class="headerlink" title="1.2、事务的特征"></a>1.2、事务的特征</h5><blockquote><p>ACID</p><p>一致性：在事务执行过程中，事务中操作的状态要一致。</p><p>原子性：事务是一个整体单元，不可分割。</p><p>隔离性：事务之间应该相互隔离，互不影响。</p><p>持久性：事务一旦提交，就会永久的保存到数据库中。</p></blockquote><h5 id="1-3、事务并发引发的问题"><a href="#1-3、事务并发引发的问题" class="headerlink" title="1.3、事务并发引发的问题"></a>1.3、事务并发引发的问题</h5><blockquote><p>数据库事务一般不可能做到完全隔离（性能太低），如果事务并发，那么可能会引发很多问题：</p><p>1、脏读</p><p>在一个事务中读取了另一个事务的未提交的数据。会对数据库操作产生很大的影响，不允许出现。</p><p>2、不可重复读（虚读）</p><p>在一个事务中两次读取的数据不一致。虽然会对用户产生一定的影响，但是问题不大。</p><p>3、幻读</p><p>在事务操作过程中读取多条数据时，发现数据多出或者减少条数。虽然会对用户产生一定的影响，但是问题不大。</p></blockquote><h5 id="1-4、事务的隔离级别"><a href="#1-4、事务的隔离级别" class="headerlink" title="1.4、事务的隔离级别"></a>1.4、事务的隔离级别</h5><blockquote><p>事务的安全与事务的并发，需要取一个中间值来设置为数据库的隔离级别。</p><p>隔离级别：</p><p>1、读未提交：可以读取未提交的数据。会引发脏读、虚读、幻读。</p><p>2、读已提交：可以读取已提交的数据。会引发虚读和幻读。Oracle等绝大部分数据都是默认设置此级别。</p><p>4、可重复读：会引发幻读。MySQL默认设置此级别。</p><p>8、可串行化：事务串行（挨个）执行。</p></blockquote><h5 id="1-5-事务的传播性"><a href="#1-5-事务的传播性" class="headerlink" title="1.5 事务的传播性"></a>1.5 事务的传播性</h5><blockquote><p>是指在Spring框架中，对事务的操作过程中，事务之间的传播设置7种方式。</p><p>当业务（service）方法调用其他业务（service）方法时，由于service在调用时可能会开启事务，此时可能有多个事务出现，这种情况就需要通过事务的传播性解决。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.transaction;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TransactionDefinition</span> </span>&#123;<br>    <span class="hljs-comment">// 事务的传播性</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_REQUIRED = <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果当前没有事务，则开启一个事务，有事务，则直接使用（默认值）</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_SUPPORTS = <span class="hljs-number">1</span>; <span class="hljs-comment">// 支持事务</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_MANDATORY = <span class="hljs-number">2</span>; <span class="hljs-comment">// 需要事务，如果当前有事务，则直接使用，如果没有，则抛出异常</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_REQUIRES_NEW = <span class="hljs-number">3</span>; <span class="hljs-comment">// 需要开启一个新事务</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_NOT_SUPPORTED = <span class="hljs-number">4</span>; <span class="hljs-comment">// 不支持事务，如果有事务，则挂起该事务</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_NEVER = <span class="hljs-number">5</span>; <span class="hljs-comment">// 不支持事务，如果有事务，则抛出异常</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_NESTED = <span class="hljs-number">6</span>; <span class="hljs-comment">// 如果有事务，则在事务中再开启一个事务，以嵌套的方式执行（需要数据库支持）</span><br>    <br>    <span class="hljs-comment">// 隔离级别</span><br>    <span class="hljs-keyword">int</span> ISOLATION_DEFAULT = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_READ_UNCOMMITTED = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_READ_COMMITTED = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_REPEATABLE_READ = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_SERIALIZABLE = <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">int</span> TIMEOUT_DEFAULT = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getPropagationBehavior</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIsolationLevel</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getTimeout</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isReadOnly</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="1-6-事务在Java中的实现方式"><a href="#1-6-事务在Java中的实现方式" class="headerlink" title="1.6 事务在Java中的实现方式"></a>1.6 事务在Java中的实现方式</h5><blockquote><p>1、编程式事务：</p><p>使用编程的方式来实现事务的处理。</p><p>2、声明式事务（AOP）</p><ul><li>使用配置文件</li><li>使用注解</li></ul><p>spring框架中提供3个事务管理器：</p><ul><li>DataSourceTransactionManager：其他的封装自JDBC的数据库操作的事务器</li><li>HibernateTransactionManager：hibernate框架的事务管理器</li><li>JpaTransactionManager：JPA框架的事务管理器</li></ul></blockquote><h6 id="1-6-1-使用配置文件实现声明式事务"><a href="#1-6-1-使用配置文件实现声明式事务" class="headerlink" title="1.6.1 使用配置文件实现声明式事务"></a>1.6.1 使用配置文件实现声明式事务</h6><blockquote><p>1、在spring的配置文件中配置：</p><ul><li>aop:config：aop相关的配置，切入点等</li><li>transactionManager：由于横切类是spring框架提供的，所以需要使用bean标签创建对象</li><li>tx:advice：对于事务处理，无需配置是调用之前还是之后等，只需要配置告知transactionManager哪些方法需要事务，哪些不需要事务</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明事务管理器类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--定义事务通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--使用通配符来定义方法的声明，在service中方法的取名一定要遵循相应的规则--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            read-only：只读，不需要事务</span><br><span class="hljs-comment">            propagation：事务的传播性，默认值是REQUIRED</span><br><span class="hljs-comment">            rollback-for：遇到何种异常时回滚</span><br><span class="hljs-comment">            no-rollback-for：遇到何种异常时不回滚</span><br><span class="hljs-comment">            timeout：事务执行超时时间</span><br><span class="hljs-comment">            isolation：事务的隔离级别，不设置采用默认值，默认值则是数据库的默认值</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.RuntimeException&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:method</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--定义声明事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.qf.day2.service.*.*(..))&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:pointcut</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h6 id="1-6-2使用注解配置事务"><a href="#1-6-2使用注解配置事务" class="headerlink" title="1.6.2使用注解配置事务"></a>1.6.2使用注解配置事务</h6><blockquote><p>1、在spring.xml中配置注解的事务管理</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过注解来驱动事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>2、在业务(service)类上添加注解</p><p>如果只是在类上添加，表示当前类中的所有方法皆按照类上的执行。</p><p>如果方法上面添加，该方法按照添加的执行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> BookDAO bookDAO;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> bookDAO.findAll();<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = RuntimeException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span></span>&#123;<br>        bookDAO.delete(id);<br><span class="hljs-comment">//        int i = 5 / 0;</span><br>        bookDAO.delete(id + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>配置文件和注解差异：</p><p>使用配置文件一劳永逸，但是对于方法的名称（声明）有限制。</p><p>使用注解配置简单，但是需要每个开发人员在写service时自行配置。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/shiro%E6%A1%86%E6%9E%B6/"/>
    <url>/myblog/2021/10/24/shiro%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="shiro使用"><a href="#shiro使用" class="headerlink" title="shiro使用"></a>shiro使用</h3><p>[TOC]</p><h4 id="一-Shiro框架简介"><a href="#一-Shiro框架简介" class="headerlink" title="一. Shiro框架简介"></a>一. Shiro框架简介</h4><p>shiro：是一个轻量级的安全框架。</p><p><img src="https://note.youdao.com/yws/public/resource/c1ba4db4ad87c7636027f0d7cefec4a6/B5CBB725C6204573A6EFB3760A81DFB6?ynotemdtimestamp=1616651486822" srcset="/myblog/img/loading.gif" lazyload alt="1"></p><p>Authentication：登录验证。</p><p>Authorization：授权。</p><p>SessionManagement：会话管理。（核心）</p><p>Cryptography：加密。</p><p>Web Support：web支持。</p><p>Caching：缓存支持。</p><p>Concurrency：多线程支持。</p><p>Testing：单元测试支持。</p><p>Run As：在允许的情况下，可以去模拟其他用户。</p><p>Remember Me：记住我。</p><h4 id="二-Shiro框架代码流程："><a href="#二-Shiro框架代码流程：" class="headerlink" title="二. Shiro框架代码流程："></a>二. Shiro框架代码流程：</h4><p><img src="https://note.youdao.com/yws/public/resource/c1ba4db4ad87c7636027f0d7cefec4a6/F25E98ADF0E44FAFA1B5773EA72EA1ED?ynotemdtimestamp=1616651486822" srcset="/myblog/img/loading.gif" lazyload alt="2"></p><p>Subject：使用者，一般指当前用户。</p><p>SecurityManager：安全管理者，全局安全管理，可以管理所有的用户。</p><p>Realm：相当于数据源。</p><p>SecurityUtils：安全工具类。</p><h4 id="三-Shiro的适用范围："><a href="#三-Shiro的适用范围：" class="headerlink" title="三. Shiro的适用范围："></a>三. Shiro的适用范围：</h4><p><img src="https://note.youdao.com/yws/public/resource/c1ba4db4ad87c7636027f0d7cefec4a6/EC2F5C62F02D43A082E210775BF6E3FF?ynotemdtimestamp=1616651486822" srcset="/myblog/img/loading.gif" lazyload alt="3"></p><h4 id="四-基础代码"><a href="#四-基础代码" class="headerlink" title="四. 基础代码"></a>四. 基础代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pom.xml```中导入包"><br>```xml<br>&lt;dependency&gt;<br>      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;<br>      &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;<br>      &lt;version&gt;1.4.0&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;commons-logging&lt;/groupId&gt;<br>      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;<br>      &lt;version&gt;1.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>shiro.ini文件</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-attr">zhangsan</span>=<span class="hljs-number">123456</span>,admin<br><span class="hljs-attr">lisi</span>=<span class="hljs-number">123456</span>,user,vip<br><span class="hljs-section">[roles]</span><br><span class="hljs-attr">admin</span>=delete,update,save,find<br><span class="hljs-attr">user</span>=find<br><span class="hljs-attr">vip</span>=find,update,save<br></code></pre></div></td></tr></table></figure><p>java代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 操作ini文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestShiro</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 得到核心Manager对象</span><br>        SecurityManager securityManager = <span class="hljs-keyword">new</span><br>                IniSecurityManagerFactory(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>).getInstance();<br>        <span class="hljs-comment">// 设置当前工具类中的securityManager</span><br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">// 得到subject</span><br>        Subject subject = SecurityUtils.getSubject();<br>        <span class="hljs-comment">// 得到（创建）当前登录用户信息</span><br>        UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">// 当前登录中，shiro框架并不会因为登录不成功而返回null，而是直接抛出异常。</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 登录</span><br>            subject.login(token);<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>            check();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br>        Subject subject = SecurityUtils.getSubject();<br>        System.out.println(<span class="hljs-string">&quot;当前用户为：&quot;</span> + subject.getPrincipal());<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否admin：&quot;</span> + subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否user：&quot;</span> + subject.hasRole(<span class="hljs-string">&quot;user&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否vip：&quot;</span> + subject.hasRole(<span class="hljs-string">&quot;vip&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否有权限delete：&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;delete&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否有权限update：&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;update&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否有权限save：&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;save&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;当前用户是否有权限find：&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;find&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="五-整合ssm框架，使用shiro自带的数据库"><a href="#五-整合ssm框架，使用shiro自带的数据库" class="headerlink" title="五. 整合ssm框架，使用shiro自带的数据库"></a>五. 整合ssm框架，使用shiro自带的数据库</h4><p>shiro自带的数据库：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Navicat MySQL Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Source Server         : mysql</span><br><span class="hljs-comment">Source Server Version : 50529</span><br><span class="hljs-comment">Source Host           : localhost:3306</span><br><span class="hljs-comment">Source Database       : shiro</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Target Server Type    : MYSQL</span><br><span class="hljs-comment">Target Server Version : 50529</span><br><span class="hljs-comment">File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Date: 2019-02-21 12:04:16</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `roles_permissions`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `roles_permissions`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles_permissions` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `role_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `permission` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `idx_roles_permissions` (`role_name`,`permission`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">15</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of roles_permissions</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;cmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:c:delete&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;cmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:c:find&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;cmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:c:save&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;cmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:c:update&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;mmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:m:delete&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;mmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:m:find&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;mmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:m:save&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;mmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:m:update&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;sys:*:find&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;14&#x27;</span>, <span class="hljs-string">&#x27;xmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:x:delete&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;xmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:x:find&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;xmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:x:save&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles_permissions` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;13&#x27;</span>, <span class="hljs-string">&#x27;xmanager&#x27;</span>, <span class="hljs-string">&#x27;sys:x:update&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `users`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `users`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `password_salt` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `idx_users_username` (`username`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">6</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of users</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;chenqi&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;zhaoliu&#x27;</span>, <span class="hljs-string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `user_roles`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `user_roles`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_roles` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `role_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `idx_user_roles` (`username`,`role_name`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">6</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of user_roles</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;chenqi&#x27;</span>, <span class="hljs-string">&#x27;xmanager&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-string">&#x27;cmanager&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;zhaoliu&#x27;</span>, <span class="hljs-string">&#x27;mmanager&#x27;</span>);<br><br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pom.xml```导入包"><br>```xml<br>&lt;dependency&gt;<br>      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;<br>      &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;<br>      &lt;version&gt;1.4.0&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;<br>      &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;<br>      &lt;version&gt;1.4.0&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;<br>      &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;<br>      &lt;version&gt;1.4.0&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>在<code>web.xml</code>中添加shiro对应的过滤器配置，表示shiro权限验证需要拦截所有的请求</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- shiro filter --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>shiroFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>targetFilterLifecycle<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>shiroFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在<code>spring.xml</code>中配置shiro框架</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--shiro配置开始--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lifecycleBeanPostProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;credentialsMatcher&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.authc.credential.Md5CredentialsMatcher&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 缓存管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cacheManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.cache.MemoryConstrainedCacheManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      使用Shiro自带的JdbcRealm类</span><br><span class="hljs-comment">      指定密码匹配所需要用到的加密对象</span><br><span class="hljs-comment">      指定存储用户、角色、权限许可的数据源及相关查询语句</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcRealm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.realm.jdbc.JdbcRealm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;credentialsMatcher&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;credentialsMatcher&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;permissionsLookupEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Shiro安全管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;realm&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jdbcRealm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cacheManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行</span><br><span class="hljs-comment">       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shiroFilter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Shiro的核心安全接口，这个属性是必须的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;securityManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;property name=&quot;successUrl&quot; value=&quot;/&quot; &gt;&lt;/property&gt; --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 用户访问未对其授权的资源时，所显示的连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;unauthorizedUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filterChainDefinitions&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>                /**=anon<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在<code>spring-mvc.xml</code>中配置注解支持。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用shiro注解的配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;securityManager&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>编写登录代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">// 登录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Subject subject = SecurityUtils.getSubject();<br>        UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(username, password);<br>        subject.login(token);<br>    &#125;<br><br>    <span class="hljs-comment">// 退出登录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logout</span><span class="hljs-params">()</span></span>&#123;<br>        Subject subject = SecurityUtils.getSubject();<br>        subject.logout();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>编写页面权限验证代码：</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;shiro&quot;</span> uri=<span class="hljs-string">&quot;http://shiro.apache.org/tags&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/&quot;</span>/&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;a href=<span class="hljs-string">&quot;user/logout&quot;</span>&gt;退出登录&lt;/a&gt;<br>登录成功，当前登录用户为：&lt;shiro:principal&gt;&lt;/shiro:principal&gt;&lt;br/&gt;<br>当前用户角色为：<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;admin&quot;</span>&gt;admin, &lt;/shiro:hasRole&gt;<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;user&quot;</span>&gt;user, &lt;/shiro:hasRole&gt;<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;cmanager&quot;</span>&gt;cmanager, &lt;/shiro:hasRole&gt;<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;mmanager&quot;</span>&gt;mmanager, &lt;/shiro:hasRole&gt;<br>&lt;shiro:hasRole name=<span class="hljs-string">&quot;xmanager&quot;</span>&gt;xmanager, &lt;/shiro:hasRole&gt;<br>&lt;ul&gt;<br>    M模块：<br>    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:m:find&quot;</span>&gt;<br>        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;m/f&quot;</span>&gt;M模块查看&lt;/a&gt;&lt;/li&gt;<br>    &lt;/shiro:hasPermission&gt;<br><br><br>    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:m:save&quot;</span>&gt;<br>        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;M模块添加&lt;/a&gt;&lt;/li&gt;<br>    &lt;/shiro:hasPermission&gt;<br><br><br>    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:m:update&quot;</span>&gt;<br>        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;M模块修改&lt;/a&gt;&lt;/li&gt;<br>    &lt;/shiro:hasPermission&gt;<br><br><br>    &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:m:delete&quot;</span>&gt;<br>        &lt;li&gt;&lt;a href=<span class="hljs-string">&quot;m/d&quot;</span>&gt;M模块删除&lt;/a&gt;&lt;/li&gt;<br>    &lt;/shiro:hasPermission&gt;<br><br>&lt;/ul&gt;<br>&lt;ul&gt;<br>    C模块：<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:c:find&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;c/f&quot;</span>&gt;C模块查看&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:c:save&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;C模块添加&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:c:update&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;C模块修改&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:c:delete&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;c/d&quot;</span>&gt;C模块删除&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;ul&gt;<br>    X模块：<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:x:find&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;x/f&quot;</span>&gt;X模块查看&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:x:save&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;X模块添加&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:x:update&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;X模块修改&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>    &lt;li&gt;<br>        &lt;shiro:hasPermission name=<span class="hljs-string">&quot;sys:x:delete&quot;</span>&gt;<br>            &lt;a href=<span class="hljs-string">&quot;x/d&quot;</span>&gt;X模块删除&lt;/a&gt;<br>        &lt;/shiro:hasPermission&gt;<br>    &lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>此时，页面上能够根据登录用户的不同，判断权限并显示不同的链接效果，但是我们发现仍旧可以通过url的方式去访问没有权限的路径。那么我们应该在对应的Controller中添加权限判断。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/m&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MController</span> </span>&#123;<br>    <span class="hljs-meta">@RequiresPermissions(&quot;sys:m:delete&quot;)</span> <span class="hljs-comment">// 判断是否拥有权限</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/d&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m-------d&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequiresPermissions(&quot;sys:m:find&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/f&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">find</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m--------f&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当不满足权限要求时，会抛出异常UnauthorizedException，建议使用全局异常处理来处理登录用户、角色、权限等异常。如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AllExceptionHandler</span> </span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doException</span><span class="hljs-params">(Exception e)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> UnauthorizedException)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/unauthorization&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="六-自定义数据库"><a href="#六-自定义数据库" class="headerlink" title="六. 自定义数据库"></a>六. 自定义数据库</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">根据用户、角色、权限关系的简单思考，得出用户与角色，角色与权限之间是多对多的关系，按照此关系设计出5张表。<br>用户表：users<br>用户角色表：user_role<br>角色表：roles<br>角色权限表：role_auth<br>权限表：auths<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Navicat MySQL Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Source Server         : mysql</span><br><span class="hljs-comment">Source Server Version : 50529</span><br><span class="hljs-comment">Source Host           : localhost:3306</span><br><span class="hljs-comment">Source Database       : testauth</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Target Server Type    : MYSQL</span><br><span class="hljs-comment">Target Server Version : 50529</span><br><span class="hljs-comment">File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Date: 2019-05-14 16:59:04</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `auths`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `auths`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `auths` (<br>  `auth_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `auth_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `menu_url` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `parent_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`auth_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">37</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of auths</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;供应链管理系统&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;基础数据&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;权限管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;业务&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;公司&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;商品档案&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;仓库&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;客户&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;供应商&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;部门&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;用户&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;10&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27;角色管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;13&#x27;</span>, <span class="hljs-string">&#x27;权限配置&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;14&#x27;</span>, <span class="hljs-string">&#x27;角色查询&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;15&#x27;</span>, <span class="hljs-string">&#x27;角色配置&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;库存管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;17&#x27;</span>, <span class="hljs-string">&#x27;预警管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;18&#x27;</span>, <span class="hljs-string">&#x27;应收应付款管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;19&#x27;</span>, <span class="hljs-string">&#x27;采购管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;销售管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;21&#x27;</span>, <span class="hljs-string">&#x27;期初管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;16&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-string">&#x27;盘点&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;16&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;23&#x27;</span>, <span class="hljs-string">&#x27;采购入库预警&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;17&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;24&#x27;</span>, <span class="hljs-string">&#x27;销售发货预警&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;17&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;25&#x27;</span>, <span class="hljs-string">&#x27;销售出库预警&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;17&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;26&#x27;</span>, <span class="hljs-string">&#x27;销售应收单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;27&#x27;</span>, <span class="hljs-string">&#x27;采购应付单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;28&#x27;</span>, <span class="hljs-string">&#x27;请购单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;29&#x27;</span>, <span class="hljs-string">&#x27;采购订单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;30&#x27;</span>, <span class="hljs-string">&#x27;采购入库管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;31&#x27;</span>, <span class="hljs-string">&#x27;采购发票管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;32&#x27;</span>, <span class="hljs-string">&#x27;销售预订单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;33&#x27;</span>, <span class="hljs-string">&#x27;销售订单&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;34&#x27;</span>, <span class="hljs-string">&#x27;发货单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;35&#x27;</span>, <span class="hljs-string">&#x27;销售出库单管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `auths` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;36&#x27;</span>, <span class="hljs-string">&#x27;销售开票管理&#x27;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `roles`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `roles`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>  `role_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `rolename` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`role_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of roles</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;管理员&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;数据管理员&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;人事主管&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `roles` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;业务经理&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `role_auth`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `role_auth`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `role_auth` (<br>  `role_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `auth_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`role_id`,`auth_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of role_auth</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;13&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;14&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;15&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;16&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;17&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;21&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;23&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;24&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;25&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;26&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;27&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;28&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;29&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;30&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;31&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;32&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;33&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;34&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;35&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;36&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;13&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;14&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;15&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;16&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;17&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;21&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;23&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;24&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;25&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;26&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;27&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;28&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;29&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;30&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;31&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;32&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;33&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;34&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;35&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `role_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;36&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `users`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `users`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `pwd` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `truename` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tel` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of users</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;110&#x27;</span>, <span class="hljs-string">&#x27;zhangsan@qf.com&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;120&#x27;</span>, <span class="hljs-string">&#x27;lisi@qf.com&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;130&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;zhaoliu&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-string">&#x27;140&#x27;</span>, <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;chenqi&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;陈七&#x27;</span>, <span class="hljs-string">&#x27;111&#x27;</span>, <span class="hljs-string">&#x27;chenqi@126.com&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `user_auth`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `user_auth`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_auth` (<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `auth_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`,`auth_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of user_auth</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;13&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_auth` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;19&#x27;</span>);<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for `user_role`</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `user_role`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `user_role` (<br>  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `role_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`user_id`,`role_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of user_role</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `user_role` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>);<br><br></code></pre></div></td></tr></table></figure><p>自定义一个Realm，继承AuthorizingRealm</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AuthService authService;<br><br>    <span class="hljs-comment">// 表示与其他的realm区分</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;myRealm&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 角色和权限查询操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> </span>&#123;<br>        <span class="hljs-comment">// 得到当前唯一的用户</span><br>        Users users =  (Users) principals.iterator().next();<br>        <span class="hljs-comment">// 创建一个角色权限封装对象</span><br>        SimpleAuthorizationInfo info = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();<br>        <span class="hljs-comment">// 得到所有的角色信息</span><br>        List&lt;String&gt; roleCode = authService.findRoleCodeByUserId(users.getId());<br>        info.setRoles(<span class="hljs-keyword">new</span> HashSet&lt;String&gt;(roleCode));<br>        <span class="hljs-comment">// 得到所有的权限信息</span><br>        List&lt;String&gt; authNames = authService.findAuthNameByUserId(users.getId());<br>        info.setStringPermissions(<span class="hljs-keyword">new</span> HashSet&lt;String&gt;(authNames));<br><br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-comment">// 登录操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <span class="hljs-comment">// 得到登录输入的用户名和密码</span><br>        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;<br>        String username = usernamePasswordToken.getUsername();<br>        <span class="hljs-keyword">char</span>[] chars = usernamePasswordToken.getPassword();<br>        String password = <span class="hljs-keyword">new</span> String(chars);<br>        <span class="hljs-comment">// 查询用户登录信息</span><br>        Users users = authService.findByUsernameAndPwd(username, password);<br>        <span class="hljs-comment">// 将登录用户封装并返回（用户对象，密码，realm名称）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(users, password, getName());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在<code>spring.xml</code>中移除原JDBCRealm，使用自定义的realm</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myRealm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qianfeng.day22.util.MyRealm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Shiro安全管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;securityManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;realm&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myRealm&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheManager&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cacheManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="七、springboot整合shiro"><a href="#七、springboot整合shiro" class="headerlink" title="七、springboot整合shiro"></a>七、springboot整合shiro</h4><blockquote><p>springboot整合shiro框架与ssm整合shiro框架其实区别不大，主要工作就是把原spring.xml中的内容使用配置类完成。</p></blockquote><p>步骤如下：</p><ol><li><p>在pom.xml中导入包</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.40<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- thymeleaf整合shiro的第三方库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>添加配置类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qianfeng.day21.util;<br><br><span class="hljs-keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.CacheManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.MemoryConstrainedCacheManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.SecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br>    <span class="hljs-comment">//thymeleaf中使用shiro的自定义tag</span><br>    <span class="hljs-meta">@Bean(name = &quot;shiroDialect&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroDialect <span class="hljs-title">shiroDialect</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ShiroDialect();<br><br>    &#125;<br><br>    <span class="hljs-comment">// 下面两个方法对 注解权限起作用有很大的关系，请把这两个方法，放在配置的最上面</span><br>    <span class="hljs-comment">// 相当于spring.xml中&lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;&gt;&lt;/bean&gt;</span><br>    <span class="hljs-meta">@Bean(name = &quot;lifecycleBeanPostProcessor&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LifecycleBeanPostProcessor <span class="hljs-title">getLifecycleBeanPostProcessor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LifecycleBeanPostProcessor();<br>    &#125;<br></code></pre></div></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 相当于spring-mvc.xml中配置&lt;aop:config proxy-target-class=&quot;true&quot;&gt;&lt;/aop:config&gt;</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="hljs-title">getDefaultAdvisorAutoProxyCreator</span><span class="hljs-params">()</span> </span>&#123;<br>    DefaultAdvisorAutoProxyCreator autoProxyCreator = <span class="hljs-keyword">new</span> DefaultAdvisorAutoProxyCreator();<br>    autoProxyCreator.setProxyTargetClass(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">return</span> autoProxyCreator;<br>&#125;<br><br><span class="hljs-comment">// 相当于spring-mvc.xml中配置的</span><br><span class="hljs-comment">// &lt;bean class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt;</span><br><span class="hljs-comment">//        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;</span><br><span class="hljs-comment">//    &lt;/bean&gt;</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="hljs-title">getAuthorizationAttributeSourceAdvisor</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        SecurityManager securityManager)</span> </span>&#123;<br>    AuthorizationAttributeSourceAdvisor advisor = <span class="hljs-keyword">new</span> AuthorizationAttributeSourceAdvisor();<br>    advisor.setSecurityManager(securityManager);<br>    <span class="hljs-keyword">return</span> advisor;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <span class="hljs-comment">// 相当于spring.xml中配置的</span><br> <span class="hljs-comment">//    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;</span><br> <span class="hljs-comment">//        &lt;!-- Shiro的核心安全接口，这个属性是必须的 --&gt;</span><br> <span class="hljs-comment">//        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;&gt;&lt;/property&gt;</span><br> <span class="hljs-comment">//        &lt;!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面 --&gt;</span><br> <span class="hljs-comment">//        &lt;property name=&quot;loginUrl&quot; value=&quot;/login&quot;&gt;&lt;/property&gt;</span><br> <span class="hljs-comment">//        &lt;!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) --&gt;</span><br> <span class="hljs-comment">//        &lt;!-- &lt;property name=&quot;successUrl&quot; value=&quot;/&quot; &gt;&lt;/property&gt; --&gt;</span><br> <span class="hljs-comment">//        &lt;!-- 用户访问未对其授权的资源时，所显示的连接 --&gt;</span><br> <span class="hljs-comment">//        &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/&quot;&gt;&lt;/property&gt;</span><br> <span class="hljs-comment">//        &lt;property name=&quot;filterChainDefinitions&quot;&gt;</span><br> <span class="hljs-comment">//            &lt;value&gt;</span><br> <span class="hljs-comment">//              /**=anon</span><br> <span class="hljs-comment">//              &lt;/value&gt;</span><br> <span class="hljs-comment">//          &lt;/property&gt;</span><br> <span class="hljs-comment">//  &lt;/bean&gt;</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">shiroFilter</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;<br>     ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();<br>     shiroFilterFactoryBean.setSecurityManager(securityManager);<br>     <span class="hljs-comment">//        //拦截器.</span><br>     <span class="hljs-comment">//        Map&lt;String,String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;String,String&gt;();</span><br>     <span class="hljs-comment">//        // 配置不会被拦截的链接 顺序判断</span><br>     <span class="hljs-comment">//        filterChainDefinitionMap.put(&quot;/static/**&quot;, &quot;anon&quot;);</span><br>     <span class="hljs-comment">//        //配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了//        filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;);</span><br>     <span class="hljs-comment">//        //&lt;!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span><br>     <span class="hljs-comment">//        //&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span><br>     <span class="hljs-comment">//        filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</span><br>     <span class="hljs-comment">//        // 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面</span><br>     <span class="hljs-comment">//        shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);</span><br>     <span class="hljs-comment">//        // 登录成功后要跳转的链接</span><br>     <span class="hljs-comment">//        shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;);</span><br>     <span class="hljs-comment">//</span><br>     <span class="hljs-comment">//        //未授权界面;</span><br>     <span class="hljs-comment">//        shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;);</span><br>     <span class="hljs-comment">//        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br>     <span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br> &#125;<br><br> <span class="hljs-comment">// 相当于spring.xml中配置的&lt;bean id=&quot;myRealm&quot; class=&quot;com.qianfeng.day22.util.MyRealm&quot;&gt;&lt;/bean&gt;</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> MyRealm <span class="hljs-title">myRealm</span><span class="hljs-params">()</span></span>&#123;<br>     MyRealm myRealm = <span class="hljs-keyword">new</span> MyRealm();<br>     <span class="hljs-keyword">return</span> myRealm;<br> &#125;<br><span class="hljs-comment">// 相当于spring.xml中配置</span><br> <span class="hljs-comment">//    &lt;bean id=&quot;cacheManager&quot; class=&quot;org.apache.shiro.cache.MemoryConstrainedCacheManager&quot;&gt;&lt;/bean&gt;</span><br> <span class="hljs-meta">@Bean(name = &quot;cacheManager&quot;)</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MemoryConstrainedCacheManager();<br> &#125;<br> <span class="hljs-comment">// 相当于spring.xml中配置</span><br> <span class="hljs-comment">//    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;</span><br> <span class="hljs-comment">//        &lt;property name=&quot;realm&quot; ref=&quot;myRealm&quot;&gt;&lt;/property&gt;</span><br> <span class="hljs-comment">//        &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot;&gt;&lt;/property&gt;</span><br> <span class="hljs-comment">//    &lt;/bean&gt;</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-title">securityManager</span><span class="hljs-params">()</span></span>&#123;<br>     DefaultWebSecurityManager securityManager =  <span class="hljs-keyword">new</span> DefaultWebSecurityManager();<br>     securityManager.setRealm(myRealm());<br>     securityManager.setCacheManager(cacheManager());<br>     <span class="hljs-keyword">return</span> securityManager;<br> &#125;&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">3. 登录页面编写<br><br>   ```html<br>   <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;$&#123;#request.getContextPath()&#125;+&#x27;/&#x27;&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;user/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li><p>home页面的编写</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:shiro</span>=<span class="hljs-string">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>登录成功，当前登录用户为：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">shiro:principal</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>当前用户角色为：<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">shiro:hasRole</span>=<span class="hljs-string">&quot;总经理&quot;</span>&gt;</span>总经理, <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">shiro:hasRole</span>=<span class="hljs-string">&quot;财务主管&quot;</span>&gt;</span>财务主管, <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">shiro:hasRole</span>=<span class="hljs-string">&quot;人事主管&quot;</span>&gt;</span>人事主管, <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">shiro:hasRole</span>=<span class="hljs-string">&quot;员工&quot;</span>&gt;</span>员工, <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;请假审批&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;m/f&quot;</span>&gt;</span>请假审批<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;报销审批&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;m/f&quot;</span>&gt;</span>报销审批<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;加薪审批&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;m/f&quot;</span>&gt;</span>加薪审批<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;招聘&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;m/f&quot;</span>&gt;</span>招聘<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;打卡&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;m/f&quot;</span>&gt;</span>打卡<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;请假&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请假<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;调休&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>调休<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">shiro:hasPermission</span>=<span class="hljs-string">&quot;报销&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;m/d&quot;</span>&gt;</span>报销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/Servlet/"/>
    <url>/myblog/2021/10/24/Servlet/</url>
    
    <content type="html"><![CDATA[<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="一、软件架构"><a href="#一、软件架构" class="headerlink" title="一、软件架构"></a>一、软件架构</h4><blockquote><p>在软件发展过程中，电脑上使用的软件常见有两种架构：</p><p>CS架构和BS架构。</p></blockquote><h5 id="1-1-CS架构"><a href="#1-1-CS架构" class="headerlink" title="1.1 CS架构"></a>1.1 CS架构</h5><blockquote><p>CS架构全称Client/Server，即客户端/服务器架构。</p><p>特点：需要在电脑上安装客户端才能使用。例如：LOL、QQ等</p><p>优点：图形化效果比较好（3D效果），操作性比较强。</p><p>缺点：需要下载安装才能使用，而且服务器如果更新了内容，很多时候客户端也需要下载更新。升级维护比较麻烦。</p></blockquote><h5 id="1-2-BS架构"><a href="#1-2-BS架构" class="headerlink" title="1.2 BS架构"></a>1.2 BS架构</h5><blockquote><p>BS架构全称Browser/Server，即浏览器/服务器架构。</p><p>特点：直接使用电脑上浏览器访问。例如：网页版的QQ、微信，网页游戏，企业级网站等。</p><p>优点：无需下载客户端，服务器更新，客户端只需要刷新一下页面即可。</p><p>缺点：图形化效果不太好（3D效果）。</p></blockquote><blockquote><p>此时，可以发现，BS架构比较适合企业级应用，所以java开发的企业级应用主要使用BS架构。</p></blockquote><h4 id="二、服务器"><a href="#二、服务器" class="headerlink" title="二、服务器"></a>二、服务器</h4><h5 id="2-1-Java-web"><a href="#2-1-Java-web" class="headerlink" title="2.1 Java web"></a>2.1 Java web</h5><blockquote><p>提供外界（万维网）访问的资源分为两大类：</p><ul><li>静态资源：HTML、CSS、JS</li><li>动态资源：Servlet、JSP</li></ul><p>在Java中，开发动态资源的Java技术成为Java web。</p></blockquote><h5 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h5><blockquote><p>web服务器是用来运行和发布Java web应用的容器。</p><p>将web应用放入到web服务器中发布运行后，用户才能通过浏览器访问。</p><p>常见的服务器：</p><ul><li>开源（开发源代码、使用免费）<ul><li>tomcat</li><li>jetty</li><li>resin</li></ul></li><li>收费<ul><li>WebLogic（BEA公司，后oracle收购）</li><li>WebSphere（IBM）</li></ul></li></ul><p>开源的web服务器功能较为基础，适用于中小型项目，收费的服务器能获得对应的企业的技术支持，功能较为强大，当然体积较大。</p></blockquote><h4 id="三、Tomcat"><a href="#三、Tomcat" class="headerlink" title="三、Tomcat"></a>三、Tomcat</h4><h5 id="3-1-Tomcat软件安装"><a href="#3-1-Tomcat软件安装" class="headerlink" title="3.1 Tomcat软件安装"></a>3.1 Tomcat软件安装</h5><blockquote><p>Tomcat是Apache基金组织的一个核心项目。</p><p>安装使用下载解压即可使用。</p></blockquote><h5 id="3-2-目录结构"><a href="#3-2-目录结构" class="headerlink" title="3.2 目录结构"></a>3.2 目录结构</h5><blockquote><p>bin：可执行文件</p><p>conf：tomcat的配置文件</p><p>lib：tomcat运行需要的第三方jar包</p><p>logs：日志文件，查看tomcat运行，报错等信息</p><p>temp：临时文件</p><p>webapps：web applications的缩写。web应用放置的位置。如果开发了一个web项目，应该打包后放到此文件夹下，启动tomcat后就会运行。</p><ul><li>项目ROOT，表示tomcat启动时默认打开的项目，如果把里面的内容替换成自己写的项目，tomcat启动后默认打开自己写的项目。</li></ul><p>work：项目中如果有jsp文件，会转译成servlet源代码，并编译成字节码放入此文件夹。</p></blockquote><h5 id="3-3-基本使用"><a href="#3-3-基本使用" class="headerlink" title="3.3 基本使用"></a>3.3 基本使用</h5><blockquote><ul><li>启动：进入bin目录，双击startup.bat启动tomcat。</li><li>访问：打开浏览器，输入：<a href="http://localhost:8080/">http://localhost:8080</a><ul><li><a href>注意：</a>默认访问的是ROOT工程，如果在url的后面加上/工程名就可以访问webapps文件夹中的其他项目，例如：<a href="http://localhost:8080/docs">http://localhost:8080/docs</a></li></ul></li><li>停止：进入bin目录，双击shutdown.bat停止tomcat。也可以直接关闭进程。</li><li>控制台启动（在开发时推荐使用），进入bin目录，然后在文件夹的地址栏输入cmd，然后回车，打开当前目录的黑窗口，输入catalina.bat  run，然后回车，会在窗口中启动tomcat。此方式如果需要停止tomcat，只需要关闭窗口即可。</li></ul></blockquote><h5 id="3-4-简单配置"><a href="#3-4-简单配置" class="headerlink" title="3.4 简单配置"></a>3.4 简单配置</h5><blockquote><p>修改访问的端口号，可以打开conf文件夹，修改server.xml文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>修改上面的port为8888后，启动tomcat，可以通过<a href="http://localhost:8888路径访问。">http://localhost:8888路径访问。</a></p></blockquote><blockquote><p><a href>注意：</a> </p><ul><li> 修改端口号时一定不能与其他端口号冲突，否则启动时会报错。</li><li>当启动tomcat后，再次启动前一定要先关闭前面的tomcat，再重新启动，否则会出现端口号冲突。JVM_bind：8080，如果无法直接停止，可以在进程中关闭所有名为java的进程。</li></ul><p><a href>小技巧：</a>80端口为浏览器默认端口，当把tomcat的端口号改为80时，启动tomcat后，只需要访问<a href="http://localhost即可.不需要写端口号./">http://localhost即可。不需要写端口号。</a></p></blockquote><h5 id="3-5-项目的部署和访问"><a href="#3-5-项目的部署和访问" class="headerlink" title="3.5 项目的部署和访问"></a>3.5 项目的部署和访问</h5><blockquote><p>将项目放到webapps文件夹下，就可以部署，然后通过项目的（文件夹）名称访问。</p></blockquote><blockquote><p>部署项目的结构：</p><p>项目名称文件夹</p><ul><li>WEB-INF<ul><li>classes：放入所有的字节码文件</li><li>lib：放入jar包</li><li>web.xml：项目的一些配置</li></ul></li><li>img</li><li>css</li><li>js</li><li>页面文件</li></ul></blockquote><blockquote><p>启动tomcat后，可以通过此url访问页面：</p><p><a href="http://localhost:8080/day34/a.html">http://localhost:8080/day34/a.html</a></p></blockquote><blockquote><p>常见错误：</p><p>404 NOT FOUND：url路径错误，导致找不到相应的页面。</p></blockquote><h4 id="四、Servlet基本使用"><a href="#四、Servlet基本使用" class="headerlink" title="四、Servlet基本使用"></a>四、Servlet基本使用</h4><h5 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h5><blockquote><p>Servlet是Server Applet的简称，实际是就是一段服务器端的程序。</p><p>特点：</p><ul><li>可以接收用户发送的请求。</li><li>可以将响应的内容发送给用户。</li><li>是一种动态的网页技术。</li><li>是Java web程序开发的基础，由一个规范的接口和一些类组成。</li></ul></blockquote><h5 id="4-2-开发步骤"><a href="#4-2-开发步骤" class="headerlink" title="4.2 开发步骤"></a>4.2 开发步骤</h5><blockquote><p>1、导入依赖javax.servlet-api.jar</p><p><a href>注意：</a>如果idea直接创建Web Application不需要导入，只要在创建时指定tomcat路径即可。</p><p>2、编写Servlet，实现Servlet接口中的方法。</p><p>3、编写web.xml配置文件中的配置</p><p>4、将项目部署到tomcat中，并启动tomcat</p></blockquote><blockquote><p>编写servlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> PrintWriter out = servletResponse.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;h1&gt;Hello, world&lt;/h1&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>配置web.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    配置servlet类对应的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.qf.day37.servlet.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--    配置该名称对应的访问路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/my.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="五、HTTP协议"><a href="#五、HTTP协议" class="headerlink" title="五、HTTP协议"></a>五、HTTP协议</h4><h5 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h5><blockquote><p>超文本传输协议，</p><p>特点：</p><ul><li>支持BS架构</li><li>无连接</li><li>无状态</li></ul></blockquote><h5 id="5-2-HTTP1-0和1-1区别"><a href="#5-2-HTTP1-0和1-1区别" class="headerlink" title="5.2 HTTP1.0和1.1区别"></a>5.2 HTTP1.0和1.1区别</h5><blockquote><p>1.0：短连接，一个连接发送一次请求和响应，每次都建立新的连接</p><p>1.1：基于TCP连接，长连接，可以多次发送请求和响应，也有更复杂的请求头和响应头。</p><p>目前HTTP协议一般都使用1.1</p></blockquote><h5 id="5-3-请求报文"><a href="#5-3-请求报文" class="headerlink" title="5.3 请求报文"></a>5.3 请求报文</h5><blockquote><p>请求头：</p><ul><li>请求方法（GET、POST）</li><li>请求url</li><li>HTTP协议版本</li><li>请求资源类型</li><li>用户的请求信息等</li></ul><p>请求正文：</p><ul><li>表单数据（POST请求时）</li></ul><p><a href>注意：</a>当请求方法为GET时，请求的表单数据在url中，如果请求的方法为POST时，请求的表单数据在请求正文中。</p></blockquote><h5 id="5-4-响应报文"><a href="#5-4-响应报文" class="headerlink" title="5.4 响应报文"></a>5.4 响应报文</h5><blockquote><p>响应头：</p><ul><li>状态行：协议版本，以及状态码：404、200等</li><li>服务器时间</li><li>服务器响应的类型（html），字符集，content-Type</li><li>响应的内容长度</li></ul><p>响应正文：</p><ul><li>具体内容</li></ul></blockquote><h5 id="5-5-常用状态码"><a href="#5-5-常用状态码" class="headerlink" title="5.5 常用状态码"></a>5.5 常用状态码</h5><blockquote><p>100（Continue）：继续</p><p>200（Ok）：成功</p><p>302（Found）：临时重定向</p><p>400：请求参数类型不正确</p><p>403（forbidden）：服务器拒绝</p><p>404（Not Found）：资源没有找到</p><p>405：请求的方法（GET和POST）服务器不支持</p><p>500：服务器出错</p></blockquote><h4 id="六、Servlet详细"><a href="#六、Servlet详细" class="headerlink" title="六、Servlet详细"></a>六、Servlet详细</h4><h5 id="6-1-Servlet实现方式"><a href="#6-1-Servlet实现方式" class="headerlink" title="6.1 Servlet实现方式"></a>6.1 Servlet实现方式</h5><blockquote><p>Servlet常见有三种实现方式：</p><ul><li>实现Servlet接口</li><li>继承GenericServlet抽象类</li><li>继承HttpServlet抽象类</li></ul></blockquote><h5 id="6-2-实现Servlet接口"><a href="#6-2-实现Servlet接口" class="headerlink" title="6.2 实现Servlet接口"></a>6.2 实现Servlet接口</h5><blockquote><p>实现Servlet接口作为一种最基础的实现Servlet方式，需要实现接口中所有的方法。相对比较麻烦，一般不会使用。</p><p>关键方法：</p><ul><li>init：初始化，创建servlet对象后，然后进行初始化工作可以放到此方法中实现。</li><li>service：服务，进行接收用户请求，和返回响应</li><li>destory：销毁，在web服务器（web容器，此处就是指tomcat）准备停止时，会执行销毁中的方法，也就意味着该方法是对象销毁之前做一些回收资源或者关闭资源处理。一般情况在destroy中都不会写代码。</li></ul><p><a href>注意：</a> </p><ul><li>destroy方法，字面意思是销毁，但是并不是调用后去销毁servlet对象，而是在servlet将要被销毁之前执行关闭资源的操作。</li><li>并非关闭tomcat，就会执行destroy方法。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> PrintWriter out = servletResponse.getWriter();<br><span class="hljs-comment">//        int i = 5 / 0;</span><br>        out.print(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;h1&gt;Hello, world&lt;/h1&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="6-3-继承GenericServlet"><a href="#6-3-继承GenericServlet" class="headerlink" title="6.3 继承GenericServlet"></a>6.3 继承GenericServlet</h5><blockquote><p>GenericServlet是一个抽象类，实现了Servlet接口，并且将Servlet接口中的方法进行了空实现，只有一个service方法使用abstract关键字。</p><p>如果通过继承GenericServlet抽象类来实现Servlet，那么只需要重写service方法即可，相对于实现Servlet接口来说，容易很多。</p><p>但是，service方法中应该实现的内容还是比较多，继承GenericServlet还是不太方便，一般也不会使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> PrintWriter out = servletResponse.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;h1&gt;Hello, world&lt;/h1&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="6-4-继承HttpServlet"><a href="#6-4-继承HttpServlet" class="headerlink" title="6.4 继承HttpServlet"></a>6.4 继承HttpServlet</h5><blockquote><p>HttpServlet也是一个抽象类，从字面上看，有Http开头，意味着遵循了Http协议。</p><p>HttpServlet继承自GenericServlet，重写了service方法。</p><ul><li>将请求和响应转换为HTTP的请求和响应。</li><li>将请求根据METHOD的类型进行分别处理，如果是GET就调用doGet，如果是post就调用doPost。</li><li>在HttpServlet中的doGet、doPost、doPut、doDelete这些方法都是一些报错的方法，直接调用时会报错。意味着在子类中必须要重写该方法。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 处理get请求</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;h1&gt;Hello, GET&lt;/h1&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 处理post请求</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;h1&gt;Hello, POST&lt;/h1&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>在项目中，如果要使用servlet，推荐直接继承HttpServlet。</p><p>然后在该类中根据要求重写doGet和doPost方法。</p></blockquote><blockquote><p><a href>经典面试题：</a></p><p>Servlet接口与GenericServlet类以及HttpServlet类有什么关系，以及这些类中具体做了什么？</p></blockquote><blockquote><p><a href>经典面试题：</a></p><p>如果一个类继承自HttpServlet，在其中重写了doGet和doPost方法，而且还重写了一个service方法，请问，当用户在浏览器发送一个get请求时，会执行doGet方法中的内容么？</p><p>答：会执行service方法中的内容。</p></blockquote><h5 id="6-5-Servlet配置方式"><a href="#6-5-Servlet配置方式" class="headerlink" title="6.5 Servlet配置方式"></a>6.5 Servlet配置方式</h5><blockquote><p>Servlet有两种配置方式：</p><ul><li>在servlet3.0之前，只能使用web.xml配置</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置servlet类对应的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.qf.day37.servlet.MyServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    配置该名称对应的访问路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/my2.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>url-pattern可以根据需求来写，可以写为/my2.do，也可写为/my2.php，也可写为/my2，也可以写为/my2.html</p><p><code>切记，配置路径中一定不能少了路径前面的/</code>，否则直接启动就报错。</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">Caused <span class="hljs-built_in">by</span>: java.lang.IllegalArgumentException: Invalid &lt;url-<span class="hljs-built_in">pattern</span>&gt; my2.<span class="hljs-built_in">do</span> <span class="hljs-built_in">in</span> servlet mapping<br></code></pre></div></td></tr></table></figure><blockquote><ul><li>第二种方式，在servlet3.0之后，可以使用@WebServlet注解配置，也可以使用web.xml。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my1.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GenericServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> PrintWriter out = servletResponse.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;h1&gt;Hello, world&lt;/h1&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a></p><ul><li>不能同时在web.xml和类中使用注解配置。</li><li><code>切记，两个servlet不能配置相同的路径</code>，否则会报错。</li></ul></blockquote><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">Caused by: java.lang.IllegalArgumentException: The servlets named <span class="hljs-comment">[com.qf.day37.servlet.MyServlet1]</span> and <span class="hljs-comment">[com.qf.day37.servlet.MyServlet3]</span> <span class="hljs-keyword">are</span> both mapped to the url-pattern <span class="hljs-comment">[/my1.do]</span> which <span class="hljs-keyword">is</span> not permitted<br></code></pre></div></td></tr></table></figure><h5 id="6-6-servlet单实例多线程"><a href="#6-6-servlet单实例多线程" class="headerlink" title="6.6 servlet单实例多线程"></a>6.6 servlet单实例多线程</h5><blockquote><p>servlet是单实例的，只会创建一个对象。</p><p>默认在第一次访问该servlet时，会创建并初始化对象。提供多个客户端同时发送请求访问。</p><p>所以servlet是单实例，多线程的。</p><p><a href>经典面试题：</a>为什么说servlet是单实例，多线程的？</p></blockquote><h5 id="6-7-load-on-startup"><a href="#6-7-load-on-startup" class="headerlink" title="6.7 load-on-startup"></a>6.7 load-on-startup</h5><blockquote><p>load-on-startup表示是否在启动时就创建并初始化对象。</p><p>当值为0或者正数时，启动时就创建，数字越小，越先创建。当值为负数时则默认第一次访问时才创建。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置servlet类对应的名称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.qf.day37.servlet.MyServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--    配置该名称对应的访问路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet2<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/my2.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>在注解中配置：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name =&quot;MyServlet1&quot;, urlPatterns = &quot;/my1.do&quot;, loadOnStartup = 1)</span><br></code></pre></div></td></tr></table></figure><h4 id="七、请求方式"><a href="#七、请求方式" class="headerlink" title="七、请求方式"></a>七、请求方式</h4><blockquote><p>GET：</p><ul><li>将所有的请求参数放到url中，放到url的?后面，多个采用&amp;连接，以名=值的方式。</li><li>明文不安全</li><li>长度有限制</li><li>表单默认使用GET</li><li>效率高，且适用于搜索、转发、收藏等</li></ul><p>POST：</p><ul><li>将所有的请求参数放到请求正文</li><li>相对安全</li><li>理论来说，长度没有限制</li><li>文件上传以及json格式提交数据只能使用post</li></ul></blockquote><blockquote><p><a href>使用心得：</a>表单提交能用post的尽量使用post，否则使用get，一般的链接用get</p></blockquote><h4 id="八、request对象"><a href="#八、request对象" class="headerlink" title="八、request对象"></a>八、request对象</h4><blockquote><p>用来处理客户端的请求。</p><p>常用方法：</p><p>getParameter(key); 根据key获得用户请求参数。</p><p>getParameterValues(key);根据key获得用户请求一组参数。</p><p>setCharacterEncoding(“”); 设置用户请求的字符编码格式。</p></blockquote><blockquote><p>简单的登录案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 设置响应的内容类型和字符集</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">// 得到输出对象</span><br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        <span class="hljs-comment">// post表单提交处理乱码</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>); <span class="hljs-comment">// 设置字符编码为utf-8</span><br>        <span class="hljs-comment">// 接收用户参数</span><br>        <span class="hljs-comment">// username与前面表单中的name属性对应</span><br>        <span class="hljs-keyword">final</span> String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">final</span> String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;张三&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            out.print(<span class="hljs-string">&quot;&lt;h1&gt;success，登录成功&lt;/h1&gt;&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            out.print(<span class="hljs-string">&quot;&lt;h1&gt;fail，登录失败&lt;/h1&gt;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login.do&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>请求乱码的处理：</p><p>POST的处理方式：</p><p>req.setCharacterEncoding(“utf-8”); </p><p>GET方式可能由于tomcat之类的服务器中已经设置了编码，导致不会出现乱码，但是开发时并不知道会将代码部署运行到什么服务器上，是否出现GET乱码，如果出现，可以使用以下方式处理。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 每一个参数需要单独处理</span><br>String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>username = <span class="hljs-keyword">new</span> String(username.getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></div></td></tr></table></figure></blockquote><blockquote><p>注册案例的实现：</p><ul><li>用户注册提交表单</li><li>接收到用户提交的信息后，将其保存到数据库</li><li>使用js来验证表单</li></ul></blockquote><h4 id="九、response对象"><a href="#九、response对象" class="headerlink" title="九、response对象"></a>九、response对象</h4><blockquote><p>响应客户发出的请求。有两种方式：</p><ul><li>对客户端直接输出内容<ul><li>setHeader(name, value) 设置响应头</li><li>setContentType(“”) 设置响应的内容类型，字符集</li><li>setCharacterEncoding(“”) 仅设置响应的字符集，很少使用</li><li>getWriter(); 得到响应输出对象</li></ul></li><li>跳转页面显示给客户端<ul><li>请求转发</li><li>重定向</li></ul></li></ul></blockquote><h5 id="9-1-直接响应输出"><a href="#9-1-直接响应输出" class="headerlink" title="9.1 直接响应输出"></a>9.1 直接响应输出</h5><blockquote><p>通常是使用响应输出对象对客户端直接输出内容。一张图片、一个网页、一些文字信息等。</p><p><a href>注意：</a>实际上通过响应输出的方式可以实现所有的客户请求对应的响应。但是如果使用响应输出的方式输出页面，非常麻烦，不容易编辑，易错，一般在项目不会去输出一个完整的网页，而会采用跳转页面的方式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 后面学习文件上传下载时需要使用</span><br>        <span class="hljs-comment">//        response.setHeader(&quot;Content-type&quot;, &quot;text/html;charset=utf-8&quot;);</span><br>        <span class="hljs-comment">// 可以设置字符集</span><br><span class="hljs-comment">//        response.setCharacterEncoding(&quot;gbk&quot;);</span><br>        <span class="hljs-comment">// 设置内容类型和内容的字符集</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        out.print(<span class="hljs-string">&quot;Hello, 张三&quot;</span>);<br>        out.print(<span class="hljs-string">&quot;&lt;script&gt;alert(111);&lt;/script&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="9-2-重定向和请求转发"><a href="#9-2-重定向和请求转发" class="headerlink" title="9.2 重定向和请求转发"></a>9.2 重定向和请求转发</h5><blockquote><p>如果使用响应输出的方式输出页面，非常麻烦，不容易编辑，易错，一般在项目不会去输出一个完整的网页，而会采用跳转页面的方式。</p></blockquote><blockquote><p>使用响应输出页面的代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">final</span> String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;zhangsan&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            out.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;head&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;title&gt;&lt;/title&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;link rel=\&quot;stylesheet\&quot; href=\&quot;css/common.css\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;/head&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;body&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;div id=\&quot;contentDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;div id=\&quot;firstDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div id=\&quot;loginDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;亲，请登录&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;免费注册&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;手机逛淘宝&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div id=\&quot;infoDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;淘宝网首页&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;我的淘宝&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;购物车&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;收藏夹&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;商品分类&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;卖家中心&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;联系客服&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;网站导航&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;div id=\&quot;secondDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div id=\&quot;logoDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;img src=\&quot;img/taobao-logo.png\&quot; width=\&quot;180px\&quot;/&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div id=\&quot;searchDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div id=\&quot;searchTxtDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;input type=\&quot;text\&quot; /&gt;&lt;input type=\&quot;button\&quot; value=\&quot;搜索\&quot;/&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div id=\&quot;searchLinkDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;客厅灯&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;冲锋衣&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;床垫&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;客厅灯&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;冲锋衣&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;鞋柜&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;窗帘&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;椅子&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;客厅灯&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;冲锋衣&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;鞋柜&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                    &lt;li&gt;窗帘&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;/ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;div id=\&quot;thirdDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;您是不是想要找：&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;客厅灯&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;冲锋衣&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;床垫&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;客厅灯&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;冲锋衣&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;鞋柜&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;窗帘&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;椅子&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;客厅灯&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;冲锋衣&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;鞋柜&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;li&gt;窗帘&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;div id=\&quot;fourthDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div id=\&quot;priceDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            价格：&lt;input type=\&quot;text\&quot; /&gt;——&lt;input type=\&quot;text\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div id=\&quot;selectDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;&lt;input type=\&quot;checkbox\&quot;&gt;包邮&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;&lt;input type=\&quot;checkbox\&quot;&gt;正品保障&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;&lt;input type=\&quot;checkbox\&quot;&gt;7天退换&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;li&gt;&lt;input type=\&quot;checkbox\&quot;&gt;消费者保障&lt;/li&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/ul&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;div id=\&quot;bookDiv\&quot;&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/002.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/003.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/004.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/005.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/006.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/007.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/008.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/009.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/010.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;                &lt;img src=\&quot;img/011.png\&quot; /&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class1\&quot;&gt;&amp;yen;40.0 包邮&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class2\&quot;&gt;世界上最好的商品&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class3\&quot;&gt;千锋教育专营店&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;            &lt;div class=\&quot;class4\&quot;&gt;如实描述4.8&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;        &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;    &lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;/div&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;/body&gt;\r\n&quot;</span>);<br>            out.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            out.print(<span class="hljs-string">&quot;&lt;h1&gt;登录失败！&lt;/h1&gt;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>上面的代码写起非常麻烦，而且出错了，还不容易改动，也不好调试，所以应该直接使用页面跳转的方式。</p><p><a href>注意：</a>如果在运行时添加了新的页面或者样式，但是没有显示，可能是没有编译，此时打开out文件夹看看里面是否有响应的文件，在停止tomcat后，直接删除out文件夹，重新运行，强迫idea重新编译一次，一般就可以解决此问题。</p></blockquote><h6 id="9-2-1-重定向"><a href="#9-2-1-重定向" class="headerlink" title="9.2.1 重定向"></a>9.2.1 重定向</h6><blockquote><p>一种直接跳转页面的方式，相当于html页面上<code>&lt;a&gt;</code>标签。</p><p>response.sendRedirect(“home.html”);</p></blockquote><blockquote><p><a href>小技巧：</a></p><p>在使用idea时，修改代码，一般都需要重启tomcat，但是如果在tomcat的设置页面VM options下面的两个下拉框都设置为update classes and resources，那么在仅修改页面的情况下，不用重启tomcat，只需要刷新一下页面即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login1.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">final</span> String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;zhangsan&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            <span class="hljs-comment">// 重定向</span><br>            response.sendRedirect(<span class="hljs-string">&quot;home.html&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;fail.html&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>重定向后</p><ul><li>页面url会发生变化，属于多次请求。</li><li>请求作用域范围内的数据（包含任意类型）会丢失，不能传递。</li><li>如果一定要传递数据，可以使用get请求方式（url?key=value）只能传简单参数。</li><li>可以重定向到其他服务器，例如：可以重定向到百度。</li></ul></blockquote><h6 id="9-2-2-请求转发"><a href="#9-2-2-请求转发" class="headerlink" title="9.2.2 请求转发"></a>9.2.2 请求转发</h6><blockquote><p>会转发请求中的数据。</p><p>request.getRequestDispatcher(“home.do”).forward(request, response);</p></blockquote><blockquote><p>请求转发：</p><ul><li>在服务内部跳转，页面url不发生变化，属于一次请求。</li><li>可以共享request作用域范围内的数据。</li><li>只能转发给当前服务器的组件（页面），不能转发给其他服务器。</li></ul></blockquote><blockquote><p>request作用域（请求作用域）：</p><p>是在在一个请求中，数据的使用范围。有一个存储数据的空间，使用类似map结构（key-value）。</p><p>存储数据：request.setAttribute(“key”,”value”);</p><p>获取数据：request.getAttribute(“key”);</p><p>删除数据：request.removeAttribute(“key”);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login2.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">final</span> String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;zhangsan&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            <span class="hljs-comment">// 在请求作用域范文保存了一个数据(map结构的方式)</span><br>            request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>); <span class="hljs-comment">// 采用键值对</span><br>            <span class="hljs-comment">// 请求转发跳到另一个servlet</span><br>            request.getRequestDispatcher(<span class="hljs-string">&quot;home.do&quot;</span>).forward(request, response);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;fail.html&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="十、综合案例"><a href="#十、综合案例" class="headerlink" title="十、综合案例"></a>十、综合案例</h4><h4 id="十一、Servlet生命周期"><a href="#十一、Servlet生命周期" class="headerlink" title="十一、Servlet生命周期"></a>十一、Servlet生命周期</h4><blockquote><p>Servlet从创建到销毁的过程，经历以下四个阶段：</p><ul><li>实例化，创建Servlet对象。只会执行一次</li><li>初始化，对应init方法，初始化数据。只会执行一次</li><li>服务，对应service方法，提供用户业务服务，作用是接收用户请求并返回响应。一直提供服务，执行多次</li><li>销毁，对应destory方法，当Servlet准备销毁之前调用的方法。。只会执行一次</li></ul></blockquote><h4 id="十二、Servlet的特性"><a href="#十二、Servlet的特性" class="headerlink" title="十二、Servlet的特性"></a>十二、Servlet的特性</h4><blockquote><p>Servlet是单实例多线程的，意味着Servlet可能出现线程安全问题。</p><p>如果在Servlet中定义一个属性，意味着该属性是一个全局变量。因为只有一个Servlet对象。</p><p>如果在Service方法中，提供修改该属性的操作，那么在多线程修改时，会出现线程安全问题。</p><p>解决方案：</p><ul><li>加锁。性能下降，不推荐使用。</li><li>实现SingleThreadModel接口，性能下降，不推荐使用。</li><li>不要使用属性，尽量使用临时变量，就不会出现安全问题。</li></ul></blockquote><h4 id="十三、状态管理"><a href="#十三、状态管理" class="headerlink" title="十三、状态管理"></a>十三、状态管理</h4><h5 id="13-1-概念"><a href="#13-1-概念" class="headerlink" title="13.1 概念"></a>13.1 概念</h5><blockquote><p>HTTP协议是无状态的，无状态是指，服务器不会记录客户的请求信息，意味着服务器不知道到底是一个用户发送了多个请求，还是多个用户发送的请求。</p></blockquote><blockquote><p>如果要将状态信息保存，有两种方式实现：</p><ul><li>cookie，将信息保存在客户端</li><li>session，将信息保存在服务器</li></ul></blockquote><h5 id="13-2-cookie的用法"><a href="#13-2-cookie的用法" class="headerlink" title="13.2 cookie的用法"></a>13.2 cookie的用法</h5><blockquote><p>将信息保存在客户端，以一个记事本文件的形式保存在客户端，保存方式是键值对。</p></blockquote><h6 id="13-2-1-添加cookie："><a href="#13-2-1-添加cookie：" class="headerlink" title="13.2.1 添加cookie："></a>13.2.1 添加cookie：</h6><blockquote><p>setMaxAge表示设置cookie的过期时间。单位为秒。</p><ul><li>如果设置为正数，即多少秒后自动删除</li><li>如果设置为0，表示立即失效，删除</li><li>如果设置为负数（-1），表示内存存储，关闭浏览器则失效</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 创建cookie，键值只能是字符串类型</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-comment">// 设置路径</span><br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">// 设置生命周期，单位秒</span><br>        cookie.setMaxAge(<span class="hljs-number">60</span>);<br>        <span class="hljs-comment">// 响应到客户端，保存</span><br>        resp.addCookie(cookie);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="13-2-2-删除cookie"><a href="#13-2-2-删除cookie" class="headerlink" title="13.2.2 删除cookie"></a>13.2.2 删除cookie</h6><blockquote><p>如果要删除一个cookie，做法是直接重新设置一下同一个路径，同一个key，将maxAge设置为0即可。</p></blockquote><h6 id="13-2-3-获取cookie"><a href="#13-2-3-获取cookie" class="headerlink" title="13.2.3 获取cookie"></a>13.2.3 获取cookie</h6><blockquote><p>通过request对象获取，会获取当前request对象中的所有cookie。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/get.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetCookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> Cookie[] cookies = req.getCookies();<br>        <span class="hljs-comment">// 如果没有任何cookie，会出现空指针异常</span><br>        <span class="hljs-comment">//System.out.println(cookies.length);</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            System.out.println(cookie.getName() + <span class="hljs-string">&quot;===&quot;</span> + cookie.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="13-2-4-修改cookie"><a href="#13-2-4-修改cookie" class="headerlink" title="13.2.4 修改cookie"></a>13.2.4 修改cookie</h6><blockquote><p>修改cookie就是重新创建一个与前面一样的cookie，键和路径要一样，值不一样，就是修改。</p></blockquote><h6 id="13-2-5-cookie中文处理"><a href="#13-2-5-cookie中文处理" class="headerlink" title="13.2.5 cookie中文处理"></a>13.2.5 cookie中文处理</h6><blockquote><p>如果直接在cookie中使用中文，会出现报错。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java.lang.IllegalArgumentException: </span>Control character in cookie value <span class="hljs-keyword">or </span>attribute.<br></code></pre></div></td></tr></table></figure></blockquote><blockquote><p>在添加时使用中文：</p><p>使用encode方法编码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 将中文进行编码</span><br>String s = URLEncoder.encode(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>在获取时，使用decode方法解码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 解码</span><br>String s1 = URLDecoder.decode(s, <span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><h6 id="13-2-6-优缺点"><a href="#13-2-6-优缺点" class="headerlink" title="13.2.6 优缺点"></a>13.2.6 优缺点</h6><blockquote><p>优点：简单，易用，持久性</p><p>缺点：</p><ul><li>大小受限制，一般不能超过4k、8k（不同浏览器）</li><li>不安全，因为保存在客户端，而且是以文本文件的方式明码保存</li><li>可能会被用户禁用</li></ul></blockquote><h6 id="13-2-7-cookie案例"><a href="#13-2-7-cookie案例" class="headerlink" title="13.2.7 cookie案例"></a>13.2.7 cookie案例</h6><blockquote><p>使用cookie实现保存登录状态15天效果。</p></blockquote><p><code>login.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login.do&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        保存登录状态15天：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginStatus&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>home.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;logout.do&quot;</span>&gt;</span>取消登录状态<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页，首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/index.html&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 判断是否曾经保存了登录状态，并且没有过期</span><br>        <span class="hljs-comment">// 在cookie中查找</span><br>        <span class="hljs-keyword">final</span> Cookie[] cookies = request.getCookies();<br>        <span class="hljs-keyword">boolean</span> isLogin = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span> &amp;&amp; cookies.length &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;username&quot;</span>))&#123;<br>                    isLogin = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 那么就跳转到首页</span><br>        <span class="hljs-keyword">if</span> (isLogin)&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;home.html&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则就跳转到登录界面</span><br>            response.sendRedirect(<span class="hljs-string">&quot;login.html&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 登录，并且判断用户是否要保存登录状态</span><br>        <span class="hljs-keyword">final</span> String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">final</span> String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">final</span> String loginStatus = request.getParameter(<span class="hljs-string">&quot;loginStatus&quot;</span>);<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;zhangsan&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            <span class="hljs-comment">// 如果要保存，则将信息保存到cookie中</span><br>            <span class="hljs-keyword">if</span> (loginStatus != <span class="hljs-keyword">null</span> &amp;&amp; loginStatus.equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>                <span class="hljs-comment">// 创建cookie</span><br>                Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>                <span class="hljs-comment">// 设置path</span><br>                cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>                <span class="hljs-comment">// 设置age</span><br>                cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">15</span>);<br>                <span class="hljs-comment">// 添加cookie</span><br>                response.addCookie(cookie);<br>            &#125;<br>            <span class="hljs-comment">// 否则直接跳转到首页</span><br>            response.sendRedirect(<span class="hljs-string">&quot;home.html&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>            response.sendRedirect(<span class="hljs-string">&quot;login.html&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/logout.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogoutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 将cookie中保存的登录状态删除</span><br>        <span class="hljs-comment">// 创建cookie</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 设置path</span><br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">// 设置age</span><br>        cookie.setMaxAge(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 添加cookie</span><br>        response.addCookie(cookie);<br>        <span class="hljs-comment">// 退出登录</span><br>        response.sendRedirect(<span class="hljs-string">&quot;login.html&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="13-3-session的用法"><a href="#13-3-session的用法" class="headerlink" title="13.3 session的用法"></a>13.3 session的用法</h5><h6 id="13-3-1-session的原理"><a href="#13-3-1-session的原理" class="headerlink" title="13.3.1 session的原理"></a>13.3.1 session的原理</h6><blockquote><p>当一次访问时，会检查是否有sessionid，如果没有，则创建一个新的session，将sessionid发送到客户端，客户将sessionid保存到cookie中，如果要存储信息，服务器会将sessionid进行关联，然后以键值对的形式保存信息。</p><p>第二次访问时，会携带sessionid（在cookie中获取），服务器检查是否有sessionid，发现存在sessionid，然后就会在服务器找到该sessionid对应的键值对的信息，进行关联。</p><p><a href>注意：</a></p><ul><li>由于服务器记录用户信息，那么意味着服务器上保存的信息会越来越多，占用空间会越来越大。所以session有一个过期机制，默认为30分钟，即用户登录后30分钟没有任何操作，会失去登录状态。</li><li>服务器端保存数据，可以支持任意类型，而且理论来说没有大小限制。</li></ul></blockquote><h6 id="13-3-2-session的创建和获取"><a href="#13-3-2-session的创建和获取" class="headerlink" title="13.3.2 session的创建和获取"></a>13.3.2 session的创建和获取</h6><blockquote><p>获取session，如果存在，就直接返回，如果不存在，就创建一个新的并返回。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 不是直接new，而是通过request对象获取</span><br>HttpSession session = request.getSession();<br></code></pre></div></td></tr></table></figure><blockquote><p>如果要获取已经存在的session，没有就返回null。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">HttpSession session = request.getSession(<span class="hljs-keyword">false</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>上面的代码，如果使用true，则与上面没有参数的用法一致。</p></blockquote><h6 id="13-3-3-session的作用域"><a href="#13-3-3-session的作用域" class="headerlink" title="13.3.3 session的作用域"></a>13.3.3 session的作用域</h6><blockquote><p>session作用域（会话作用域）：</p><p>是在在一个会话中，数据的使用范围，当没有关闭浏览器，或者注销，那么session作用域可以在所有的页面或请求有效。</p><p>有一个存储数据的空间，使用类似map结构（key-value）。</p><p>注意，key和值的类型。key只能是字符串，value可以是任意类型。</p><p>存储数据：session.setAttribute(“key”,”value”);</p><p>获取数据：session.getAttribute(“key”);</p><p>删除数据：session.removeAttribute(“key”);</p></blockquote><blockquote><p>session与request的区别：</p><p>request是一次请求有效。一次请求以及其响应，但是如果有转发，那么转发后仍旧有效。</p><p>session是一次会话有效。没有关闭浏览器或者注销就一直有效。</p></blockquote><h6 id="13-3-4-session的生命周期"><a href="#13-3-4-session的生命周期" class="headerlink" title="13.3.4 session的生命周期"></a>13.3.4 session的生命周期</h6><blockquote><p>开始：第一次使用session时，会通过request对象创建。</p><p>结束：</p><ul><li>浏览器关闭，session失效。<ul><li>浏览器关闭，则保存在cookie中的sessionid消失。所以与服务器的session无法再次关联，当到了超时时间后，session则失效。</li></ul></li><li>会话超时，session失效。<ul><li>默认为30分钟，可以通过session.setMaxInactiveInterval(second);</li></ul></li><li>手动注销，session失效。<ul><li>session.invalidate();注销</li></ul></li></ul></blockquote><h6 id="13-3-5-session的案例"><a href="#13-3-5-session的案例" class="headerlink" title="13.3.5 session的案例"></a>13.3.5 session的案例</h6><blockquote><p>一般用来存储用户个人信息等一些需要在多个页面访问的数据。</p></blockquote><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login.do&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-keyword">final</span> String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">// 登录成功后，返回首页</span><br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;zhangsan&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            <span class="hljs-comment">// 将用户信息保存到session中</span><br>            request.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>            <span class="hljs-comment">// 由于用户信息以及保存在session中，所以可以直接用重定向跳转</span><br>            response.sendRedirect(<span class="hljs-string">&quot;home.html&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 登录失败跳转登录重新登录</span><br>            response.sendRedirect(<span class="hljs-string">&quot;index.html&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/logout.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogoutServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 注销</span><br>        req.getSession().invalidate();<br>        resp.sendRedirect(<span class="hljs-string">&quot;index.html&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/home.html&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 身份验证，是否登录用户</span><br>        <span class="hljs-comment">// 判断session中是否存在user信息</span><br>        <span class="hljs-comment">// 如果不存在，则认为没有登录，跳转到登录界面</span><br>        <span class="hljs-keyword">if</span>(request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>) == <span class="hljs-keyword">null</span>)&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;index.html&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 展示首页，展示登录用户，展示跳转到其他页面的链接，展示一个注销链接</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;title&gt;首页&lt;/title&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;h1&gt;欢迎你，&quot;</span>+request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>)+<span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;a href=\&quot;userList.html\&quot;&gt;用户列表&lt;/a&gt;&lt;br/&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;a href=\&quot;productList.html\&quot;&gt;产品列表&lt;/a&gt;&lt;br/&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;a href=\&quot;logout.do\&quot;&gt;注销&lt;/a&gt;&lt;br/&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/userList.html&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserListPageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 身份验证，是否登录用户</span><br>        <span class="hljs-comment">// 判断session中是否存在user信息</span><br>        <span class="hljs-comment">// 如果不存在，则认为没有登录，跳转到登录界面</span><br>        <span class="hljs-keyword">if</span>(request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>) == <span class="hljs-keyword">null</span>)&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;index.html&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 展示首页，展示登录用户，展示跳转到其他页面的链接，展示一个注销链接</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;title&gt;用户列表&lt;/title&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;h1&gt;用户列表&lt;/h1&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;h1&gt;欢迎你，&quot;</span>+request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>)+<span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;a href=\&quot;home.html\&quot;&gt;返回首页&lt;/a&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/productList.html&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductListPageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 身份验证，是否登录用户</span><br>        <span class="hljs-comment">// 判断session中是否存在user信息</span><br>        <span class="hljs-comment">// 如果不存在，则认为没有登录，跳转到登录界面</span><br>        <span class="hljs-keyword">if</span>(request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>) == <span class="hljs-keyword">null</span>)&#123;<br>            response.sendRedirect(<span class="hljs-string">&quot;index.html&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 展示首页，展示登录用户，展示跳转到其他页面的链接，展示一个注销链接</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;title&gt;产品列表&lt;/title&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;h1&gt;产品列表&lt;/h1&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;h1&gt;欢迎你，&quot;</span>+request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>)+<span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;a href=\&quot;home.html\&quot;&gt;返回首页&lt;/a&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h6 id="13-3-6-当cookie禁用后session的处理方式"><a href="#13-3-6-当cookie禁用后session的处理方式" class="headerlink" title="13.3.6 当cookie禁用后session的处理方式"></a>13.3.6 当cookie禁用后session的处理方式</h6><blockquote><p>如果cookie禁用了，那么无法将sessionid保存到cookie中，那么是如何将sessionid每次传递到服务器呢？</p><p>采用URL重写。即当访问一个服务器的路径时，会自动在后面加上sessionid。</p><p>例如：访问路径为：<a href="http://localhost:8080/day39/home.html%EF%BC%8CURL%E9%87%8D%E5%86%99%E5%90%8E%E8%B7%AF%E5%BE%84%E4%B8%BA%EF%BC%9Ahttp://localhost:8080/day39/home.html?sessionId=2234da727ef432">http://localhost:8080/day39/home.html，URL重写后路径为：http://localhost:8080/day39/home.html?sessionId=2234da727ef432</a></p></blockquote><h4 id="十四、会话跟踪的四种方式"><a href="#十四、会话跟踪的四种方式" class="headerlink" title="十四、会话跟踪的四种方式"></a>十四、会话跟踪的四种方式</h4><blockquote><p>会话跟踪，即服务器获取客户端信息，形式一个会话。</p><ul><li>session</li><li>cookie</li><li>URL重写</li><li>隐藏表单域，即在页面传参时，将sessionid保存到隐藏表单域中一起提交</li></ul></blockquote><h4 id="十五、ServletContext"><a href="#十五、ServletContext" class="headerlink" title="十五、ServletContext"></a>十五、ServletContext</h4><blockquote><p>Context：上下文。</p><p>Servlet是从第一访问开始创建，直到服务器重启或者关闭才销毁，所以ServletContext即Servlet上下文贯穿整个服务器的启动到停止。</p><p>全局对象，当作用域使用时就是全局作用域。</p></blockquote><h5 id="15-1-对象的获取"><a href="#15-1-对象的获取" class="headerlink" title="15.1 对象的获取"></a>15.1 对象的获取</h5><blockquote><p>可以使用request或者session的getServletContext方法来获取。</p><p>一般起名为application。</p></blockquote><h5 id="15-2-作用"><a href="#15-2-作用" class="headerlink" title="15.2 作用"></a>15.2 作用</h5><blockquote><ul><li>获取项目的真实路径：getRealPath(“/“);</li><li>获取上下文路径：getContextPath();  相当于工程路径名称。</li><li>全局作用域：</li></ul><p>特点：</p><ul><li>当全局作用域使用。</li></ul></blockquote><h5 id="15-3-简单案例"><a href="#15-3-简单案例" class="headerlink" title="15.3 简单案例"></a>15.3 简单案例</h5><blockquote><p>统计用户访问某servlet次数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/home.html&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 统计访问次数</span><br>        <span class="hljs-comment">// 每次访问时将次数+1</span><br>        <span class="hljs-comment">// 得到上次访问的次数，当次访问时+1</span><br>        Integer count = (Integer)request.getServletContext().getAttribute(<span class="hljs-string">&quot;count&quot;</span>);<br>        <span class="hljs-comment">// 如果当前是第一次访问，则count为null</span><br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-keyword">null</span>)&#123;<br>            count = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">// 次数加1</span><br>        count++;<br>        <span class="hljs-comment">// 将count保存到全局作用域中</span><br>        request.getServletContext().setAttribute(<span class="hljs-string">&quot;count&quot;</span>, count);<br><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = response.getWriter();<br>        out.print(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;title&gt;首页&lt;/title&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;h1&gt;本页面当前访问的次数为：&quot;</span>+count+<span class="hljs-string">&quot;次&lt;/h1&gt;&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="十六、四大作用域"><a href="#十六、四大作用域" class="headerlink" title="十六、四大作用域"></a>十六、四大作用域</h4><blockquote><ul><li>pageContext：页面作用域，仅当前页面有效</li><li>request：一次请求范围内有效，包括请求转发</li><li>session：一次会话有效，包含在该会话中的多次请求</li><li>application(servletContext)：在服务器上一直有效，包括所有的会话</li></ul></blockquote><blockquote><p>从小到大依次为：pageContext-&gt;request-&gt;session-application</p></blockquote><blockquote><p><a href>注意：</a>session和application要慎用，因为保存的时间较长，会导致服务器内存压力过大。</p><p>session一般用来保存用户身份和权限信息，以及其他需要在多个页面访问的当前用户数据。</p><p>application一般不使用，除非用来保存一些体积较小的全局数据，例如服务器的配置信息。</p></blockquote><h4 id="十七、Filter过滤器"><a href="#十七、Filter过滤器" class="headerlink" title="十七、Filter过滤器"></a>十七、Filter过滤器</h4><h5 id="17-1-概念"><a href="#17-1-概念" class="headerlink" title="17.1 概念"></a>17.1 概念</h5><blockquote><p>过滤器作用是当用户访问服务器资源时，检查用户的请求是否符合要求，如果不符合，则进行响应的处理，如果符合要求，则允许访问服务器资源。</p></blockquote><h5 id="17-2-作用"><a href="#17-2-作用" class="headerlink" title="17.2 作用"></a>17.2 作用</h5><blockquote><ul><li>乱码处理，所有的请求都需要处理编码问题。</li><li>身份认证问题。</li><li>权限验证问题。</li></ul></blockquote><h5 id="17-3-执行时机"><a href="#17-3-执行时机" class="headerlink" title="17.3 执行时机"></a>17.3 执行时机</h5><blockquote><p>一般会拦截在用户发送请求，访问到Servlet之前。</p></blockquote><h5 id="17-4-基本使用"><a href="#17-4-基本使用" class="headerlink" title="17.4 基本使用"></a>17.4 基本使用</h5><blockquote><p>实现Filter接口，并重写doFilter方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// post中文编码处理</span><br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-comment">// 此代码一定要放到方法的最后，作用是继续执行过滤器链上的其他过滤器</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="17-5-生命周期"><a href="#17-5-生命周期" class="headerlink" title="17.5 生命周期"></a>17.5 生命周期</h5><blockquote><p>生命周期与Servlet非常相似。</p><ul><li>创建，实例化</li><li>初始化，init方法</li><li>过滤，doFilter方法</li><li>销毁，destroy方法</li></ul></blockquote><h5 id="17-6-配置"><a href="#17-6-配置" class="headerlink" title="17.6 配置"></a>17.6 配置</h5><blockquote><p>由于过滤器与Servlet非常相似，所以配置也非常相似，有两种情形：</p><ul><li>使用web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.qf.day39.filter.EncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--        匹配所有的路径，即所有的请求都会被此过滤器拦截过滤--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>使用注解</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure></blockquote><h5 id="17-7-过滤器链"><a href="#17-7-过滤器链" class="headerlink" title="17.7 过滤器链"></a>17.7 过滤器链</h5><blockquote><p>当用户发送请求去访问资源时，可能需要多个过滤器进行过滤，这些过滤器形成一个过滤器链。</p></blockquote><blockquote><p>优先级：指过滤器链上的过滤器执行顺序。</p><ul><li>如果都是在web.xml中配置的，顺序是filter-mapping配置的顺序。</li><li>如果是注解，按照类名的字符串顺序。</li><li>如果有的采用注解，有的采用配置文件，那么web.xml高于注解。</li><li><a href>注意：</a>如果一个过滤器同时配置了注解和web.xml，不会报错，会创建两个过滤器对象，过滤两次。</li></ul></blockquote><h5 id="17-8-身份认证案例"><a href="#17-8-身份认证案例" class="headerlink" title="17.8 身份认证案例"></a>17.8 身份认证案例</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// 将Servlet相关对象转换成HttpServlet相关对象</span><br>        HttpServletRequest request = (HttpServletRequest) servletRequest;<br>        HttpServletResponse response = (HttpServletResponse) servletResponse;<br><br>        <span class="hljs-comment">// 如果该路径不需要验证身份，那么直接放过</span><br>        <span class="hljs-comment">// 得到用户的访问路径</span><br>        <span class="hljs-keyword">final</span> String uri = request.getRequestURI();<br>        System.out.println(uri);<br>        <span class="hljs-keyword">if</span> (uri.endsWith(<span class="hljs-string">&quot;/index.html&quot;</span>)<br>                || uri.endsWith(<span class="hljs-string">&quot;/login.do&quot;</span>)<br>                || uri.endsWith(<span class="hljs-string">&quot;/logout.do&quot;</span>))&#123;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 身份验证，是否登录用户</span><br>            <span class="hljs-comment">// 判断session中是否存在user信息</span><br>            <span class="hljs-comment">// 如果不存在，则认为没有登录，跳转到登录界面</span><br>            <span class="hljs-keyword">if</span>(request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>) == <span class="hljs-keyword">null</span>)&#123;<br>                response.sendRedirect(<span class="hljs-string">&quot;index.html&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 此代码一定要放到方法的最后，作用是继续执行过滤器链上的其他过滤器</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/myblog/2021/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/"/>
    <url>/myblog/2021/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/</url>
    
    <content type="html"><![CDATA[<h3 id="数据库MySQL"><a href="#数据库MySQL" class="headerlink" title="数据库MySQL"></a>数据库MySQL</h3><h4 id="一、数据库的概念"><a href="#一、数据库的概念" class="headerlink" title="一、数据库的概念"></a>一、数据库的概念</h4><h5 id="1-1-现阶段数据存放方式"><a href="#1-1-现阶段数据存放方式" class="headerlink" title="1.1 现阶段数据存放方式"></a>1.1 现阶段数据存放方式</h5><blockquote><p>瞬时状态：指数据存储到内存中</p><p>持久化状态：使用文件存储（IO流、对象序列化）</p></blockquote><h5 id="1-2-现有方式的缺点"><a href="#1-2-现有方式的缺点" class="headerlink" title="1.2 现有方式的缺点"></a>1.2 现有方式的缺点</h5><blockquote><ul><li>数据类型</li><li>数据量级</li><li>安全机制</li><li>备份、恢复机制</li><li>查询搜索</li></ul></blockquote><h5 id="1-3-新的文件类型"><a href="#1-3-新的文件类型" class="headerlink" title="1.3 新的文件类型"></a>1.3 新的文件类型</h5><blockquote><p>能否使用excel之类的表格来存储？</p><p>可以，但是excel表格能够清晰的描述数据的结构，却难以进行复杂的查询，而且excel用代码操作也极为不便利。</p></blockquote><h5 id="1-4-数据库"><a href="#1-4-数据库" class="headerlink" title="1.4 数据库"></a>1.4 数据库</h5><blockquote><p>数据库是按照一定的数据结构来组织、存储、管理的仓库。</p></blockquote><h5 id="1-4-分类"><a href="#1-4-分类" class="headerlink" title="1.4 分类"></a>1.4 分类</h5><blockquote><p>网状结构：</p><p>层次结构：</p><p>关系结构：以Table存储，多表之间建立关联关系，通过分类、合并、连接、选取等运算实现访问。是目前主流的数据库结构。</p><ul><li>Oracle：Oracle公司产品，企业级的专业性极强的大型数据库产品。服务收费。</li><li>DB2：IBM公司产品，企业级的专业性极强的大型数据库产品。服务收费。</li><li>MySQL：免费的数据库产品，目前仍旧是中小型企业和个人的首先数据库，也是个人学习的首选。</li><li>SQL Server：微软公司的产品，早期只能应用于windows系统。</li></ul><p>非关系结构：全称为Not only SQL，简写为no SQL，在处理高并发、高性能、海量数据时才使用，一般采用key-value方式存储。一般作为关系型数据库的补充。例如：MongoDB、Redis、ES等。</p></blockquote><h5 id="1-5-数据库管理系统"><a href="#1-5-数据库管理系统" class="headerlink" title="1.5 数据库管理系统"></a>1.5 数据库管理系统</h5><blockquote><p>操作和管理数据库的软件，用来建立、管理和维护数据库。</p><p>用来对数据库的统一管理和控制。用户通过数据库管理系统来访问数据库中的数据。</p></blockquote><h4 id="二、MySQL"><a href="#二、MySQL" class="headerlink" title="二、MySQL"></a>二、MySQL</h4><h5 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h5><blockquote><p>是一个关系型数据库。</p><p>RDBMS：relation database management system关系型数据库管理系统</p></blockquote><h5 id="2-2-目录"><a href="#2-2-目录" class="headerlink" title="2.2 目录"></a>2.2 目录</h5><blockquote><p>bin：可执行文件</p><p>data：系统数据库</p><p>include：头文件</p><p>lib：支持的库</p></blockquote><h5 id="2-3-核心文件"><a href="#2-3-核心文件" class="headerlink" title="2.3 核心文件"></a>2.3 核心文件</h5><blockquote><p>my.ini：对数据库的核心配置的设置。</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span> <span class="hljs-comment"># 端口号</span><br><span class="hljs-attr">default-character-set</span>=utf8 <span class="hljs-comment"># 默认字符集</span><br><span class="hljs-attr">default-storage-engine</span>=INNODB <span class="hljs-comment"># 默认存储引擎</span><br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">100</span> <span class="hljs-comment"># 最大连接数</span><br></code></pre></div></td></tr></table></figure><h4 id="三、SQL语言"><a href="#三、SQL语言" class="headerlink" title="三、SQL语言"></a>三、SQL语言</h4><blockquote><p>SQL：structured query language，结构化查询语言。</p><p>用来对数据库进行操作。</p><p>对数据的操作一般有增删改查。简称CRUD（create、read、update、delete）</p></blockquote><h4 id="四、MySQL操作"><a href="#四、MySQL操作" class="headerlink" title="四、MySQL操作"></a>四、MySQL操作</h4><h5 id="4-1-连接数据库"><a href="#4-1-连接数据库" class="headerlink" title="4.1 连接数据库"></a>4.1 连接数据库</h5><blockquote><p>如果已经配置了环境变量：</p><p>输入 mysql -u root -p回车</p><p>输入root用户密码，然后回车，登录结束</p><p>如果没有配置环境变量，windows系统中，可以在开始菜单找到mysql的客户端命令行工具。打开输入密码即可。</p></blockquote><h5 id="4-2-基本命令"><a href="#4-2-基本命令" class="headerlink" title="4.2 基本命令"></a>4.2 基本命令</h5><h6 id="4-2-1-查看所有数据库"><a href="#4-2-1-查看所有数据库" class="headerlink" title="4.2.1 查看所有数据库"></a>4.2.1 查看所有数据库</h6><blockquote><p>show databases;   查看MySQL中有哪些数据库</p></blockquote><h6 id="4-2-2-创建数据库"><a href="#4-2-2-创建数据库" class="headerlink" title="4.2.2 创建数据库"></a>4.2.2 创建数据库</h6><blockquote><p>create database 数据库名称;     创建一个默认字符集的数据库。</p><p>create database 数据库名称 character set GBK; 创建一个字符集为GBK的数据库。</p><p>create database if not exists 数据库名称;   如果没有某个数据库就创建一个。</p><p><a href>注意：</a>在创建数据库时一定要指定字符集。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database java2106 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8;<br></code></pre></div></td></tr></table></figure><h6 id="4-2-3-查看创建的数据库信息"><a href="#4-2-3-查看创建的数据库信息" class="headerlink" title="4.2.3 查看创建的数据库信息"></a>4.2.3 查看创建的数据库信息</h6><blockquote><p>show create database 数据库名称; </p></blockquote><h6 id="4-2-4-修改数据库"><a href="#4-2-4-修改数据库" class="headerlink" title="4.2.4 修改数据库"></a>4.2.4 修改数据库</h6><blockquote><p>alter database 数据库名称 character set 字符集;   修改字符集</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> database java2106 <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> gbk;<br></code></pre></div></td></tr></table></figure><h6 id="4-2-5-查看当前所使用的数据库"><a href="#4-2-5-查看当前所使用的数据库" class="headerlink" title="4.2.5 查看当前所使用的数据库"></a>4.2.5 查看当前所使用的数据库</h6><blockquote><p>select database();    注意后面的括号，意味着此处是调用函数。</p></blockquote><h6 id="4-2-6-切换使用数据库"><a href="#4-2-6-切换使用数据库" class="headerlink" title="4.2.6 切换使用数据库"></a>4.2.6 切换使用数据库</h6><blockquote><p>use 数据库名称;</p></blockquote><h6 id="4-2-7-删除数据库"><a href="#4-2-7-删除数据库" class="headerlink" title="4.2.7 删除数据库"></a>4.2.7 删除数据库</h6><blockquote><p>drop database 数据库名称;</p></blockquote><blockquote><p><a href>注意：</a></p><p>数据库结构的创建、修改、删除、查看等，使用的命令是：create、alter、drop、show</p></blockquote><h4 id="五、数据查询"><a href="#五、数据查询" class="headerlink" title="五、数据查询"></a>五、数据查询</h4><blockquote><p>数据库是由表构成，表又包含行和列。数据查询即对表的查询。查询结果以行和列的形式显示，可以看作为一张虚拟的表。</p></blockquote><h5 id="5-1-数据导入"><a href="#5-1-数据导入" class="headerlink" title="5.1 数据导入"></a>5.1 数据导入</h5><blockquote><p>show tables;   查看所有的表信息。</p><p>source sql文件地址;   导入一个sql文件。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database companydb <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8; <span class="hljs-comment">-- 创建数据库</span><br>use companydb; <span class="hljs-comment">-- 切换使用数据库</span><br>source d:\companydb.sql; <span class="hljs-comment">-- 导入一个sql文件内容到数据库。</span><br><span class="hljs-keyword">show</span> tables; <span class="hljs-comment">-- 查询所有的表名</span><br></code></pre></div></td></tr></table></figure><h5 id="5-2-基本查询"><a href="#5-2-基本查询" class="headerlink" title="5.2 基本查询"></a>5.2 基本查询</h5><blockquote><p>select 列名 from 表名;    查询一个表中的数据，只查询相应的列。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_employees; <span class="hljs-comment">-- 查询所有的列，所有的行。</span><br><span class="hljs-keyword">select</span> first_name, email <span class="hljs-keyword">from</span> t_employees; <span class="hljs-comment">-- 查询first_name, email两列。</span><br></code></pre></div></td></tr></table></figure><blockquote><p>对查询中的列进行运算：可以使用+、-、*、/、运算，但是不能使用%，%在sql中不是求余运算。</p><p><a href>注意：</a>+不能做拼接字符串操作。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> EMPLOYEE_ID, FIRST_NAME, SALARY <span class="hljs-operator">*</span> <span class="hljs-number">12</span> <span class="hljs-keyword">FROM</span> t_employees;<br></code></pre></div></td></tr></table></figure><blockquote><p>别名操作，可以给列起别名，语法结构是</p><p>select EMPLOYEE_ID AS 编号 from t_employees;</p><p><a href>注意：</a> AS 关键字可以省略。别名加不加单引号没有区别。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> EMPLOYEE_ID id, FIRST_NAME <span class="hljs-string">&#x27;名&#x27;</span>, SALARY <span class="hljs-operator">*</span> <span class="hljs-number">12</span> <span class="hljs-keyword">as</span> 年薪 <span class="hljs-keyword">FROM</span> t_employees;<br></code></pre></div></td></tr></table></figure><blockquote><p>distinct 对查询结果去重。</p><p><a href>注意：</a>如果有多列，需要多列的内容都相同才能去重。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> MANAGER_ID <span class="hljs-keyword">FROM</span> t_employees;<br></code></pre></div></td></tr></table></figure><h5 id="5-3-排序查询"><a href="#5-3-排序查询" class="headerlink" title="5.3 排序查询"></a>5.3 排序查询</h5><blockquote><p>将查询结果按照指定规则排序。</p><p>select 列名 from 表名 order by 排序列 排序规则;</p><p>排序规则有两种：</p><ul><li>ASC 默认值，升序（由小到大）</li><li>DESC 降序（由大到小）</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 按照单列排序</span><br><span class="hljs-keyword">SELECT</span> EMPLOYEE_ID, FIRST_NAME, SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SALARY <span class="hljs-keyword">DESC</span>; <br></code></pre></div></td></tr></table></figure><blockquote><p>多列排序：</p><p>先按照第一排序列的规则排序，如果有相同的列，则再按第二排序列的规则，以此类推。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> EMPLOYEE_ID, FIRST_NAME, SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SALARY <span class="hljs-keyword">DESC</span>, EMPLOYEE_ID <span class="hljs-keyword">DESC</span>; <br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a></p><p>上面的案例是表示先按照员工薪资排序，如果薪资一样，则将员工比较大的排在前面。</p></blockquote><h5 id="5-4-条件查询"><a href="#5-4-条件查询" class="headerlink" title="5.4 条件查询"></a>5.4 条件查询</h5><blockquote><p>语法：</p><p>select * from 表名 where 条件;</p></blockquote><h6 id="5-4-1-等值判断"><a href="#5-4-1-等值判断" class="headerlink" title="5.4.1 等值判断"></a>5.4.1 等值判断</h6><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">=</span> <span class="hljs-number">11000</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Steven&#x27;</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>如果条件中比较的值是数字，可以不加单引号，也可以加，但是如果不是数字，是字符串或者时间等，必须加单引号。</p><p>等值比较时只需要一个等号即可。</p></blockquote><h6 id="5-4-2-逻辑判断"><a href="#5-4-2-逻辑判断" class="headerlink" title="5.4.2 逻辑判断"></a>5.4.2 逻辑判断</h6><blockquote><p>当有多个条件时，可以使用AND、OR来进行逻辑处理，可以使用NOT来取反。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 条件并列</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">=</span> <span class="hljs-number">11000</span> <span class="hljs-keyword">AND</span> COMMISSION_PCT <span class="hljs-operator">=</span> <span class="hljs-number">0.3</span>;<br><span class="hljs-comment">-- 条件或者</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Steven&#x27;</span> <span class="hljs-keyword">OR</span> FIRST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Den&#x27;</span>;<br><span class="hljs-comment">-- 条件取反</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> SALARY <span class="hljs-operator">=</span> <span class="hljs-number">11000</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SALARY <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h6 id="5-4-3-不等值判断"><a href="#5-4-3-不等值判断" class="headerlink" title="5.4.3 不等值判断"></a>5.4.3 不等值判断</h6><blockquote><p>可以使用&gt;、 &lt; 、&gt;=、 &lt;=、 !=、 &lt;&gt;来进行不等值判断。</p><p><a href>注意：</a> !=与&lt;&gt;效果一样。</p><p><a href>注意：</a>字符串也可以使用不等值判断。先判断第一个字符，然后判断第二个。例如 ‘ac’ 大于’ab’</p><p><a href>注意：</a> 日期也可以使用不等值判断。后面的日期大于前面的日期，如果使用字符串的方式表示，也可以按照字符串的方式判断。例如：date &gt; ‘2021’表示得到2021年后所有的数据。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">11000</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SALARY <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h6 id="5-4-4-区间判断"><a href="#5-4-4-区间判断" class="headerlink" title="5.4.4 区间判断"></a>5.4.4 区间判断</h6><blockquote><p>使用between…and来实现区间判断。</p><p>相当于 列名 &gt;= 较小值  AND 列名 &lt;= 较大值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">11000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">12000</span>;<br><span class="hljs-comment">-- 相当于</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">11000</span> <span class="hljs-keyword">AND</span> SALARY <span class="hljs-operator">&lt;=</span> <span class="hljs-number">12000</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>BETWEEN… AND区间必须先写小值，后面写大值，否则查询没有结果。</p></blockquote><h6 id="5-4-5-空值判断"><a href="#5-4-5-空值判断" class="headerlink" title="5.4.5 空值判断"></a>5.4.5 空值判断</h6><blockquote><p>列名 is NULL</p><p>列名 is not NULL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> COMMISSION_PCT <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 不能用 = NULL</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> COMMISSION_PCT <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h6 id="5-4-6-枚举查询"><a href="#5-4-6-枚举查询" class="headerlink" title="5.4.6 枚举查询"></a>5.4.6 枚举查询</h6><blockquote><p>将要匹配的值列举出来，使用in关键字</p><p>语法：列名  IN (值1，值2， 值3…)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-keyword">IN</span> (<span class="hljs-number">8000</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">6000</span>);<br><span class="hljs-comment">-- 等同于</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">=</span> <span class="hljs-number">8000</span> <span class="hljs-keyword">OR</span> SALARY <span class="hljs-operator">=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">OR</span> SALARY <span class="hljs-operator">=</span> <span class="hljs-number">6000</span>;<br></code></pre></div></td></tr></table></figure><h6 id="5-4-7-模糊查询"><a href="#5-4-7-模糊查询" class="headerlink" title="5.4.7 模糊查询"></a>5.4.7 模糊查询</h6><blockquote><p>当条件不明晰时，可以使用模糊查询。</p><p>语法：列名 LIKE ‘A%’</p><p>使用<code>%</code>和<code>_</code>作为通配符。<code>%</code>表示0到多个字符，<code>_</code>表示一个字符。</p><p><a href>注意：</a> 列名 LIKE ‘%%’ 查询所有。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 表示名以Al开头，后面有3个字符的</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Al___&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIRST_NAME;<br><span class="hljs-comment">-- 表示名以Al开头</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Al%&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIRST_NAME;<br><span class="hljs-comment">-- 表示名包含Al</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Al%&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIRST_NAME;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>如果在LIKE后面的条件中没有通配符，等同于=</p></blockquote><h6 id="5-4-8-分支查询"><a href="#5-4-8-分支查询" class="headerlink" title="5.4.8 分支查询"></a>5.4.8 分支查询</h6><blockquote><p>一些sql的含义：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 表里有多少条记录，就会显示多少行数字1</span><br><span class="hljs-keyword">SELECT</span> `EMPLOYEE_ID` <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 表示查询EMPLOYEE_ID列的数据，`号一般用来区分关键字</span><br><span class="hljs-keyword">SELECT</span> name, `<span class="hljs-keyword">DESC</span>` <span class="hljs-keyword">from</span> users; <span class="hljs-comment">-- 区分关键字</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;EMPLOYEE_ID&#x27;</span> <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 表里有多少条记录，就会显示多少行字符串EMPLOYEE_ID</span><br></code></pre></div></td></tr></table></figure><blockquote><p>分支结构查询：</p><p>语法：</p><p>CASE</p><p>​    WHEN 条件1 THEN 结果1</p><p>​    WHEN 条件2 THEN 结果2</p><p>​    WHEN 条件2 THEN 结果2</p><p>​    ELSE 结果4</p><p>END</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据薪资查询级别</span><br><span class="hljs-keyword">SELECT</span> EMPLOYEE_ID, FIRST_NAME, SALARY, <br><span class="hljs-keyword">CASE</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;高级&#x27;</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;中级&#x27;</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;初级&#x27;</span><br>   <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;见习&#x27;</span><br><span class="hljs-keyword">END</span> 级别<br> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SALARY <span class="hljs-keyword">DESC</span>;<br></code></pre></div></td></tr></table></figure><h6 id="5-4-9-时间函数"><a href="#5-4-9-时间函数" class="headerlink" title="5.4.9 时间函数"></a>5.4.9 时间函数</h6><blockquote><p>在MySQL中的时间函数，可以单独使用，也可以用在其他SQL语句中。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SYSDATE(); <span class="hljs-comment">-- 得到当前的日期时间</span><br><span class="hljs-keyword">SELECT</span> CURDATE(); <span class="hljs-comment">-- 得到当前的日期</span><br><span class="hljs-keyword">SELECT</span> CURTIME(); <span class="hljs-comment">-- 得到当前的时间</span><br><span class="hljs-keyword">SELECT</span> NOW(); <span class="hljs-comment">-- 得到当前的日期时间</span><br><span class="hljs-keyword">SELECT</span> WEEK(<span class="hljs-string">&#x27;2021-08-02&#x27;</span>); <span class="hljs-comment">-- 得到指定日期是当年的第几周</span><br><span class="hljs-keyword">SELECT</span> WEEK(CURDATE()); <span class="hljs-comment">-- 得到当前日期是当年的第几周（函数可以嵌套）</span><br><span class="hljs-comment">-- 得到日期时间中的年月日时分秒</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(CURDATE());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(CURDATE());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DAY</span>(CURDATE());<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">HOUR</span>(NOW());<br><span class="hljs-keyword">SELECT</span> DATEDIFF(<span class="hljs-string">&#x27;2021-06-03&#x27;</span>,<span class="hljs-string">&#x27;2021-08-02&#x27;</span>); <span class="hljs-comment">-- 得到两个日期中间间隔的天数，结果是-60</span><br><span class="hljs-keyword">SELECT</span> ADDDATE(CURDATE(),<span class="hljs-number">80</span>); <span class="hljs-comment">-- 得到今天的80天后是哪一天</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> HIRE_DATE <span class="hljs-operator">=</span> ADDDATE(CURDATE(),<span class="hljs-number">-8200</span>); <span class="hljs-comment">-- 判断HIRE_DATE日期为今天的8200天前</span><br></code></pre></div></td></tr></table></figure><h6 id="5-4-10-字符串函数"><a href="#5-4-10-字符串函数" class="headerlink" title="5.4.10 字符串函数"></a>5.4.10 字符串函数</h6><blockquote><p>在MySQL中的字符串函数，可以单独使用，也可以用在其他SQL语句中。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(FIRST_NAME,<span class="hljs-string">&#x27;,&#x27;</span>,LAST_NAME) 全名 <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 拼接字符串</span><br><span class="hljs-comment">-- 第一个参数是要改变的字符串，第二个参数是从哪个位置开始（下标从1开始），第三个参数是长度，最后一个参数是替换的字符串</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">INSERT</span>(FIRST_NAME,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Hello&#x27;</span>)  <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> EMPLOYEE_ID <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">-- 将字符串Steven变成StHellon</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">LOWER</span>(FIRST_NAME) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> EMPLOYEE_ID <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">-- 转小写</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">UPPER</span>(FIRST_NAME) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> EMPLOYEE_ID <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">-- 转大写</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUBSTRING</span>(FIRST_NAME,<span class="hljs-number">2</span>) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> EMPLOYEE_ID <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">-- 截取字符串</span><br></code></pre></div></td></tr></table></figure><h5 id="5-5-聚合函数"><a href="#5-5-聚合函数" class="headerlink" title="5.5 聚合函数"></a>5.5 聚合函数</h5><blockquote><p>类似于Excel中的公式。</p><p>sum()：求和</p><p>avg()：求平均数</p><p>max()：求最大值</p><p>min()：求最小值</p><p>count()：计算行数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 统计当月员工总工资和</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">avg</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 计算平均薪资</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">max</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 最高工资</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">min</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 最低工资</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> t_employees; <span class="hljs-comment">-- 查询行数，可以使用*或列名，使用数字1性能最好</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>; <span class="hljs-comment">-- 查询薪资大于10000的人数</span><br></code></pre></div></td></tr></table></figure><h5 id="5-6-分组查询"><a href="#5-6-分组查询" class="headerlink" title="5.6 分组查询"></a>5.6 分组查询</h5><h6 id="5-6-1-分组基础查询"><a href="#5-6-1-分组基础查询" class="headerlink" title="5.6.1 分组基础查询"></a>5.6.1 分组基础查询</h6><blockquote><p>分组查询是将数据按照指定列分成多组，然后按组进行数据统计。所以一般情况下，分组意味着需要聚合统计。</p><p>语法：</p><p>Group by 分组列</p></blockquote><blockquote><p><a href>注意：</a> 如果语句中有分组，那么前面查询的列，必须是聚合函数或者与分组列有一一对应关系的列。否则只会显示第一行记录，是无意义记录。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID,<span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>),<span class="hljs-built_in">AVG</span>(SALARY),<span class="hljs-built_in">MAX</span>(SALARY), <span class="hljs-built_in">MIN</span>(SALARY), <span class="hljs-built_in">SUM</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><h6 id="5-6-2-分组过滤查询"><a href="#5-6-2-分组过滤查询" class="headerlink" title="5.6.2 分组过滤查询"></a>5.6.2 分组过滤查询</h6><blockquote><p>在分组后，如果还需要添加过滤条件，使用having关键字。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 先分组，再写条件使用having关键字</span><br><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">MAX</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID <span class="hljs-keyword">HAVING</span> DEPARTMENT_ID <span class="hljs-keyword">IN</span> (<span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">80</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>但是，上面的语句明显可以先写条件，再分组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 先写条件，再分组</span><br><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">MAX</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-keyword">IN</span> (<span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">80</span>) <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID ;<br></code></pre></div></td></tr></table></figure><blockquote><p>在项目中，必须要用having关键字的场景应该是使用聚合函数当条件。</p><p>查询平均薪资高于8000的部门。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 此时，将条件放到group by的前面，并使用where是不行的</span><br><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">AVG</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">AVG</span>(SALARY) <span class="hljs-operator">&gt;</span> <span class="hljs-number">8000</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>having后面的聚合函数只能跟常量比较，不能写列名等，例如，下面的代码是错误的：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询部门大于平均薪资的人数，不能这么写</span><br><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID <span class="hljs-keyword">HAVING</span> SALARY <span class="hljs-operator">&gt;</span> <span class="hljs-built_in">AVG</span>(SALARY);<br></code></pre></div></td></tr></table></figure><h5 id="5-7-限定查询"><a href="#5-7-限定查询" class="headerlink" title="5.7 限定查询"></a>5.7 限定查询</h5><blockquote><p>显示一部分满足条件的结果。项目中通常用来进行分页显示。</p><p>语法：limit 跳过条数, 显示条数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 跳过5条，显示5条，即显示第6-10条</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees LIMIT <span class="hljs-number">5</span>, <span class="hljs-number">5</span>;<br><span class="hljs-comment">-- 如果是跳过0条，显示5条</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">5</span>;<br><span class="hljs-comment">-- 可以简写为：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees LIMIT <span class="hljs-number">5</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>在项目中，如果有分页的业务，计算规则如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// page是页数</span><br><span class="hljs-comment">// size是每页显示的条数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findAll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> skip = (page - <span class="hljs-number">1</span>) * size;<br>    String sql = <span class="hljs-string">&quot;select * from t1 limit &quot;</span> + skip + <span class="hljs-string">&quot;, &quot;</span> + size;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="5-8-基础查询顺序总结"><a href="#5-8-基础查询顺序总结" class="headerlink" title="5.8 基础查询顺序总结"></a>5.8 基础查询顺序总结</h5><blockquote><p>SELECT 列名</p><p>FROM 表名</p><p>WHERE 条件</p><p>GROUP BY 分组列</p><p>HAVING 分组后条件</p><p>ORDER BY 排序列  排序规则</p><p>LIMIT 跳过条数, 显示条数</p></blockquote><h5 id="5-9-子查询"><a href="#5-9-子查询" class="headerlink" title="5.9 子查询"></a>5.9 子查询</h5><blockquote><p>在查询语句中包含查询语句。</p></blockquote><h6 id="5-9-1-将查询结果当条件"><a href="#5-9-1-将查询结果当条件" class="headerlink" title="5.9.1 将查询结果当条件"></a>5.9.1 将查询结果当条件</h6><blockquote><p>例如：查询工资大于Bruce的员工信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询Bruce的工资信息，得到单行单列的数据（6000）</span><br><span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Bruce&#x27;</span>;<br><span class="hljs-comment">-- 查询工资大于6000的员工信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> <span class="hljs-number">6000</span>;<br><span class="hljs-comment">-- 将两条语句组合，需要先查询的部分应该加上括号</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> FIRST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Bruce&#x27;</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>需要结果能够作为查询条件。此处结果必须是单行单列。</p></blockquote><h6 id="5-9-2-查询结果为多行单列（枚举）"><a href="#5-9-2-查询结果为多行单列（枚举）" class="headerlink" title="5.9.2 查询结果为多行单列（枚举）"></a>5.9.2 查询结果为多行单列（枚举）</h6><blockquote><p>查询与’King’同一个部门的员工信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询King对应的部门</span><br><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> LAST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;King&#x27;</span>;<br><span class="hljs-comment">-- 结果有两个，不能直接用等号，需要使用in</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-keyword">in</span> (<span class="hljs-number">80</span>, <span class="hljs-number">90</span>) ;<br><span class="hljs-comment">-- 将两条语句组合，需要先查询的部分应该加上括号</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> DEPARTMENT_ID <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> LAST_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;King&#x27;</span>) ;<br></code></pre></div></td></tr></table></figure><h6 id="5-9-3-ALL和ANY用法"><a href="#5-9-3-ALL和ANY用法" class="headerlink" title="5.9.3 ALL和ANY用法"></a>5.9.3 ALL和ANY用法</h6><blockquote><p>查询大于60部门所有员工工资的员工信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询60部门的员工工资，结果是多行单列</span><br><span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-comment">-- 如果要大于60部门所有员工工资，其实只需要大于最高工资即可</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span>  (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">max</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>);<br><span class="hljs-comment">-- 上面的写法可以实现结果，但是是人为分析的（算法），按照原始要求应该写为</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALL</span> (<span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>查询大于60部门任意员工工资的员工信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询60部门的员工工资，结果是多行单列</span><br><span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-comment">-- 如果要大于60部门任意员工工资，其实只需要大于最低工资即可</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span>  (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">min</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>);<br><span class="hljs-comment">-- 上面的写法可以实现结果，但是是人为分析的（算法），按照原始要求应该写为</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ANY</span> (<span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a></p><p>ALL和ANY的区别：</p><p>ALL需要判断结果中多行是否全部满足条件，ANY只要结果中多行有一行满足条件即可。</p></blockquote><h6 id="5-9-4-将子查询作为条件再次查询"><a href="#5-9-4-将子查询作为条件再次查询" class="headerlink" title="5.9.4 将子查询作为条件再次查询"></a>5.9.4 将子查询作为条件再次查询</h6><blockquote><p>查询所有级别为高级的员工信息。（参考5.4.8）</p></blockquote><blockquote><p>先将员工级别使用分支查询的方式显示：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> EMPLOYEE_ID, FIRST_NAME, SALARY, <br><span class="hljs-keyword">CASE</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;高级&#x27;</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;中级&#x27;</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;初级&#x27;</span><br>   <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;见习&#x27;</span><br><span class="hljs-keyword">END</span> lv<br> <span class="hljs-keyword">FROM</span> t_employees<br></code></pre></div></td></tr></table></figure><blockquote><p>尝试直接在后面加条件 WHERE lv = ‘高级’，结果报错，原因是别名是在查询出结果后添加的，而条件是作为查询过程中使用的，但是此时结果还没出来，根本就没有别名。</p><p>于是，需要将查询结果作为一个类似于虚拟表的方式再次查询。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> EMPLOYEE_ID, FIRST_NAME, SALARY, <br><span class="hljs-keyword">CASE</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">20000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;高级&#x27;</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;中级&#x27;</span><br>   <span class="hljs-keyword">WHEN</span> SALARY <span class="hljs-operator">&gt;=</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;初级&#x27;</span><br>   <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;见习&#x27;</span><br><span class="hljs-keyword">END</span> lv<br> <span class="hljs-keyword">FROM</span> t_employees) <span class="hljs-keyword">as</span> t1 <span class="hljs-keyword">WHERE</span> lv <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中级&#x27;</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>将查询结果作为虚拟表查询时，一定要给查询结果起别名，否则会报错。</p></blockquote><h5 id="5-10-合并查询"><a href="#5-10-合并查询" class="headerlink" title="5.10 合并查询"></a>5.10 合并查询</h5><blockquote><p>将两次查询结果合并，变成一个结果。</p></blockquote><blockquote><p>前面讲到in效率不高，应该使用其他办法。例如：</p><p>查询部门号为90和60的，如果使用in，如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用in</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-keyword">IN</span> (<span class="hljs-number">90</span>, <span class="hljs-number">60</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>可以将90和60拆分查询，并将结果合并：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">90</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br><span class="hljs-comment">-- 也可以使用</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">90</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">WHERE</span> DEPARTMENT_ID <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>经典面试题：</a></p><p>UNION和UNION ALL的区别：</p><p>UNION会去掉重复的行。而UNION ALL会保留所有的行。</p><p><a href>注意：</a>必须要查询的列数一致才能合并，必须要一行中所有的列内容与另一行完全一致才算重复。</p></blockquote><h5 id="5-11-连接查询"><a href="#5-11-连接查询" class="headerlink" title="5.11 连接查询"></a>5.11 连接查询</h5><h6 id="5-11-1-交叉连接-了解"><a href="#5-11-1-交叉连接-了解" class="headerlink" title="5.11.1 交叉连接(了解)"></a>5.11.1 交叉连接(了解)</h6><blockquote><p>两张表完全交叉，形成笛卡尔集，即A表中如果有3条数据，B表中有5条数据，会形成15条记录的结果。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">CROSS</span> <span class="hljs-keyword">JOIN</span> t_departments<br><span class="hljs-comment">-- 也可以写作</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees, t_departments<br></code></pre></div></td></tr></table></figure><h6 id="5-11-2-内连接"><a href="#5-11-2-内连接" class="headerlink" title="5.11.2 内连接"></a>5.11.2 内连接</h6><blockquote><p>两张表根据某个关联条件进行连接。只有当有关联关系时才会有结果。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询所有的员工信息，表内有107条记录，但是有一个员工没有部门id</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees; <br><span class="hljs-comment">-- 查询所有的部门信息，表内有32条记录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_departments;<br><span class="hljs-comment">-- 关联查询部门和员工，共有106条记录，因为没有部门id的员工无法显示（没有关联）</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees e, t_departments d <span class="hljs-keyword">WHERE</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> d.DEPARTMENT_ID;<br><span class="hljs-comment">-- 另一种使用内连接的写法</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> t_departments d <span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> d.DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>INNER JOIN在MySQL中是后面的版本才添加的写法，所以之前都是使用where加条件的写法。</p></blockquote><h6 id="5-11-3-外连接"><a href="#5-11-3-外连接" class="headerlink" title="5.11.3 外连接"></a>5.11.3 外连接</h6><blockquote><p>两张表根据某个关联条件进行连接。以连接的方向对应的表为基准（会显示该表的所有记录）。</p></blockquote><blockquote><p>左外连接：以左边的表为基准。</p><p>右外连接：以右边的表为基准。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- left outer join 可以简写为 left join，以左边的表为准，会先显示内连接的所有106条记录，然后显示左边表中没有关联的数据1条，一共107条记录，没有关联的部门信息显示为null</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">left</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> t_departments d <span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> d.DEPARTMENT_ID <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> e.DEPARTMENT_ID;<br><span class="hljs-comment">-- 右外连接，以右边的表为基准，先显示内连接所有的数据106条，然后显示没有与员工关联的部门信息，员工部分显示为null</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">right</span> <span class="hljs-keyword">JOIN</span> t_departments d <span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> d.DEPARTMENT_ID <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> e.DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><h5 id="5-12-复杂查询"><a href="#5-12-复杂查询" class="headerlink" title="5.12 复杂查询"></a>5.12 复杂查询</h5><blockquote><p>– 查询每个部门大于平均薪资的人数</p></blockquote><blockquote><p>1、查询每个部门的平均薪资</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">AVG</span>(SALARY) <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><blockquote><p>2、查询部门大于平均薪资的信息</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">AVG</span>(SALARY) v <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID) t1<br><span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> t1.DEPARTMENT_ID <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> v;<br></code></pre></div></td></tr></table></figure><blockquote><p>3、将上面的结果分组，求数量。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.DEPARTMENT_ID, <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">AVG</span>(SALARY) v <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID) t1<br><span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> t1.DEPARTMENT_ID <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> v<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> e.DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><h5 id="5-13-行转列-经典面试题"><a href="#5-13-行转列-经典面试题" class="headerlink" title="5.13 行转列[经典面试题]"></a>5.13 行转列[经典面试题]</h5><blockquote><p>默认的表数据显示方式如下：表名为：score1</p></blockquote><table><thead><tr><th>姓名stu_name</th><th>课程co_name</th><th>成绩score</th></tr></thead><tbody><tr><td>张三</td><td>Java</td><td>90</td></tr><tr><td>张三</td><td>SQL</td><td>95</td></tr><tr><td>张三</td><td>HTML</td><td>88</td></tr></tbody></table><blockquote><p>需要查询后显示为以列的形式：</p></blockquote><table><thead><tr><th>姓名</th><th>Java</th><th>SQL</th><th>HTML</th></tr></thead><tbody><tr><td>张三</td><td>90</td><td>95</td><td>88</td></tr></tbody></table><blockquote><p>1、先使用单表操作，创建一个单表，如上面的第一个表格样式。</p><p>查询所有数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> score1;<br></code></pre></div></td></tr></table></figure><blockquote><p>2、由于需要使用多个新列（Java、HTML、SQL）来显示数据，所以使用case when的方式来条件显示。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Java&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;Java&#x27;</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HTML&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;HTML&#x27;</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SQL&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;SQL&#x27;</span><br> <span class="hljs-keyword">FROM</span> score1;<br></code></pre></div></td></tr></table></figure><blockquote><p>3、去掉其他多余的列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> stu_name,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Java&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;Java&#x27;</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HTML&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;HTML&#x27;</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SQL&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;SQL&#x27;</span><br> <span class="hljs-keyword">FROM</span> score1;<br></code></pre></div></td></tr></table></figure><blockquote><p>4、按照学生姓名分组显示</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> stu_name,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Java&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;Java&#x27;</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HTML&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;HTML&#x27;</span>,<br><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SQL&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;SQL&#x27;</span><br> <span class="hljs-keyword">FROM</span> score1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stu_name;<br></code></pre></div></td></tr></table></figure><blockquote><p>5、分组之后，与分组列不相关的列只会显示第一行数据，为了显示正确的数据，可以使用max函数来求当列的最大值。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> stu_name,<br><span class="hljs-built_in">max</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Java&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;Java&#x27;</span>,<br><span class="hljs-built_in">max</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HTML&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;HTML&#x27;</span>,<br><span class="hljs-built_in">max</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> co_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SQL&#x27;</span> <span class="hljs-keyword">THEN</span> scores <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;SQL&#x27;</span><br> <span class="hljs-keyword">FROM</span> score1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> stu_name;<br></code></pre></div></td></tr></table></figure><blockquote><p>练习题中数据进行行转列：</p><p>1、先把数据以前面的表格1（score1）的形式显示出来。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">(<span class="hljs-keyword">SELECT</span><br>s.STU_NAME,<br>sc.DEGREE,<br>c.COU_NAME<br><span class="hljs-keyword">FROM</span><br>student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">ON</span> s.STU_ID <span class="hljs-operator">=</span> sc.STU_ID<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> sc.COU_ID <span class="hljs-operator">=</span> c.COU_ID);<br></code></pre></div></td></tr></table></figure><blockquote><p>2、把上面的显示结果当作虚拟表t1，根据其进行查询显示行转列。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> STU_NAME,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span>,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;操作系统&#x27;</span>,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数字电路&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;数字电路&#x27;</span><br> <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span><br>s.STU_NAME,<br>sc.DEGREE,<br>c.COU_NAME<br><span class="hljs-keyword">FROM</span><br>student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">ON</span> s.STU_ID <span class="hljs-operator">=</span> sc.STU_ID<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> sc.COU_ID <span class="hljs-operator">=</span> c.COU_ID) t1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> STU_NAME;<br></code></pre></div></td></tr></table></figure><h5 id="5-14-查询某个列重复的行-经典面试题"><a href="#5-14-查询某个列重复的行-经典面试题" class="headerlink" title="5.14 查询某个列重复的行[经典面试题]"></a>5.14 查询某个列重复的行[经典面试题]</h5><blockquote><p>去重的方式比较简单，使用distinct关键字即可。</p><p>如果要查询某个列重复的行，先根据该列分组，求每组的数量，如果该组的数量大于1，说明该列是重复的。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br> sc.COU_ID<br><span class="hljs-keyword">FROM</span><br>score <span class="hljs-keyword">AS</span> sc<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> COU_ID<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><h4 id="六、DML操作"><a href="#六、DML操作" class="headerlink" title="六、DML操作"></a>六、DML操作</h4><blockquote><p>数据操作语言，对数据库中的数据进行增删改操作。</p></blockquote><h5 id="6-1-新增"><a href="#6-1-新增" class="headerlink" title="6.1 新增"></a>6.1 新增</h5><blockquote><p>添加数据。</p><p>语法：</p><p>添加一行记录：</p><p>INSERT INTO 表名(列名1, 列名2, 列名3) VALUES (值1, 值2, 值3)</p><p>当添加所有列对应的值时，也可以如下操作：</p><p>INSERT INTO 表名  VALUES (值1, 值2, 值3)</p><p>一次添加多行记录：</p><p>INSERT INTO 表名(列名1, 列名2, 列名3) VALUES (值1, 值2, 值3), (值1, 值2, 值3), (值1, 值2, 值3), (值1, 值2, 值3);</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加一行，指定部分列</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_jobs(JOB_ID, MIN_SALARY, MAX_SALARY) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;AAA&#x27;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">100000</span>);<br><span class="hljs-comment">-- 添加一行，不指定任何列，全列添加</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_jobs <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-string">&#x27;BBBBBBB&#x27;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">100000</span>);<br><span class="hljs-comment">-- 添加多行</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_jobs(JOB_ID, MIN_SALARY, MAX_SALARY) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;AAAA&#x27;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">100000</span>), (<span class="hljs-string">&#x27;AAAAA&#x27;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">100000</span>), (<span class="hljs-string">&#x27;AAAAAA&#x27;</span>, <span class="hljs-number">50000</span>, <span class="hljs-number">100000</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>值和列名要对应。</p></blockquote><h5 id="6-2-修改"><a href="#6-2-修改" class="headerlink" title="6.2 修改"></a>6.2 修改</h5><blockquote><p>修改数据：</p><p>语法：</p><p>UPDATE 表名 SET 列名1 = 值1, 列名2 = 值2, 列名3 = 值3 WHERE 条件;</p><p><a href>注意：</a>修改时如果没有加条件，会修改所有的行。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">UPDATE t_jobs <span class="hljs-keyword">SET</span> JOB_TITLE <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AAAAAAAAAA&#x27;</span>, MIN_SALARY <span class="hljs-operator">=</span> <span class="hljs-number">2000</span> <span class="hljs-keyword">WHERE</span> JOB_ID <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AAA&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h5 id="6-3-删除和清空表"><a href="#6-3-删除和清空表" class="headerlink" title="6.3 删除和清空表"></a>6.3 删除和清空表</h5><blockquote><p>删除数据：</p><p>语法：</p><p>DELETE FROM 表名 WHERE 条件;</p><p><a href>注意：</a>如果没有加条件，会删除表中所有内容。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> t_jobs <span class="hljs-keyword">WHERE</span> Job_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AAA&#x27;</span>;<br></code></pre></div></td></tr></table></figure><blockquote><p>清空表：将整个表数据清空。</p><p>TRUNCATE TABLE 表名;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> t_locations;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>经典面试题：</a></p><p>TRUNCATE 和 DELETE在删除所有数据时的区别？</p><ul><li>DELETE是逐条删除。而TRUNCATE直接删除表本身，然后重新建立一次。</li><li>DELETE删除表会保留自增数字，而TRUNCATE自增重新开始计算。</li></ul></blockquote><h4 id="七、MySQL字段数据类型"><a href="#七、MySQL字段数据类型" class="headerlink" title="七、MySQL字段数据类型"></a>七、MySQL字段数据类型</h4><h5 id="7-1-数据类型概述"><a href="#7-1-数据类型概述" class="headerlink" title="7.1 数据类型概述"></a>7.1 数据类型概述</h5><blockquote><p>字段数据类型大体分为两类：</p><ul><li>不带单引号：数字</li><li>带单引号：<ul><li>日期时间，带单引号，但是格式必须按要求</li><li>字符串，带单引号，格式没有要求</li></ul></li></ul></blockquote><h5 id="7-2-数值类型"><a href="#7-2-数值类型" class="headerlink" title="7.2 数值类型"></a>7.2 数值类型</h5><blockquote><p>int：整数，也有类似于Java中的，此处叫tinyint，smallint，int，bigint</p><p>double：小数</p><p>decimal：小数</p><p><a href>注意：</a>double和decimal也可以限制长度和小数位的长度，例如double(5,2)表示长度5位，小数位2位，范围-999.99~999.99</p></blockquote><h5 id="7-3-日期类型"><a href="#7-3-日期类型" class="headerlink" title="7.3 日期类型"></a>7.3 日期类型</h5><blockquote><p>date：日期，例如：2021-10-10</p><p>time：时间，例如：13:14:15</p><p>datetime：日期时间，例如：2021-10-10 13:14:15</p><p>timestamp：时间戳</p></blockquote><h5 id="7-4-字符串类型"><a href="#7-4-字符串类型" class="headerlink" title="7.4 字符串类型"></a>7.4 字符串类型</h5><blockquote><p>char：定长字符串，例如：char(4)</p><p>varchar：变长字符串，例如：varchar(4)</p><p>blob：二进制</p><p>text：长文本时</p><p><a href>注意：</a>在数据库中，char和varchar使用时一定要指定长度。添加数据时不能超过该长度，超过后会截断。</p><p>char和varchar区别在于，如果使用char，但是添加的内容没有达到长度，后面会自动使用空格填充，varchar则不会。例如上面的长度为4，如果添加内容tom，char类型时，显示tom空格，varchar类型时，显示tom</p><p>所以在项目中，除非知道字段一定会长度固定，才会使用char（性别列），大多数都使用varchar</p></blockquote><h4 id="八、表结构操作"><a href="#八、表结构操作" class="headerlink" title="八、表结构操作"></a>八、表结构操作</h4><h5 id="8-1-表创建"><a href="#8-1-表创建" class="headerlink" title="8.1 表创建"></a>8.1 表创建</h5><blockquote><p>表创建的几个要素：</p><p>1、表名</p><p>2、每一个列的名称，类型</p><p>3、规则（约束）</p></blockquote><blockquote><p>基本语法：</p><p>CREATE TABLE 表名(</p><p>​     列名  类型  约束,</p><p>​     列名  类型  约束,</p><p>​     列名  类型  约束</p><p>) 字符集;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NULL</span>,<br>  create_time datetime<br>) charset<span class="hljs-operator">=</span>utf8;<br></code></pre></div></td></tr></table></figure><h5 id="8-2-表修改"><a href="#8-2-表修改" class="headerlink" title="8.2 表修改"></a>8.2 表修改</h5><blockquote><p>语法：</p><p>ALTER TABLE 表名 操作;</p></blockquote><h6 id="8-2-1-添加列"><a href="#8-2-1-添加列" class="headerlink" title="8.2.1 添加列"></a>8.2.1 添加列</h6><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> product <span class="hljs-keyword">ADD</span> price <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h6 id="8-2-2-修改列"><a href="#8-2-2-修改列" class="headerlink" title="8.2.2 修改列"></a>8.2.2 修改列</h6><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> product MODIFY price <span class="hljs-keyword">DOUBLE</span>;<br></code></pre></div></td></tr></table></figure><h6 id="8-2-3-修改列名"><a href="#8-2-3-修改列名" class="headerlink" title="8.2.3 修改列名"></a>8.2.3 修改列名</h6><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> product CHANGE price pro_price <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></div></td></tr></table></figure><h6 id="8-2-4-删除列"><a href="#8-2-4-删除列" class="headerlink" title="8.2.4 删除列"></a>8.2.4 删除列</h6><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> product <span class="hljs-keyword">DROP</span> pro_price;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>对表的修改操作会受到数据的影响，可能修改不成功。</p><p>例如：一个表中列类型为varchar(20),并且表中有一条记录’abc’，如果修改表，要把该列类型修改成int，会报错。</p><p>建议：先导出表数据，再清空表，然后修改表，最后导入数据。</p></blockquote><h6 id="8-2-5-修改表名"><a href="#8-2-5-修改表名" class="headerlink" title="8.2.5 修改表名"></a>8.2.5 修改表名</h6><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> product RENAME pro;<br></code></pre></div></td></tr></table></figure><h5 id="8-3-删除表"><a href="#8-3-删除表" class="headerlink" title="8.3 删除表"></a>8.3 删除表</h5><blockquote><p>删除表结构。</p><p>语法：DROP TABLE 表名;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> pro;<br></code></pre></div></td></tr></table></figure><h4 id="九、表设计过程中的三范式"><a href="#九、表设计过程中的三范式" class="headerlink" title="九、表设计过程中的三范式"></a>九、表设计过程中的三范式</h4><blockquote><p>范式：是指表设计的规则。</p><p>在理论上来说，表设计可以有五范式，但是实际上达不到，所以一般设计表只需要满足三范式即可。</p></blockquote><blockquote><p>三范式：</p><p>第一范式：域（字段）完整性。列应该是不可再分的。</p><p>第二范式：实体完整性，主键约束。每一行所有的列应该完全依赖于主键。</p><p>第三范式：引用完整性，（外键约束）。只能将另一个表的主键当作外键来引用。</p><p><a href>注意：</a>所有的后面的范式是基于前面的范式的基础上，即第二范式必须先满足第一范式。</p></blockquote><h4 id="十、约束"><a href="#十、约束" class="headerlink" title="十、约束"></a>十、约束</h4><h5 id="10-1-实体完整性约束"><a href="#10-1-实体完整性约束" class="headerlink" title="10.1 实体完整性约束"></a>10.1 实体完整性约束</h5><h6 id="10-1-1-主键"><a href="#10-1-1-主键" class="headerlink" title="10.1.1 主键"></a>10.1.1 主键</h6><blockquote><p>使用primary key，标识该列为主键，不能重复，不能为空。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  create_time datetime<br>);<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product1(<br>  id <span class="hljs-type">INT</span> ,<br>  pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  create_time datetime,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br></code></pre></div></td></tr></table></figure><blockquote><p>当使用多个列同时一起做主键时，还是一个主键，但是必须多列一起做是否重复的判定。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 指定多列同时做主键</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> score1(<br>  stu_id <span class="hljs-type">INT</span>,<br>  cou_id <span class="hljs-type">INT</span>,<br>  socre <span class="hljs-type">INT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(stu_id, cou_id)<br>);<br></code></pre></div></td></tr></table></figure><h6 id="10-1-2-唯一键"><a href="#10-1-2-唯一键" class="headerlink" title="10.1.2 唯一键"></a>10.1.2 唯一键</h6><blockquote><p>当一个表定义时，除了主键外，还有其他的列需要设置唯一性，可以使用关键字UNIQUE。</p><p><a href>注意：</a>主键不仅需要唯一，而且不能为空，但是UNIQUE只管唯一，可以为空，而且可以多行为空，此时需要设置为NOT NULL。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  create_time datetime<br>);<br></code></pre></div></td></tr></table></figure><h6 id="10-1-3-自动增长"><a href="#10-1-3-自动增长" class="headerlink" title="10.1.3 自动增长"></a>10.1.3 自动增长</h6><blockquote><p>在mysql中，int类型可以设置自增。而且需要与主键一起使用，不能单独使用，其他数据库与mysql使用方式不一样。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment,<br>  pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  create_time datetime<br>);<br></code></pre></div></td></tr></table></figure><h5 id="10-2-域完整性"><a href="#10-2-域完整性" class="headerlink" title="10.2 域完整性"></a>10.2 域完整性</h5><blockquote><p>设置单元格的正确性。</p><ul><li>非空， NOT NULL</li><li>默认值，DEFAULT </li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment,<br>  pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  create_time datetime,<br>price <span class="hljs-type">int</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span><br>);<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>即使是int类型，在允许为空的前提下，如果没有设置值，会默认为null，当设置了默认值后，才会使用默认值。</p></blockquote><h5 id="10-3-引用完整性"><a href="#10-3-引用完整性" class="headerlink" title="10.3 引用完整性"></a>10.3 引用完整性</h5><blockquote><p>一个表中外键列必须要引用另一个表中的主键列。</p><p>语法：</p><p>CONSTRAINT fk_t FOREIGN KEY (type_id) REFERENCES pro_type(id)</p><p>type_id是当前表中的外键列</p><p>pro_type(id)是引用的表的名称和对应的主键列</p><p>fk_t是当前表中外键的名称（随意取的，但是不同的表中名称不能重复）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> product(<br> id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY auto_increment,<br> pro_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> type_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br> <span class="hljs-keyword">CONSTRAINT</span> fk_t <span class="hljs-keyword">FOREIGN</span> KEY (type_id) <span class="hljs-keyword">REFERENCES</span> pro_type(id)<br>);<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a>如果表中已经有数据，再想通过修改表的方式建立引用外键关系，可能会报错，建议先删除数据再建立。</p></blockquote><h4 id="十一、权限管理"><a href="#十一、权限管理" class="headerlink" title="十一、权限管理"></a>十一、权限管理</h4><p>11.1 创建用户</p><blockquote><p>语法：</p><p>CREATE USER 用户名 IDENTIFIED by 密码;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> fenghua IDENTIFIED <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h5 id="11-2-授权"><a href="#11-2-授权" class="headerlink" title="11.2 授权"></a>11.2 授权</h5><blockquote><p>语法：GRANT 权限  ON 数据库名.表名 TO 用户名</p><p>SELECT\DELETE\UPDATE\INSERT</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 给与fenghua用户对于companydb数据库所有的表查询权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> companydb.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> fenghua;<br><span class="hljs-comment">-- 给与fenghua用户对于所有库所有的表所有权限</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> fenghua;<br></code></pre></div></td></tr></table></figure><h5 id="11-3-撤销权限"><a href="#11-3-撤销权限" class="headerlink" title="11.3 撤销权限"></a>11.3 撤销权限</h5><blockquote><p>REVOKE 权限 ON 数据库名.表名 FROM 用户名;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 撤销给与的fenghua用户对于companydb数据库所有的表查询权限</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> companydb.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> fenghua;<br></code></pre></div></td></tr></table></figure><h5 id="11-4-删除用户"><a href="#11-4-删除用户" class="headerlink" title="11.4 删除用户"></a>11.4 删除用户</h5><blockquote><p>语法：DROP USER 用户名;</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> fenghua;<br></code></pre></div></td></tr></table></figure><h4 id="十二、视图"><a href="#十二、视图" class="headerlink" title="十二、视图"></a>十二、视图</h4><blockquote><p>视图可以理解为一个虚拟的表，实际上就是将一个复杂的查询语句当作一个变量来使用。</p></blockquote><blockquote><p>语法结构：</p><p>创建视图：</p><p>方式一：CREATE VIEW 视图名 AS 查询语句</p><p>方式二：CREATE OR REPLACE VIEW 视图名 AS 查询语句，此方式的特点是如果该视图已经存在，则替换，如果不存在，则创建。</p></blockquote><blockquote><p>修改视图：</p><p>ALTER VIEW 视图名 AS 查询语句</p></blockquote><blockquote><p>删除视图：</p><p>DROP VIEW 视图名</p></blockquote><blockquote><p><a href>注意：</a>视图仅仅只是一个虚拟的变量（表），对视图的删除（DROP）和修改（ALTER）不影响视图所对应的表。</p></blockquote><blockquote><p>将5.12的复杂查询使用视图完成：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询每个部门大于平均薪资的人数,原来的写法如下</span><br><span class="hljs-keyword">SELECT</span> e.DEPARTMENT_ID, <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">AVG</span>(SALARY) v <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID) t1<br><span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> t1.DEPARTMENT_ID <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> v<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> e.DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 将代码中的子查询使用视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v1<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> DEPARTMENT_ID, <span class="hljs-built_in">AVG</span>(SALARY) v <span class="hljs-keyword">FROM</span> t_employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改原来的代码，使用视图替换</span><br><span class="hljs-keyword">SELECT</span> e.DEPARTMENT_ID, <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> t_employees e <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> <br>v1<br><span class="hljs-keyword">ON</span> e.DEPARTMENT_ID <span class="hljs-operator">=</span> v1.DEPARTMENT_ID <span class="hljs-keyword">WHERE</span> SALARY <span class="hljs-operator">&gt;</span> v<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> e.DEPARTMENT_ID;<br></code></pre></div></td></tr></table></figure><blockquote><p>将原来的行转列使用视图完成：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 原来的sql如下，参考5.13</span><br><span class="hljs-keyword">SELECT</span> STU_NAME,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span>,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;操作系统&#x27;</span>,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数字电路&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;数字电路&#x27;</span><br> <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span><br>s.STU_NAME,<br>sc.DEGREE,<br>c.COU_NAME<br><span class="hljs-keyword">FROM</span><br>student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">ON</span> s.STU_ID <span class="hljs-operator">=</span> sc.STU_ID<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> sc.COU_ID <span class="hljs-operator">=</span> c.COU_ID) t1 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> STU_NAME;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 将上面的3表关联查询创建为一个视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v2 <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>s.STU_NAME,<br>sc.DEGREE,<br>c.COU_NAME<br><span class="hljs-keyword">FROM</span><br>student <span class="hljs-keyword">AS</span> s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> score <span class="hljs-keyword">AS</span> sc <span class="hljs-keyword">ON</span> s.STU_ID <span class="hljs-operator">=</span> sc.STU_ID<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> course <span class="hljs-keyword">AS</span> c <span class="hljs-keyword">ON</span> sc.COU_ID <span class="hljs-operator">=</span> c.COU_ID;<br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 将上面的语句使用视图来完成</span><br><span class="hljs-keyword">SELECT</span> STU_NAME,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;计算机导论&#x27;</span>,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;操作系统&#x27;</span>,<br><span class="hljs-built_in">MAX</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> COU_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数字电路&#x27;</span> <span class="hljs-keyword">THEN</span> DEGREE <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;数字电路&#x27;</span><br> <span class="hljs-keyword">FROM</span><br>v2 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> STU_NAME;<br></code></pre></div></td></tr></table></figure><blockquote><p><a href>注意：</a></p><ul><li>视图相当于一个临时的表（查询结果），但是使用时还是会将原来的查询语句代入运行，所以视图不会存储数据，原表的数据改变了，视图的结果也会改变。</li><li>对查询性能没有任何优化，仅仅是将查询语句变得简单</li><li>视图是可以update修改数据（修改视图数据等同于修改原表数据）的，但是，如果视图的创建语句包含下面的任意一种，则不能update数据：<ul><li>有聚合函数</li><li>使用了distinct</li><li>使用了group by</li><li>使用了having</li><li>使用了union或union all的</li></ul></li></ul></blockquote><h4 id="十三、SQL的分类"><a href="#十三、SQL的分类" class="headerlink" title="十三、SQL的分类"></a>十三、SQL的分类</h4><blockquote><p>DDL：数据定义语言，创建表、数据库等 CREATE\ALTER\DROP</p><p>DCL：数据控制语言，权限，GRANT\REVOKE</p><p>DML：数据操纵语言，增删改，INSERT\UPDATE\DELETE</p><p>DQL：数据查询语言，查询数据，SELECT\GROUP BY\ORDER BY\HAVING</p><p>TPL(TCL)：事务处理语言，处理事务的，COMMIT\ROLLBACK</p></blockquote><h4 id="十四、事务"><a href="#十四、事务" class="headerlink" title="十四、事务"></a>十四、事务</h4><h5 id="14-1-事务的场景"><a href="#14-1-事务的场景" class="headerlink" title="14.1 事务的场景"></a>14.1 事务的场景</h5><blockquote><p>转账。这在项目中应该是一个业务操作（方法）。</p><p>实际上，该业务操作会在数据库中形成两个修改语句，即修改A账户减钱，修改B账户加钱。</p><p>如果在修改A账户结束后，在修改B账户时出现了异常，没有成功，那么就形成了A账户减钱了，但是B账户没有加钱的局面，是不合理的。</p><p>此时，需要使用到事务。</p></blockquote><h5 id="14-2-事务的概念"><a href="#14-2-事务的概念" class="headerlink" title="14.2 事务的概念"></a>14.2 事务的概念</h5><blockquote><p>事务是由一个或多个sql语句组成的一个原子操作。</p><p>在一个事务中，只有所有的SQL都执行成功，才成功，如果有一个sql执行失败，则全部失败。</p></blockquote><h5 id="14-3-简单原理"><a href="#14-3-简单原理" class="headerlink" title="14.3 简单原理"></a>14.3 简单原理</h5><blockquote><p>上面的案例在数据库中执行，如果使用了事务（即不自动提交），此时所有的修改操作都是在缓存中执行，如果全部执行成功，则会将结果写入到数据库（同步数据）（提交事务），如果有任何一个不能执行成功，则不写入到数据库，撤销操作（回顾事务）。</p></blockquote><h5 id="14-4-具体操作"><a href="#14-4-具体操作" class="headerlink" title="14.4 具体操作"></a>14.4 具体操作</h5><blockquote><p><a href>注意：</a>在数据库中，默认是自动提交事务，即每一条sql语句都默认为是一个独立的事务，所以该sql执行成功后，会自动提交到数据库。</p><p>所以，如果需要使用事务，首先应该关闭事务的自动提交，<a href>注意：</a>事务执行完毕后需要还原自动提交的设置。</p></blockquote><blockquote><p>事务提交：</p><p>COMMIT，提交事务，将缓存数据同步（写入）到数据库。</p><p>事务回顾：（撤销）</p><p>ROLLBACK，回滚事务，撤销之前的数据库操作。</p></blockquote><blockquote><p>设置自动提交参数：</p><p>SET AUTOCOMMIT = 0; 关闭自动提交</p><p>SET AUTOCOMMIT = 1; 开启自动提交</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@autocommit</span>; <span class="hljs-comment">-- 查看系统是否自动提交 1：自动提交 0：不自动提交</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-comment">-- 修改为不自动提交</span><br><span class="hljs-comment">-- 减钱</span><br>UPDATE account <span class="hljs-keyword">SET</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> account <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1001&#x27;</span>;<br><span class="hljs-comment">-- 加钱</span><br>UPDATE account <span class="hljs-keyword">SET</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> account <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1002&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>; <span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-comment">-- 还原设置，修改为自动提交</span><br></code></pre></div></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-comment">-- 修改为不自动提交</span><br><span class="hljs-comment">-- 减钱</span><br>UPDATE account <span class="hljs-keyword">SET</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> account <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1001&#x27;</span>;<br><span class="hljs-comment">-- 加钱</span><br>UPDATE account <span class="hljs-keyword">SET</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> account <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1002&#x27;</span>;<br><span class="hljs-keyword">ROLLBACK</span>; <span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-comment">-- 还原设置，修改为自动提交</span><br></code></pre></div></td></tr></table></figure><h5 id="14-5-事务的四大特征"><a href="#14-5-事务的四大特征" class="headerlink" title="14.5 事务的四大特征"></a>14.5 事务的四大特征</h5><blockquote><p>A（原子性）：事务是一个整体，要么全部成功，要么全部失败。</p><p>C（一致性）：表示事务操作过程中，数据的状态必须是一致的。有一条语句失败，其他的全部回滚。</p><p>I（隔离性）：事务操作之间是相互隔离的，只能看到事务操作之前的状态或者之后的状态，不能看到事务操作过程中的状态。</p><p>D（持久性）：事务执行完成后，结果就持久的写入了数据库。</p></blockquote><blockquote><p><a href>记忆的小技巧:</a>一元九个。（一原久隔）</p></blockquote><h5 id="14-6-事务的隔离性的理解"><a href="#14-6-事务的隔离性的理解" class="headerlink" title="14.6 事务的隔离性的理解"></a>14.6 事务的隔离性的理解</h5><blockquote><p>事务与事务之间应该相互隔离。</p><p>安全和性能：如果涉及到同一个数据时，事务与事务之间安全和性能该如何取舍。</p></blockquote><h5 id="14-7-事务的隔离级别"><a href="#14-7-事务的隔离级别" class="headerlink" title="14.7 事务的隔离级别"></a>14.7 事务的隔离级别</h5><blockquote><ul><li>读未提交，一个事务能够读取另一个事务的未提交的数据。会引发脏读、虚读（不可重复读）、幻读问题</li><li>读已提交，一个事务能够读取另一个事务中的已提交的数据。会引发虚度、幻读问题</li><li>可重复读，只会出现幻读问题</li><li>可串行化，事务一个一个执行，性能会降到极低，安全性上升到极高</li></ul></blockquote><blockquote><p><a href>注意：</a>上面的内容从上往下，性能越来越差，安全性越来越高，在项目中需要在性能和安全性上做一个取舍。所以基本不可能设置级别为读未提交或者可串行化。</p></blockquote><blockquote><p>在数据库中的事务的隔离级别的设置上：</p><p>主流的数据库都默认设置为读已提交。但是唯独MySQL默认设置的可重复读。</p></blockquote><h5 id="14-8-脏读、不可重复读、幻读"><a href="#14-8-脏读、不可重复读、幻读" class="headerlink" title="14.8 脏读、不可重复读、幻读"></a>14.8 脏读、不可重复读、幻读</h5><blockquote><p>脏读：一个事务能读取另一个事务未提交的数据。脏读不会被任何数据提供方允许，所以出现脏读一般会认为是系统的BUG，需要改动。</p></blockquote><blockquote><p>不可重复读，也叫虚读。一个事务中，两次读取的数据不一致。此时，对于用户来说，可能会产生一些影响，但是对于数据提供方来说，安全没有影响。所以介于安全性和性能上的考虑，大多数主流数据库选择的就是此隔离级别。</p></blockquote><blockquote><p>幻读。一个事务中，两次读取的数据的条数不一致（增加或者减少）。此时，对于用户来说，可能会产生一些影响，但是对于数据提供方来说，安全没有影响。此隔离级别也可以选择，与上一种隔离级别不管是性能还是安全相差不大。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RBAC角色权限系统</title>
    <link href="/myblog/2021/10/22/RBAC%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/myblog/2021/10/22/RBAC%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="RBAC角色权限系统"><a href="#RBAC角色权限系统" class="headerlink" title="RBAC角色权限系统"></a>RBAC角色权限系统</h3><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><blockquote><p>RBAC(Role Based Access Control) 基于角色的访问控制。</p><p>用户—-角色—-权限</p><p>用户的权限是基于角色，用户角色改变会改变相应的权限。</p></blockquote><h4 id="二、基础用户角色权限设计"><a href="#二、基础用户角色权限设计" class="headerlink" title="二、基础用户角色权限设计"></a>二、基础用户角色权限设计</h4><blockquote><p>用户与角色–多对多</p><p>角色与权限–多对多</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-comment">/* Table: auths                                                 */</span><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> auths<br>(<br>   auth_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>   auth_name            <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   auth_path            <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   parent_id            <span class="hljs-type">int</span>,<br>   <span class="hljs-keyword">primary</span> key (auth_id)<br>);<br><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-comment">/* Table: role_auth                                             */</span><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> role_auth<br>(<br>   role_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>   auth_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>   <span class="hljs-keyword">primary</span> key (role_id, auth_id)<br>);<br><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-comment">/* Table: roles                                                 */</span><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> roles<br>(<br>   role_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>   role_name            <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   <span class="hljs-keyword">primary</span> key (role_id)<br>);<br><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-comment">/* Table: user_role                                             */</span><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user_role<br>(<br>   role_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>   user_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>   <span class="hljs-keyword">primary</span> key (role_id, user_id)<br>);<br><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-comment">/* Table: users                                                 */</span><br><span class="hljs-comment">/*==============================================================*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users<br>(<br>   user_id              <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>   username             <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   truename             <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   phone                <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   pwd                  <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>   <span class="hljs-keyword">primary</span> key (user_id)<br>);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> role_auth <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_Relationship_5 <span class="hljs-keyword">foreign</span> key (auth_id)<br>      <span class="hljs-keyword">references</span> auths (auth_id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> restrict <span class="hljs-keyword">on</span> update restrict;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> role_auth <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_Relationship_6 <span class="hljs-keyword">foreign</span> key (role_id)<br>      <span class="hljs-keyword">references</span> roles (role_id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> restrict <span class="hljs-keyword">on</span> update restrict;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user_role <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_Relationship_2 <span class="hljs-keyword">foreign</span> key (user_id)<br>      <span class="hljs-keyword">references</span> users (user_id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> restrict <span class="hljs-keyword">on</span> update restrict;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> user_role <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> FK_Relationship_3 <span class="hljs-keyword">foreign</span> key (role_id)<br>      <span class="hljs-keyword">references</span> roles (role_id) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> restrict <span class="hljs-keyword">on</span> update restrict;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/myblog/2021/10/22/Mybatis/"/>
    <url>/myblog/2021/10/22/Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h4 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h4><blockquote><p> 是一个持久化框架。是一个半自动的ORM框架。前面的版本叫ibatis，后面迁移到google code时更名为Mybatis，现在已经迁移到github上。</p></blockquote><blockquote><p>持久化：将一个转瞬即逝的对象保存下来。在软件行业中，持久化一般指将内存中的数据保存到文件（数据库文件）中。</p></blockquote><blockquote><p>ORM：object relative mapping对象关系映射。对象：Java实体类对象，关系：关系型数据库。映射：关联。</p><p>简单来说，就是指将数据库中的某一个表，与Java实体类相关联，表中字段与实体类的属性相关联。</p></blockquote><blockquote><p>半自动：针对全自动而言的，是指在操作数据库时，需要编写相应的SQL语句，指定相应的映射关系，结果会自动映射。</p></blockquote><blockquote><p>增删改：sql语句和参数</p><p>查询：sql语句和参数、封装结果集</p></blockquote><h4 id="二、初体验"><a href="#二、初体验" class="headerlink" title="二、初体验"></a>二、初体验</h4><h5 id="2-1-基本流程"><a href="#2-1-基本流程" class="headerlink" title="2.1 基本流程"></a>2.1 基本流程</h5><blockquote><p>1、导入相关依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.40<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2、编写核心配置文件</p></blockquote><p><code>mybatisCfg.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--  可以配置多个数据库连接环境,  default表示默认使用名为development --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        配置一个数据库连接环境，起名为development--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--            事务处理使用JDBC的事务处理方式--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><span class="hljs-comment">&lt;!--            数据源使用mybatis自带的连接池--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--                数据库连接四要素--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/players?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    关联所有的mapper文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!--        resources是路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/PlayersMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>3、编写mapper文件</p></blockquote><p><code>PlayersMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--空间命名为a--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    查询语句名称为b，返回结果封装到一个Long类型的变量中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span><br>        SELECT COUNT(1) FROM players<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>4、编写代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// 执行操作</span><br>        <span class="hljs-comment">// 读取配置文件</span><br>        <span class="hljs-keyword">final</span> InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatisCfg.xml&quot;</span>);<br>        <span class="hljs-comment">// 创建一个工厂</span><br>        SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        <span class="hljs-comment">// 创建连接sqlSession，打开连接</span><br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">// 通过连接调用sql</span><br>        Long count = session.selectOne(<span class="hljs-string">&quot;count&quot;</span>, Long.class);<br>        System.out.println(count);<br>        <span class="hljs-comment">// 关闭连接</span><br>        session.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-导入log4j日志"><a href="#2-2-导入log4j日志" class="headerlink" title="2.2 导入log4j日志"></a>2.2 导入log4j日志</h5><blockquote><p>1、导入log4j的依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2、在resources根目录下添加log4j配置文件</p><p><a href>注意：</a>配置文件名一定要叫log4j</p></blockquote><p><code>log4j.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># ROOTER</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,CONSOLE,FILE</span><br><span class="hljs-comment"># CONSOLE</span><br><span class="hljs-meta">log4j.appender.CONSOLE</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.CONSOLE.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="hljs-string">%-d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %-5p %-20c %x %m%n</span><br></code></pre></td></tr></table></figure><h4 id="三、映射文件解析"><a href="#三、映射文件解析" class="headerlink" title="三、映射文件解析"></a>三、映射文件解析</h4><blockquote><p>Mybatis操作并不一定需要实体类。</p><p>实体类的作用：</p><ul><li>作为参数传递的封装</li><li>作为查询结果集内容的封装</li></ul></blockquote><h5 id="3-1-namespace的作用"><a href="#3-1-namespace的作用" class="headerlink" title="3.1 namespace的作用"></a>3.1 namespace的作用</h5><blockquote><p>当Mapper.xml文件中的方法id不一致时，namespace作用不明显，但是一般情况下，Mapper.xml中的方法id会相同，例如save，delete等，所以需要通过命名空间来区分。命名空间的规则，通常叫做XXXDAO</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--空间命名为a--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;PlayersDAO&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    查询语句名称为b，返回结果封装到一个Long类型的变量中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span><br>        SELECT COUNT(1) FROM players<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// 执行操作</span><br>        <span class="hljs-comment">// 读取配置文件</span><br>        <span class="hljs-keyword">final</span> InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatisCfg.xml&quot;</span>);<br>        <span class="hljs-comment">// 创建一个工厂</span><br>        SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        <span class="hljs-comment">// 创建连接sqlSession，打开连接</span><br>        SqlSession session = factory.openSession();<br>        <span class="hljs-comment">// 通过连接调用sql</span><br>        Long count = session.selectOne(<span class="hljs-string">&quot;PlayersDAO.count&quot;</span>, Long.class);<br>        System.out.println(count);<br>        <span class="hljs-comment">// 关闭连接</span><br>        session.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-基本的增删改"><a href="#3-2-基本的增删改" class="headerlink" title="3.2 基本的增删改"></a>3.2 基本的增删改</h5><h6 id="3-2-1-删除"><a href="#3-2-1-删除" class="headerlink" title="3.2.1 删除"></a>3.2.1 删除</h6><blockquote><p><a href>注意：</a>在mybatis中，增删改操作必须提交事务。</p><p>在mybatis增删改操作中，默认会将自动提交事务关闭，需要手动提交，当提交后会重置事务的自动提交。应该使用close方法关闭连接，会将连接关闭后归还到连接池。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>    DELETE FROM recharge_type WHERE id = 4<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-comment">// 执行操作</span><br>    <span class="hljs-comment">// 读取配置文件</span><br>    <span class="hljs-keyword">final</span> InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatisCfg.xml&quot;</span>);<br>    <span class="hljs-comment">// 创建一个工厂</span><br>    SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>    <span class="hljs-comment">// 创建连接sqlSession，打开连接</span><br>    SqlSession session = factory.openSession();<br>    <span class="hljs-keyword">return</span> session;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    SqlSession session = getSqlSession();<br>    <span class="hljs-comment">// 获得影响的行数</span><br>    <span class="hljs-keyword">int</span> count = session.delete(<span class="hljs-string">&quot;RechargeTypeDAO.delete&quot;</span>);<br>    System.out.println(count);<br>    <span class="hljs-comment">// 提交事务</span><br>    session.commit();<br>    <span class="hljs-comment">// 关闭连接</span><br>    session.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>传参：通过<code>#&#123;&#125;</code>来进行传参，相当于?传参。</p><p>有如下疑问：</p><p>1、为什么不能使用<code>$&#123;&#125;</code></p><p>2、如果要传入多个参数如何处理</p><p>3、<code>#&#123;&#125;</code>中的变量名没有起到作用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span>    DELETE FROM recharge_type WHERE id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;    SqlSession session = getSqlSession();    <span class="hljs-comment">// 获得影响的行数    int count = session.delete(&quot;RechargeTypeDAO.delete&quot;, id);    System.out.println(count);    // 提交事务    session.commit();    // 关闭连接    session.close();&#125;</span><br></code></pre></td></tr></table></figure><h6 id="3-2-2-添加"><a href="#3-2-2-添加" class="headerlink" title="3.2.2 添加"></a>3.2.2 添加</h6><blockquote><p>问题解答：</p><p>1、为什么不能使用<code>$&#123;&#125;</code></p><ul><li>参考下面的经典面试题</li></ul><p>2、如果要传入多个参数如何处理</p><ul><li>可以使用map将多个参数封装，将key对应配置文件中的变量名</li><li>使用实体类，将实体类中的属性名称与配置文件中的变量名对应</li></ul><p>3、<code>#&#123;&#125;</code>中的变量名没有起到作用</p><ul><li>变量名用来对应map中的key</li><li>变量名用来对应实体类中的属性名</li></ul></blockquote><blockquote><p>使用map来传参：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span>    INSERT INTO recharge_type(`name`, rate) VALUES(#&#123;name&#125;, #&#123;rate&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String name, <span class="hljs-keyword">double</span> rate)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;    SqlSession session = getSqlSession();    <span class="hljs-comment">// 因为只能传递一个参数，所以将多个参数，构造成一个map    Map map = new HashMap();    // key必须与mapper.xml中的变量名对应    map.put(&quot;name&quot;, name);    map.put(&quot;rate&quot;, rate);    // 获得影响的行数    int count = session.insert(&quot;RechargeTypeDAO.save&quot;, map);    System.out.println(count);    // 提交事务    session.commit();    // 关闭连接    session.close();&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用实体类传参：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RechargeType</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Double rate;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span>    INSERT INTO recharge_type(`name`, rate) VALUES(#&#123;name&#125;, #&#123;rate&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(RechargeType type)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;    SqlSession session = getSqlSession();    <span class="hljs-comment">// 获得影响的行数    int count = session.insert(&quot;RechargeTypeDAO.save&quot;, type);    System.out.println(count);    // 提交事务    session.commit();    // 关闭连接    session.close();&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href>经典面试题：</a></p><p>在Mybatis框架中<code>#</code>和<code>$</code>的区别？</p><p>1、<code>#</code>相当于预编译语句（PreparedStatement，占位符?），而<code>$</code>相当于拼接sql语句。所以<code>#</code>能够防止sql注入攻击，而<code>$</code>有风险。</p><p>2、当只需要传入一个参数时，使用<code>#</code>，变量名可以随意。但是如果使用<code>$</code>，即使一个参数，也需要将其封装到map中或者实体类中，并将变量名与map中key或者实体类中属性对应。(动态sql中的属性名称必须包含在一个map中或者实体类中)</p><p><a href>注意：</a>在一些特殊情况下可能使用<code>$</code>，例如，需要列名动态使用。</p></blockquote><h6 id="3-2-3-修改操作"><a href="#3-2-3-修改操作" class="headerlink" title="3.2.3 修改操作"></a>3.2.3 修改操作</h6><blockquote><p>使用实体类传入参数：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span>    UPDATE recharge_type SET `name` = #&#123;name&#125;, rate = #&#123;rate&#125; WHERE id =  #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(RechargeType type)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;    SqlSession session = getSqlSession();    <span class="hljs-comment">// 获得影响的行数    int count = session.update(&quot;RechargeTypeDAO.update&quot;, type);    System.out.println(count);    // 提交事务    session.commit();    // 关闭连接    session.close();&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-3-基本查询操作"><a href="#3-3-基本查询操作" class="headerlink" title="3.3 基本查询操作"></a>3.3 基本查询操作</h5><h6 id="3-3-1-属性名与字段名相同时"><a href="#3-3-1-属性名与字段名相同时" class="headerlink" title="3.3.1 属性名与字段名相同时"></a>3.3.1 属性名与字段名相同时</h6><blockquote><p>当实体类属性名与表的字段名相同时，可以直接使用实体类封装查询结果。</p><p><a href>注意：</a>resultType是写查询结果每一行记录所封装的实体类型。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.qf.day52.entity.RechargeType&quot;</span>&gt;</span>    SELECT * FROM recharge_type<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.qf.day52.entity.RechargeType&quot;</span>&gt;</span>    SELECT * FROM recharge_type where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;    SqlSession session = getSqlSession();    <span class="hljs-comment">// 获取结果集    List&lt;RechargeType&gt; list = session.selectList(&quot;RechargeTypeDAO.findAll&quot;);    System.out.println(list);    // 关闭连接    session.close();&#125;public static void findById(Integer id) throws Exception&#123;    SqlSession session = getSqlSession();    // 获取结果集    RechargeType type = session.selectOne(&quot;RechargeTypeDAO.findById&quot;, id);    System.out.println(type);    // 关闭连接    session.close();&#125;</span><br></code></pre></td></tr></table></figure><h6 id="3-3-2-属性名与字段名不相同时"><a href="#3-3-2-属性名与字段名不相同时" class="headerlink" title="3.3.2 属性名与字段名不相同时"></a>3.3.2 属性名与字段名不相同时</h6><blockquote><p>当属性名与字段名不一致时：</p><ul><li>如果是某几个属性不一致，那么能够查询出对象，但是该对象中不对应的属性为null。</li><li>如果所有的属性都不一致，查询单个对象时，对象为null，查询一个集合时，集合数量有效，但是每个元素都为null。</li></ul></blockquote><blockquote><p>可以使用resultMap，结果集映射来将查询的字段名与实体类的属性名相互对应。类似dbutils中的ResultSetHandler。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    创建一个名为typeMap的实体类与表字段的对应关系，type表示实体类的全路径--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;typeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day52.entity.RechargeType&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--        id用来封装主键，property表示属性名称，column表示查询结果集的列名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-comment">&lt;!--        result用来封装其他的属性--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rate&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_rate&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;typeMap&quot;</span>&gt;</span>    SELECT * FROM recharge_type<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;typeMap&quot;</span>&gt;</span>    SELECT * FROM recharge_type where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href>经典面试题：</a></p><p>resultType和resultMap的区别？</p><ul><li>resultType是查询时直接使用实体类以反射的方式封装结果集</li><li>resultMap是查询时使用自定义的映射关系来封装结果集</li></ul></blockquote><h5 id="3-4-typeAlias用法"><a href="#3-4-typeAlias用法" class="headerlink" title="3.4 typeAlias用法"></a>3.4 typeAlias用法</h5><blockquote><p>如果在配置中，觉得写全类名比较麻烦，可以使用别名：</p></blockquote><p><code>mybatisCfg.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-comment">&lt;!--        单独给某个类起别名--&gt;</span><span class="hljs-comment">&lt;!--        &lt;typeAlias type=&quot;com.qf.day52.entity.RechargeType&quot; alias=&quot;r&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><span class="hljs-comment">&lt;!--        给com.qf.day52.entity包中的所有的类其别名，别名为类名--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.qf.day52.entity&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-comment">&lt;!--  可以配置多个数据库连接环境,  default表示默认使用名为development --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>...    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><span class="hljs-comment">&lt;!--    关联所有的mapper文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>...       <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>然后在Mapper.xml中，就可以使用别名：</p><p>下面的type本来应该使用全限定名，但是上面配置了类名为别名，不需要使用包名，所以可以直接写类名。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;typeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;RechargeType&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--        id用来封装主键，property表示属性名称，column表示查询结果集的列名--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-comment">&lt;!--        result用来封装其他的属性--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rate&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_rate&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-5-sql标签和include标签的使用"><a href="#3-5-sql标签和include标签的使用" class="headerlink" title="3.5 sql标签和include标签的使用"></a>3.5 sql标签和include标签的使用</h5><blockquote><p>可以使用sql标签将重复的sql代码使用变量保存，然后在使用的地方使用include标签来代替：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;typeColumns&quot;</span>&gt;</span>    id,type_name,type_rate<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;typeMap&quot;</span>&gt;</span>    SELECT    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;typeColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>    FROM recharge_type<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;typeMap&quot;</span>&gt;</span>    SELECT    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;typeColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>    FROM recharge_type where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="四、DAO接口的使用"><a href="#四、DAO接口的使用" class="headerlink" title="四、DAO接口的使用"></a>四、DAO接口的使用</h4><blockquote><p>直接使用session中的方法的不足之处：</p><ul><li>方法id是字符串，没有提示和检查，容易写错，</li><li>参数没有提示和检查</li><li>返回值也没有提示和检查</li></ul></blockquote><blockquote><p>为了解决上面的不足之处，mybatis中提供了使用接口来限定方法名称、参数和返回值。</p><p>原理是使用反射。</p><p><a href>注意：</a><a href>注意：</a><a href>注意：</a></p><p>Mapper.xml中的namespace名称应该是接口名称的全限定名。方法的id应该与接口的方法名称一致。方法的参数和返回值应该也要一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RechargeTypeDAO</span> </span>&#123;    <span class="hljs-function">List&lt;RechargeType&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;    <span class="hljs-function">RechargeType <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">save</span><span class="hljs-params">(RechargeType type)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(RechargeType type)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">count</span><span class="hljs-params">()</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day52.dao.RechargeTypeDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span>        SELECT COUNT(1) FROM recharge_type    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span>        DELETE FROM recharge_type WHERE id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span>        INSERT INTO recharge_type(`type_name`, type_rate) VALUES(&#x27;$&#123;name&#125;&#x27;, $&#123;rate&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span>        UPDATE recharge_type SET `type_name` = #&#123;name&#125;, type_rate = #&#123;rate&#125; WHERE id =  #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-comment">&lt;!--    &lt;select id=&quot;findAll&quot; resultType=&quot;com.qf.day52.entity.RechargeType&quot;&gt;--&gt;</span><span class="hljs-comment">&lt;!--        SELECT * FROM recharge_type--&gt;</span><span class="hljs-comment">&lt;!--    &lt;/select&gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;select id=&quot;findById&quot; resultType=&quot;com.qf.day52.entity.RechargeType&quot;&gt;--&gt;</span><span class="hljs-comment">&lt;!--        SELECT * FROM recharge_type where id = #&#123;id&#125;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;/select&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--    创建一个名为typeMap的实体类与表字段的对应关系，type表示实体类的全路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;typeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;RechargeType&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--        id用来封装主键，property表示属性名称，column表示查询结果集的列名--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-comment">&lt;!--        result用来封装其他的属性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rate&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_rate&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;typeColumns&quot;</span>&gt;</span>        id,type_name,type_rate    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;typeMap&quot;</span>&gt;</span>        SELECT         <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;typeColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>         FROM recharge_type    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;typeMap&quot;</span>&gt;</span>        SELECT        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;typeColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>         FROM recharge_type where id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDAO1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception</span>&#123;        <span class="hljs-comment">// 执行操作        // 读取配置文件        final InputStream inputStream = Resources.getResourceAsStream(&quot;mybatisCfg.xml&quot;);        // 创建一个工厂        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);        // 创建连接sqlSession，打开连接        SqlSession session = factory.openSession();        return session;    &#125;    public static void getCount() throws Exception&#123;        final SqlSession session = getSqlSession();        // 通过接口，反射一个具体实现类对象        final RechargeTypeDAO rechargeTypeDAO = session.getMapper(RechargeTypeDAO.class);        // 调用方法        final long count = rechargeTypeDAO.count();        System.out.println(count);        session.close();    &#125;    public static void delete(Integer id) throws Exception&#123;        final SqlSession session = getSqlSession();        // 通过接口，反射一个具体实现类对象        final RechargeTypeDAO rechargeTypeDAO = session.getMapper(RechargeTypeDAO.class);        final int delete = rechargeTypeDAO.delete(11);        System.out.println(delete);        session.commit();        session.close();    &#125;    public static void save(RechargeType type) throws Exception&#123;        final SqlSession session = getSqlSession();        // 通过接口，反射一个具体实现类对象        final RechargeTypeDAO rechargeTypeDAO = session.getMapper(RechargeTypeDAO.class);        final int save = rechargeTypeDAO.save(type);        System.out.println(save);        session.commit();        session.close();    &#125;    public static void update(RechargeType type) throws Exception&#123;        final SqlSession session = getSqlSession();        // 通过接口，反射一个具体实现类对象        final RechargeTypeDAO rechargeTypeDAO = session.getMapper(RechargeTypeDAO.class);        final int update = rechargeTypeDAO.update(type);        System.out.println(update);        session.commit();        session.close();    &#125;    public static void findAll() throws Exception&#123;        final SqlSession session = getSqlSession();        // 通过接口，反射一个具体实现类对象        final RechargeTypeDAO rechargeTypeDAO = session.getMapper(RechargeTypeDAO.class);        final List&lt;RechargeType&gt; list = rechargeTypeDAO.findAll();        System.out.println(list);        session.close();    &#125;    public static void findById(Integer id) throws Exception&#123;        final SqlSession session = getSqlSession();        // 通过接口，反射一个具体实现类对象        final RechargeTypeDAO rechargeTypeDAO = session.getMapper(RechargeTypeDAO.class);        final RechargeType rechargeType = rechargeTypeDAO.findById(1);        System.out.println(rechargeType);        session.close();    &#125;    public static void main(String[] args) throws Exception&#123;        findById(1);    &#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="五、关联查询-难点"><a href="#五、关联查询-难点" class="headerlink" title="五、关联查询[难点]"></a>五、关联查询<code>[难点]</code></h4><h5 id="5-1-表之间的关系"><a href="#5-1-表之间的关系" class="headerlink" title="5.1 表之间的关系"></a>5.1 表之间的关系</h5><blockquote><p>表之间的关系：</p><p>一对一（one-to-one）：两个表之间数据是一一对应的关系。</p><ul><li>一般情况下，一对一的关系可以直接放到一张表中。</li><li>但是如果两张表访问的频率相差比较大，且两边表的列数都比较多，可以拆分，例如：基本信息表和详细信息表。</li><li>由于是一一对应的关系，所以外键建立在任何一方都可以。</li></ul><p>一对多（多对一）(one-to-many/many-to-one)：例如：班级和学生</p><ul><li>一个班级有多个学生，而一个学生只会属于一个班级。</li><li>班级是一方，学生是多方。</li><li>将外键设置在多方。</li></ul><p>多对多（many-to-many）：例如：学生和课程</p><ul><li>一个学生对应多门课程，一门课程对应多个学生</li><li>多对多关系需要建立一张中间表，以两个主键同时作为外键。</li></ul></blockquote><h5 id="5-2-多对一查询（一对一）"><a href="#5-2-多对一查询（一对一）" class="headerlink" title="5.2 多对一查询（一对一）"></a>5.2 多对一查询（一对一）</h5><blockquote><p>多对一时，在多方有外键，意味着可以在多方使用对象来描述该外键。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookType</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;&#125;<span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String author;    <span class="hljs-keyword">private</span> String desc;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> BookType type;    <span class="hljs-keyword">private</span> String imgPath;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>联表查询，封装关联数据有3种方式：</p></blockquote><h6 id="5-2-1-直接使用association"><a href="#5-2-1-直接使用association" class="headerlink" title="5.2.1 直接使用association"></a>5.2.1 直接使用association</h6><blockquote><p><a href>注意：</a>javaType不要写出jdbcType</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-comment">&lt;!--        单个对象的关联，javaType是指实体类的类型--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.qf.day53.entity.BookType&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_name&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>    SELECT    b.id,    b.`name`,    b.author,    b.book_desc,    b.create_time,    b.img_path,    t.id type_id,    t.`name` type_name    FROM    books AS b    INNER JOIN book_type AS t ON b.type_id = t.id<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-2-2-在association中使用resultMap"><a href="#5-2-2-在association中使用resultMap" class="headerlink" title="5.2.2 在association中使用resultMap"></a>5.2.2 在association中使用resultMap</h6><blockquote><p><a href>注意：</a></p><ul><li>如果在Mapper.xml中写的名称，只会在当前的xml文件中查找，如果需要引用其他xml中的名称，需要写上其他xml的namespace。</li><li>下面的案例中，book_type表中列名为id,name，而books表中也有id和name，所以给book_type表的字段起了别名，但是就无法对应该表中配置的resultMap，此时可以加上前缀(columnPrefix)</li></ul></blockquote><p><code>BookTypeMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookTypeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.BookType&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;bookTypeMap&quot;</span>&gt;</span>        select id, name from book_type    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>BooksMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-comment">&lt;!--        单个对象的关联， javaType是指实体类的类型--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.qf.day53.entity.BookType&quot;</span>                     <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO.bookTypeMap&quot;</span> <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;type_&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>        SELECT            b.id,            b.`name`,            b.author,            b.book_desc,            b.create_time,            b.img_path,            t.id type_id,            t.`name` type_name        FROM            books AS b        INNER JOIN book_type AS t ON b.type_id = t.id    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-2-3-在association中使用select"><a href="#5-2-3-在association中使用select" class="headerlink" title="5.2.3 在association中使用select"></a>5.2.3 在association中使用select</h6><blockquote><p>可以将联表查询变成多个单表查询。使用select，会在封装外键对象时通过另一个sql去查询该外键对象。</p></blockquote><p><code>BookTypeMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookTypeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.BookType&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;bookTypeMap&quot;</span>&gt;</span>        select id, name from book_type where id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>BookMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-comment">&lt;!--        type对象中的数据需要通过com.qf.day53.dao.BookTypeDAO.findById语句去查询才有，而且需要将外键type_id列的值传递过去作为参数--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO.findById&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap1&quot;</span>&gt;</span>        select * from books    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-3-一对多查询（多对多）"><a href="#5-3-一对多查询（多对多）" class="headerlink" title="5.3 一对多查询（多对多）"></a>5.3 一对多查询（多对多）</h5><h6 id="5-3-1-一对多查询"><a href="#5-3-1-一对多查询" class="headerlink" title="5.3.1 一对多查询"></a>5.3.1 一对多查询</h6><blockquote><p>当在一方实现关联时，需要在一方使用一个集合。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookType</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    List&lt;Books&gt; booksList;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookTypeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.BookType&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;booksList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;bookTypeMap&quot;</span>&gt;</span>        SELECT            b.id book_id,            b.`name` book_name,            b.author,            b.book_desc,            b.create_time,            b.img_path,            t.id,            t.`name`        FROM            books AS b        INNER JOIN book_type AS t ON b.type_id = t.id    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href>经典面试题：</a></p><p>association和collection的区别：</p><ul><li>association关联对应实体类的属性为一个对象。而collection关联对应实体类的属性为一个集合。</li></ul><p>javaType和ofType的区别：</p><ul><li>javaType指当前属性的类型。而ofType一般针对于集合，对应集合中的元素的类型。</li></ul></blockquote><blockquote><p>collection也可以引用其他的resultMap或者使用select。</p></blockquote><blockquote><p>使用select：</p></blockquote><p><code>BookTypeMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookTypeMap1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.BookType&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;booksList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO.findAllByTypeId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;bookTypeMap1&quot;</span>&gt;</span>        select id, name from book_type    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>BooksMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAllByTypeId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>        select * from books where type_id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="5-3-2-多对多查询"><a href="#5-3-2-多对多查询" class="headerlink" title="5.3.2 多对多查询"></a>5.3.2 多对多查询</h6><blockquote><p>一般情况下，多对多会有一张中间表，但是该中间表一般不需要创建实体类的对象，只需要在两张表对应的实体类中添加List类型的属性即可。学生和课程：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String sex;    List&lt;Course&gt; courseList;&#125;<span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Course</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    List&lt;Student&gt; studentList;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDAO</span> </span>&#123;    <span class="hljs-function">Student <span class="hljs-title">findById</span><span class="hljs-params">(Integer id)</span></span>;    <span class="hljs-function">Student <span class="hljs-title">findById1</span><span class="hljs-params">(Integer id)</span></span>;&#125;<br></code></pre></td></tr></table></figure><p><code>StudentMapper.xml</code></p><blockquote><p>使用collection中的select封装：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.StudentDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Student&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qf.day53.dao.CoursesDAO.findAllByStudentId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentMap&quot;</span>&gt;</span>        select id, name, sex from student where id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>CoursesMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.CoursesDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;coursesMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Course&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAllByStudentId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;coursesMap&quot;</span>&gt;</span>        SELECT        c.id,        c.`NAME`        FROM        courses AS c        INNER JOIN scores AS s ON c.id = s.cou_id        WHERE        s.stu_id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用collection直接封装：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.StudentDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentMap1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Student&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Course&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentMap1&quot;</span>&gt;</span>        SELECT        c.id course_id,        c.`NAME` course_name,        s.id,        s.`NAME`,        s.sex        FROM        courses AS c        INNER JOIN scores AS sc ON c.id = sc.cou_id        INNER JOIN student AS s ON sc.stu_id = s.id        WHERE        sc.stu_id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果中间表有其他的字段，例如上面的学生、课程对应的中间表中有成绩字段。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String sex;    List&lt;Score&gt; scoreList;&#125;<span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Score</span> </span>&#123;    <span class="hljs-keyword">private</span> Student student;    <span class="hljs-keyword">private</span> Course course;    <span class="hljs-keyword">private</span> Integer score;&#125;<br></code></pre></td></tr></table></figure><p><code>StudentMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.StudentDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Student&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;scoreList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Score&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;score&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;score&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;course&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Course&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentMap2&quot;</span>&gt;</span>        SELECT        c.id course_id,        c.`NAME` course_name,        s.id,        s.`NAME`,        s.sex,        sc.score        FROM        courses AS c        INNER JOIN scores AS sc ON c.id = sc.cou_id        INNER JOIN student AS s ON sc.stu_id = s.id        WHERE        sc.stu_id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-4-查询过程中涉及的缓存"><a href="#5-4-查询过程中涉及的缓存" class="headerlink" title="5.4 查询过程中涉及的缓存"></a>5.4 查询过程中涉及的缓存</h5><blockquote><p>在mybatis查询过程中，在同一个连接中，如果查询了某个数据，会将该数据放入到与连接相关的一个map中，直到该连接关闭后才清除。叫做查询过程中的缓存。</p><p>作用：在同一个连接中，如果多次需要用到某一个数据，查询了一次后不会再次查询，即要使用某个数据，会先查看缓存中是否存在，如果存在则直接使用，如果不存在才会去数据库中查询，查询后会进行缓存。</p><p>存在的时间比较短暂，与连接绑定，连接关闭即失效，称为session级别的缓存，一般称为<a href>一级缓存</a>。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-comment">&lt;!--        type对象中的数据需要通过com.qf.day53.dao.BookTypeDAO.findById语句去查询才有，而且需要将外键type_id列的值传递过去作为参数--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_id&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO.findById&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap1&quot;</span>&gt;</span>        select * from books    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksDAOTest</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        SqlSession session = DBUtils.getSession();        <span class="hljs-keyword">final</span> BooksDAO booksDAO = session.getMapper(BooksDAO.class);        <span class="hljs-keyword">final</span> List&lt;Books&gt; list = booksDAO.findAll1();        <span class="hljs-keyword">for</span> (Books books : list) &#123;            System.out.println(books.getName() + <span class="hljs-string">&quot;===&quot;</span> + books.getType().getName());        &#125;        session.close();    &#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>fetchType属性在association中默认为eager（饥渴的）默认会查询，可以设置lazy，不会查询，直到使用时才查询。</p></blockquote><blockquote><p>一级缓存默认开启，不能关闭。</p><p><a href>注意：</a>当连接关闭时，查询lazy的数据，会重新开启连接查询，查询完毕后会关闭连接。原理是采用了代理模式。</p></blockquote><h5 id="5-5-ResultMap的继承"><a href="#5-5-ResultMap的继承" class="headerlink" title="5.5 ResultMap的继承"></a>5.5 ResultMap的继承</h5><blockquote><p>当一个resultMap和另一个resultMap内容重复时，可以使用继承extends</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap2&quot;</span>&gt;</span>    select * from books where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;booksMap2&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--        type对象中的数据需要通过com.qf.day53.dao.BookTypeDAO.findById语句去查询才有，而且需要将外键type_id列的值传递过去作为参数--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;type_id&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO.findById&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll1&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap1&quot;</span>&gt;</span>    select * from books<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-6-级联添加"><a href="#5-6-级联添加" class="headerlink" title="5.6 级联添加"></a>5.6 级联添加</h5><blockquote><p>当需要两张表同时添加时，一张表中需要外键，而该外键在另一张表中是自动增长的，意味着在添加时需要回填该主键，例如：书籍类型和书籍：</p></blockquote><p><code>BookTypeMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- useGeneratedKeys表示使用自动增长的主键回填，keyProperty回填到哪个属性中--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>        insert into book_type(name) values (#&#123;name&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>BooksMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--    当使用属性中的属性时，可以使用type.id这种方式--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span>        insert into books(name, type_id)values (#&#123;name&#125;, #&#123;type.id&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Testpublic</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;    SqlSession session = DBUtils.getSession();    <span class="hljs-keyword">final</span> BooksDAO booksDAO = session.getMapper(BooksDAO.class);    <span class="hljs-keyword">final</span> BookTypeDAO bookTypeDAO = session.getMapper(BookTypeDAO.class);    BookType type = <span class="hljs-keyword">new</span> BookType();    type.setName(<span class="hljs-string">&quot;重生&quot;</span>);    bookTypeDAO.save(type);    Books books = <span class="hljs-keyword">new</span> Books();    books.setName(<span class="hljs-string">&quot;重生之完美人生&quot;</span>);    books.setType(type);    booksDAO.save(books);    session.commit();    session.close();&#125;<br></code></pre></td></tr></table></figure><h4 id="六、动态SQL-重点"><a href="#六、动态SQL-重点" class="headerlink" title="六、动态SQL[重点]"></a>六、动态SQL<code>[重点]</code></h4><blockquote><p><a href>注意：</a>动态sql中的属性名称必须包含在一个map中或者实体类中，不能直接使用，即使只有一个条件，也需要使用实体或者map。</p></blockquote><h5 id="6-1-if"><a href="#6-1-if" class="headerlink" title="6.1 if"></a>6.1 if</h5><blockquote><p>if作用是如果成立则拼接sql，如果不成立，则不拼接（有where问题，可以使用1=1来解决）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>    select * from books    where 1=1    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>        and name like #&#123;name&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>        and author like #&#123;author&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>        and book_desc like #&#123;desc&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-2-choose、when、otherwise"><a href="#6-2-choose、when、otherwise" class="headerlink" title="6.2 choose、when、otherwise"></a>6.2 choose、when、otherwise</h5><blockquote><p>choose、when、otherwise与jstl中的方式差不多。</p><p>下面的案例意思是：如果name不为空，则查询name，否则如果author不为空，则查询author，如果name和author都为空，则查询desc。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>    select * from books    where 1=1    <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            and name like #&#123;name&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            and author like #&#123;author&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>            and book_desc like #&#123;desc&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-3-where"><a href="#6-3-where" class="headerlink" title="6.3 where"></a>6.3 where</h5><blockquote><p>where标签解决了上面提到的where问题，会自动根据是否有条件决定是否添加where，也会自动根据情况删除and。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>    select * from books    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            and name like #&#123;name&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            and author like #&#123;author&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>            and book_desc like #&#123;desc&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-4-set"><a href="#6-4-set" class="headerlink" title="6.4 set"></a>6.4 set</h5><blockquote><p>set解决set中最后一个逗号问题，会自动去掉最后一个逗号</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span>    update books    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            name = #&#123;name&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            author = #&#123;author&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>            book_desc = #&#123;desc&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span>            create_time = #&#123;createTime&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;imgPath != null&quot;</span>&gt;</span>            img_path = #&#123;imgPath&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null and type.id != null&quot;</span>&gt;</span>            type_id = #&#123;type.id&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>    where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-5-trim"><a href="#6-5-trim" class="headerlink" title="6.5 trim"></a>6.5 trim</h5><blockquote><p>trim用来去掉前面和后面的内容，也可以添加内容，where和set是trim的一个固定的简写方式。</p><p>trim中有4个属性：</p><ul><li>prefix：在前面添加的内容</li><li>suffix：在后面添加的内容</li><li>prefixOverrides：在前面覆盖（删除）的内容</li><li>suffixOverrides：在后面覆盖（删除）的内容</li></ul><p>下面的案例用trim来实现where和set的功能。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span>    update books    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;set &quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            name = #&#123;name&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            author = #&#123;author&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>            book_desc = #&#123;desc&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span>            create_time = #&#123;createTime&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;imgPath != null&quot;</span>&gt;</span>            img_path = #&#123;imgPath&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null and type.id != null&quot;</span>&gt;</span>            type_id = #&#123;type.id&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span>    where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>    select * from books    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and|or&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            and name like #&#123;name&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            or author like #&#123;author&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>            and book_desc like #&#123;desc&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>trim一般在查询和修改时不要使用，直接用where和set即可，一般用于添加的动态sql编写，如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span>    insert into books    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;) values (&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            name,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            author,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>            book_desc,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span>            create_time,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;imgPath != null&quot;</span>&gt;</span>            img_path,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null and type.id != null&quot;</span>&gt;</span>            type_id,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>            #&#123;name&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span>            #&#123;author&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;desc != null&quot;</span>&gt;</span>            #&#123;desc&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span>            #&#123;createTime&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;imgPath != null&quot;</span>&gt;</span>            #&#123;imgPath&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null and type.id != null&quot;</span>&gt;</span>            #&#123;type.id&#125;,        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-6-foreach"><a href="#6-6-foreach" class="headerlink" title="6.6 foreach"></a>6.6 foreach</h5><blockquote><p>一般用在需要循环的地方，例如in。</p><p>foreach有如下属性：</p><p>collection：当一个参数时，如果是数组，就写array，如果是集合，就写collection或者list，如果是对象的属性，就写属性名称。</p><p>open：开始</p><p>close：结束</p><p>index：下标</p><p>item：元素</p><p>separator：分隔符</p></blockquote><blockquote><p>数组：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(Integer [] ids)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAll&quot;</span>&gt;</span>    delete from books where id in    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;i&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;n&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>        #&#123;n&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>集合：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAll&quot;</span>&gt;</span>    delete from books where id in    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;i&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;n&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>        #&#123;n&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>对象属性：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Datapublic</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyObj</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> List&lt;Integer&gt; ids;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">(MyObj obj)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAll&quot;</span>&gt;</span>    delete from books where id in    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;i&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;n&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span>        #&#123;n&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="七、Mybatis中注解的使用"><a href="#七、Mybatis中注解的使用" class="headerlink" title="七、Mybatis中注解的使用"></a>七、Mybatis中注解的使用</h4><blockquote><p><a href>注意：</a></p><p>1、注解写在dao接口中</p><p>2、注解可以和配置文件同时存在，同时起作用，但是不能对一个方法既写注解又写配置文件。</p><p>3、如果只写注解，不写配置文件，需要在核心配置文件中，使用mapper标签引用。</p></blockquote><h5 id="7-1-Param"><a href="#7-1-Param" class="headerlink" title="7.1 @Param"></a>7.1 @Param</h5><blockquote><p>当需要多个参数时，应该将参数封装成对象或者map，如果一定要使用多个参数，可以使用@Param注解。</p><p>该注解会将参数封装到一个map中，通常用来传递多个参数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">findByNameAndAuthor</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String n, <span class="hljs-meta">@Param(&quot;author&quot;)</span> String u)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByNameAndAuthor&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;booksMap&quot;</span>&gt;</span>    select * from books where name = #&#123;name&#125; and author = #&#123;author&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a>如果只有一个参数，但是该参数需要使用<code>$&#123;&#125;</code>或者作为动态sql中的参数，也可以使用@Param注解封装。</p></blockquote><h5 id="7-2-Select、-Results、-Result、-ResultMap、-One、-Many"><a href="#7-2-Select、-Results、-Result、-ResultMap、-One、-Many" class="headerlink" title="7.2 @Select、@Results、@Result、@ResultMap、@One、@Many"></a>7.2 @Select、@Results、@Result、@ResultMap、@One、@Many</h5><blockquote><p>如果使用纯注解的方式，应该将该接口配置到核心配置文件中，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookTypeDAO</span> </span>&#123;    <span class="hljs-comment">// 当仅使用@Select注解时，会自动将结果集进行封装，类似于resultType属性    @Select(&quot;select * from book_type where id = #&#123;id&#125;&quot;)    BookType findById(Integer id);&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span>                          <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/books?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/BooksMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BookTypeDAO&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注解和配置文件可以混用：</p><p>@ResultMap标签的作用是引用其他已经定义好的resultMap。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-meta">@ResultMap(&quot;booksMap&quot;)</span>    <span class="hljs-meta">@Select(&quot;select * from books&quot;)</span>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.qf.day53.dao.BooksDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;booksMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qf.day53.entity.Books&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;book_desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;imgPath&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_path&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>当没有配置文件使用纯注解时，如果需要定义一个结果集映射关系，需要使用@Results和@Result注解。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookTypeDAO</span> </span>&#123;    <span class="hljs-comment">// id相当于起个名字，类似于resultMap标签中的id    @Results(id = &quot;typeMap&quot;, value = &#123;            // 只有result标签，通过id=true来表示是一个id            @Result(property = &quot;id&quot;, column = &quot;id&quot;, id = true),            @Result(property = &quot;name&quot;, column = &quot;type_name&quot;)    &#125;)    // 当仅使用@Select注解时，会自动将结果集进行封装，类似于resultType属性    @Select(&quot;select * from book_type where id = #&#123;id&#125;&quot;)    BookType findById(Integer id);    @ResultMap(&quot;typeMap&quot;)    @Select(&quot;select * from book_type&quot;)    List&lt;BookType&gt; findAll();&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果有关联关系时，使用@One和@Many注解。</p></blockquote><blockquote><p>@One案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-meta">@Results(id = &quot;booksMap1&quot;, value = &#123;            @Result(property = &quot;desc&quot;, column = &quot;book_desc&quot;),            @Result(property = &quot;createTime&quot;, column = &quot;create_time&quot;),            @Result(property = &quot;imgPath&quot;, column = &quot;img_path&quot;),            @Result(property = &quot;type&quot;, column = &quot;type_id&quot;,                    one = @One(select = &quot;com.qf.day53.dao.BookTypeDAO.findById&quot;, fetchType = FetchType.EAGER))    &#125;)</span>    <span class="hljs-meta">@Select(&quot;select * from books&quot;)</span>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">findAll1</span><span class="hljs-params">()</span></span>;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Many案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookTypeDAO</span> </span>&#123;    <span class="hljs-comment">// id相当于起个名字，类似于resultMap标签中的id    @Results(id = &quot;typeMap&quot;, value = &#123;            // 只有result标签，通过id=true来表示是一个id            @Result(property = &quot;id&quot;, column = &quot;id&quot;, id = true),            @Result(property = &quot;name&quot;, column = &quot;type_name&quot;),            @Result(property = &quot;booksList&quot;, column = &quot;id&quot;,                    many = @Many(select = &quot;com.qf.day53.dao.BooksDAO.findAllByTypeId&quot;, fetchType[^1] = FetchType.LAZY))    &#125;)    // 当仅使用@Select注解时，会自动将结果集进行封装，类似于resultType属性    @Select(&quot;select * from book_type where id = #&#123;id&#125;&quot;)    BookType findById(Integer id);&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-meta">@ResultMap(&quot;booksMap&quot;)</span>    <span class="hljs-meta">@Select(&quot;select * from books where type_id = #&#123;id&#125;&quot;)</span>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">findAllByTypeId</span><span class="hljs-params">(Integer id)</span></span>;&#125;<br></code></pre></td></tr></table></figure><h5 id="7-3-Update、-Delete、-Insert"><a href="#7-3-Update、-Delete、-Insert" class="headerlink" title="7.3 @Update、@Delete、@Insert"></a>7.3 @Update、@Delete、@Insert</h5><blockquote><p>增删改：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookTypeDAO</span> </span>&#123;    <span class="hljs-meta">@Insert(&quot;insert into book_type(type_name) values(#&#123;name&#125;)&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">save</span><span class="hljs-params">(BookType type)</span></span>;    <span class="hljs-meta">@Update(&quot;update book_type set type_name=#&#123;name&#125; where id = #&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(BookType type)</span></span>;    <span class="hljs-meta">@Delete(&quot;delete from book_type where id = #&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span></span>;&#125;<br></code></pre></td></tr></table></figure><h5 id="7-4-InsertProvider、-UpdateProvider、-SelectProvider"><a href="#7-4-InsertProvider、-UpdateProvider、-SelectProvider" class="headerlink" title="7.4 @InsertProvider、@UpdateProvider、@SelectProvider"></a>7.4 @InsertProvider、@UpdateProvider、@SelectProvider</h5><blockquote><p>当需要在纯注解模式时写动态sql，需要用到这些注解。</p></blockquote><blockquote><p>@InsertProvider案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-meta">@InsertProvider(type = BooksProvider.class, method = &quot;save&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">save</span><span class="hljs-params">(Books books)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksProvider</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span><span class="hljs-params">(Books books)</span></span>&#123;        SQL sql = <span class="hljs-keyword">new</span> SQL();        sql.INSERT_INTO(<span class="hljs-string">&quot;books&quot;</span>);        <span class="hljs-keyword">if</span> (books.getName() != <span class="hljs-keyword">null</span>)&#123;            sql.VALUES(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;#&#123;name&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getAuthor() != <span class="hljs-keyword">null</span>)&#123;            sql.VALUES(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;#&#123;author&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getDesc() != <span class="hljs-keyword">null</span>)&#123;            sql.VALUES(<span class="hljs-string">&quot;book_desc&quot;</span>, <span class="hljs-string">&quot;#&#123;desc&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getCreateTime() != <span class="hljs-keyword">null</span>)&#123;            sql.VALUES(<span class="hljs-string">&quot;create_time&quot;</span>, <span class="hljs-string">&quot;#&#123;createTime&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getImgPath() != <span class="hljs-keyword">null</span>)&#123;            sql.VALUES(<span class="hljs-string">&quot;img_path&quot;</span>, <span class="hljs-string">&quot;#&#123;imgPath&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getType() != <span class="hljs-keyword">null</span> &amp;&amp; books.getType().getId() != <span class="hljs-keyword">null</span>)&#123;            sql.VALUES(<span class="hljs-string">&quot;type_id&quot;</span>, <span class="hljs-string">&quot;#&#123;type.id&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> sql.toString();    &#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@UpdateProvider案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-meta">@UpdateProvider(type = BooksProvider.class, method = &quot;update&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Books books)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksProvider</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">(Books books)</span></span>&#123;        SQL sql = <span class="hljs-keyword">new</span> SQL();        sql.UPDATE(<span class="hljs-string">&quot;books&quot;</span>);        <span class="hljs-keyword">if</span> (books.getName() != <span class="hljs-keyword">null</span>)&#123;            sql.SET(<span class="hljs-string">&quot;name=#&#123;name&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getAuthor() != <span class="hljs-keyword">null</span>)&#123;            sql.SET(<span class="hljs-string">&quot;author=#&#123;author&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getDesc() != <span class="hljs-keyword">null</span>)&#123;            sql.SET(<span class="hljs-string">&quot;book_desc=#&#123;desc&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getCreateTime() != <span class="hljs-keyword">null</span>)&#123;            sql.SET(<span class="hljs-string">&quot;create_time=#&#123;createTime&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getImgPath() != <span class="hljs-keyword">null</span>)&#123;            sql.SET(<span class="hljs-string">&quot;img_path=#&#123;imgPath&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getType() != <span class="hljs-keyword">null</span> &amp;&amp; books.getType().getId() != <span class="hljs-keyword">null</span>)&#123;            sql.SET(<span class="hljs-string">&quot;type_id=#&#123;type.id&#125;&quot;</span>);        &#125;        sql.WHERE(<span class="hljs-string">&quot;id=#&#123;id&#125;&quot;</span>);        <span class="hljs-keyword">return</span> sql.toString();    &#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@SelectProvider案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BooksDAO</span> </span>&#123;    <span class="hljs-meta">@SelectProvider(type = BooksProvider.class, method = &quot;findAll2&quot;)</span>    <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">findAll2</span><span class="hljs-params">(Books books)</span></span>;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksProvider</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findAll2</span><span class="hljs-params">(Books books)</span></span>&#123;        SQL sql = <span class="hljs-keyword">new</span> SQL();        sql.SELECT(<span class="hljs-string">&quot;*&quot;</span>);        sql.FROM(<span class="hljs-string">&quot;books&quot;</span>);        <span class="hljs-keyword">if</span> (books.getName() != <span class="hljs-keyword">null</span>)&#123;            sql.WHERE(<span class="hljs-string">&quot;name=#&#123;name&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getAuthor() != <span class="hljs-keyword">null</span>)&#123;            sql.WHERE(<span class="hljs-string">&quot;author=#&#123;author&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (books.getDesc() != <span class="hljs-keyword">null</span>)&#123;            sql.WHERE(<span class="hljs-string">&quot;book_desc=#&#123;desc&#125;&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> sql.toString();    &#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven</title>
    <link href="/myblog/2021/10/22/Maven/"/>
    <url>/myblog/2021/10/22/Maven/</url>
    
    <content type="html"><![CDATA[<h3 id="Maven的使用"><a href="#Maven的使用" class="headerlink" title="Maven的使用"></a>Maven的使用</h3><h4 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h4><hr><h5 id="框架的概念"><a href="#框架的概念" class="headerlink" title="框架的概念"></a>框架的概念</h5><blockquote><p>框架一般是封装了一些代码，能够简化企业开发过程的工具。</p></blockquote><h5 id="1-1-项目管理问题"><a href="#1-1-项目管理问题" class="headerlink" title="1.1 项目管理问题"></a>1.1 项目管理问题</h5><blockquote><p>1、项目中jar包的管理</p><p>2、项目中的多层项目（多模块）的管理</p></blockquote><h6 id="1-1-1-繁琐、复杂、冗余"><a href="#1-1-1-繁琐、复杂、冗余" class="headerlink" title="1.1.1 繁琐、复杂、冗余"></a>1.1.1 繁琐、复杂、冗余</h6><blockquote><p>管理项目的jar包时，遇到以下问题</p><ul><li>版本的使用问题</li><li>相同的jar包，不同的版本导入多次</li><li>更换不同版本的jar时，需要比较麻烦的操作</li><li>jar来源问题</li><li>版本依赖关系的管理</li><li>相同的包占据大量的空间</li></ul></blockquote><h5 id="1-2-项目管理方案"><a href="#1-2-项目管理方案" class="headerlink" title="1.2 项目管理方案"></a>1.2 项目管理方案</h5><blockquote><p>使用Maven或者相似的框架（gradle）来管理。</p></blockquote><h4 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h4><hr><blockquote><p>Maven，犹太语，意思是知识的积累。</p><p>作用：</p><ul><li>对包的管理，对jar包的管理，以及对项目的打包等。</li><li>分模块开发项目。</li></ul></blockquote><h4 id="三、Maven安装"><a href="#三、Maven安装" class="headerlink" title="三、Maven安装"></a>三、Maven安装</h4><hr><blockquote><p>1、下载并解压相应的压缩包，此处为apache-maven-3.3.9-bin.zip</p><p>2、将解压后的文件夹放入到一个没有中文和特殊符号的目录下</p><p>3、在该文件夹下的conf文件夹中找到settings.xml配置本地路径和阿里云公共仓库。在此处将提供的settings.xml覆盖原本的settings.xml，后面要改动本地仓库路径。</p><p>4、将提供的本地仓库repo.zip解压并放到maven文件夹中。（如果不提供本地仓库，会自动下载，但是由于网络原因可能导致失败。）</p><p>5、配置本地仓库路径。</p></blockquote><h4 id="四、Maven配置"><a href="#四、Maven配置" class="headerlink" title="四、Maven配置"></a>四、Maven配置</h4><hr><h5 id="4-1-本地仓库"><a href="#4-1-本地仓库" class="headerlink" title="4.1 本地仓库"></a>4.1 本地仓库</h5><blockquote><p>配置本地仓库路径。在settings.xml中找到localRepository标签，将其内容修改成本地仓库路径。</p><p><a href>注意：</a>如果localRepository标签是在注释中，应该复制出来。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\apache-maven-3.3.9\repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-2-JDK配置"><a href="#4-2-JDK配置" class="headerlink" title="4.2 JDK配置"></a>4.2 JDK配置</h5><blockquote><p>在 <a href><profiles></profiles></a> 标签中 增加 一个 <a href><profile></profile></a> 标签，限定maven项目默认的jdk版本.</p><p>内容如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在已有的profiles标签中添加profile标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>myjdk<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span>    <br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>    <br>            <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 让增加的 profile生效 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeProfiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activeProfile</span>&gt;</span>myjdk<span class="hljs-tag">&lt;/<span class="hljs-name">activeProfile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activeProfiles</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="五、仓库"><a href="#五、仓库" class="headerlink" title="五、仓库"></a>五、仓库</h4><hr><h5 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h5><blockquote><p>存储和管理jar包的空间。</p></blockquote><h5 id="5-2-仓库分类"><a href="#5-2-仓库分类" class="headerlink" title="5.2 仓库分类"></a>5.2 仓库分类</h5><blockquote><p>仓库根据位置不同，有如下分类：</p><p>本地仓库：当前主机上保存jar包的仓库。</p><p>远程仓库：不在本地，而在服务器上，提供网络下载传输的仓库。</p><ul><li><p>中央仓库：指maven工具提供的最顶层的仓库。一般网络原因，导致可能下载失败。</p></li><li><p>私服：公司内部或个人在服务器上搭建的仓库，可以提供给用户下载。【了解】</p></li><li><p>公共仓库：由一些大公司提供的私服或者镜像，然后不需要密码即可访问。</p></li></ul></blockquote><h5 id="5-3-仓库的jar包加载顺序-重点"><a href="#5-3-仓库的jar包加载顺序-重点" class="headerlink" title="5.3 仓库的jar包加载顺序[重点]"></a>5.3 仓库的jar包加载顺序[重点]</h5><blockquote><p>当项目中需要使用某个jar包，会先到本地仓库中查找，如果本地仓库有，则直接使用。</p><p>如果本地仓库没有，会先去远程仓库中的私服（公共仓库）中下载。如果私服中存在，则先下载到本地仓库，再使用。</p><p>如果私服中没有，则去中央仓库下载，如果中央仓库有，则下载到本地仓库并使用，如果中央仓库也没有，则无法下载，提示没有该jar包。</p></blockquote><h4 id="六、Idea-Maven"><a href="#六、Idea-Maven" class="headerlink" title="六、Idea-Maven"></a>六、Idea-Maven</h4><hr><h5 id="6-1-在Idea中关联Maven"><a href="#6-1-在Idea中关联Maven" class="headerlink" title="6.1 在Idea中关联Maven"></a>6.1 在Idea中关联Maven</h5><blockquote><p>在idea中有两个地方需要配置：</p><ul><li>需要在默认配置中配置，配置后所有的新建项目自动配置<ul><li>在File-&gt; New Projects Settings -&gt; Settings for New Projects -&gt; Build… -&gt; Build Tools -&gt; Maven</li><li>配置右边的Maven home Directory为maven的路径。</li></ul></li><li>需要在本地项目中配置。在Settings中配置，与上面配置一致。</li></ul></blockquote><h5 id="6-2-创建Maven项目"><a href="#6-2-创建Maven项目" class="headerlink" title="6.2 创建Maven项目"></a>6.2 创建Maven项目</h5><h6 id="6-2-1-新建项目"><a href="#6-2-1-新建项目" class="headerlink" title="6.2.1 新建项目"></a>6.2.1 新建项目</h6><blockquote><p>新建工程，指定工程类型为maven类型，不使用任何骨架（模板）。</p><p>工程名称：day51</p><p>GroupId：com.qf</p><p>ArtifactId：day51(与工程名称相同)</p><p>Version：1.0-SNAPSHOT</p></blockquote><h6 id="6-2-2-默认工程结构"><a href="#6-2-2-默认工程结构" class="headerlink" title="6.2.2 默认工程结构"></a>6.2.2 默认工程结构</h6><blockquote><p>src/main/java：源代码主目录</p><p>src/main/resources：源代码资源文件目录</p><p>src/test/java：单元测试目录</p><p>pom.xml：maven的核心配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>day51<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-3-导入依赖jar"><a href="#6-3-导入依赖jar" class="headerlink" title="6.3 导入依赖jar"></a>6.3 导入依赖jar</h5><blockquote><p>如果需要做一个简单的数据库操作工程，需要导入依赖jar。</p></blockquote><h6 id="6-3-1-查找依赖"><a href="#6-3-1-查找依赖" class="headerlink" title="6.3.1 查找依赖"></a>6.3.1 查找依赖</h6><blockquote><p>可以在官网查找依赖路径：</p><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></blockquote><h6 id="6-3-2-导入依赖"><a href="#6-3-2-导入依赖" class="headerlink" title="6.3.2 导入依赖"></a>6.3.2 导入依赖</h6><blockquote><p> 在pom.xml中添加一个标签：dependencies，在该标签中间来添加各种依赖。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>day51<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.40<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="6-3-3-同步依赖"><a href="#6-3-3-同步依赖" class="headerlink" title="6.3.3 同步依赖"></a>6.3.3 同步依赖</h6><blockquote><p> 当添加依赖标签后，发现jar包并没有导入到工程中，需要刷新（同步）jar包。有以下两种方式：</p><ul><li>直接点击右上角M图标，刷新</li><li>在pom.xml上右键，选择Maven-&gt; Reimport</li></ul></blockquote><p>#####6.4 使用骨架创建web项目</p><blockquote><p>常用的空骨架：</p><ul><li>创建普通工程使用：maven-archetype-quickstart</li><li>创建web工程使用：maven-archetype-webapp</li></ul></blockquote><blockquote><p>通过maven-archetype-webapp创建的web工程，需要手动新建java和resources目录。</p><p><a href>注意：</a><a href>注意：</a><a href>注意：</a></p><p>默认创建的web.xml是2.3版本，默认不支持EL表达式，需要手动在jsp页面设置page指令中的isELIngore为false。</p><p><a href>建议：</a>将该web.xml替换为3.0以上的版本。</p></blockquote><p><code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="6-4-1-打包方式"><a href="#6-4-1-打包方式" class="headerlink" title="6.4.1 打包方式"></a>6.4.1 打包方式</h6><blockquote><p>packaging：打包方式。</p><p>jar：打成jar包，一般给其他工程进行依赖。</p><p>war：一般是web项目使用，表示最终打包成war包，以放入到tomcat中运行。</p><p>pom：作为其他工程的父工程，不能单独使用。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>jdk配置：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>build标签中是指在maven使用过程中用到的一些插件。</p></blockquote><h6 id="6-4-2-web依赖"><a href="#6-4-2-web依赖" class="headerlink" title="6.4.2 web依赖"></a>6.4.2 web依赖</h6><blockquote><p>之前创建web项目时，都默认导入tomcat包中的servlet-api, 在maven的项目中，需要在pom.xml中导入该依赖，如下：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-5-部署web项目"><a href="#6-5-部署web项目" class="headerlink" title="6.5 部署web项目"></a>6.5 部署web项目</h5><blockquote><p>点击右上角Edit Configration按钮，在弹出的窗口左上角点击+号，选择tomcat Server中的Local，然后在弹出的窗口右下角的fix按钮上点击，选择带有exploded的一项。</p></blockquote><h5 id="6-6-依赖生命周期"><a href="#6-6-依赖生命周期" class="headerlink" title="6.6 依赖生命周期"></a>6.6 依赖生命周期</h5><h6 id="6-6-1-概念"><a href="#6-6-1-概念" class="headerlink" title="6.6.1 概念"></a>6.6.1 概念</h6><blockquote><p>是指当项目中依赖了一个jar包后，该jar包是在何时应用。</p></blockquote><h6 id="6-6-2-使用方式"><a href="#6-6-2-使用方式" class="headerlink" title="6.6.2 使用方式"></a>6.6.2 使用方式</h6><blockquote><p>在pom.xml中导入jar时，通过scope标签来配置该jar的生命周期。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="6-6-3-生命周期详解"><a href="#6-6-3-生命周期详解" class="headerlink" title="6.6.3 生命周期详解"></a>6.6.3 生命周期详解</h6><table><thead><tr><th>标识</th><th>周期</th></tr></thead><tbody><tr><td>compile</td><td>缺省值，适用于所有阶段（测试运行，编译，运行，打包）</td></tr><tr><td>provided</td><td>类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet-api.jar；适用于（测试运行，编译）阶段</td></tr><tr><td>runtime</td><td>只在运行时使用，如 mysql的驱动jar，适用于（运行，测试运行）阶段</td></tr><tr><td>test</td><td>只在测试时使用，适用于（编译，测试运行）阶段，如 junit.jar</td></tr><tr><td>system</td><td>Maven不会在仓库中查找对应依赖，在本地磁盘目录中查找；适用于（编译，测试运行，运行）阶段</td></tr></tbody></table><h4 id="七、Maven指令"><a href="#七、Maven指令" class="headerlink" title="七、Maven指令"></a>七、Maven指令</h4><hr><h5 id="7-1-命令行"><a href="#7-1-命令行" class="headerlink" title="7.1 命令行"></a>7.1 命令行</h5><blockquote><p>如果配置了环境变量，可以直接使用mvn命令，来操作maven的命令。</p><p>例如：</p><p>mvn -v</p><p>mvn clean等</p></blockquote><h5 id="7-2-Maven面板"><a href="#7-2-Maven面板" class="headerlink" title="7.2 Maven面板"></a>7.2 Maven面板</h5><blockquote><p>View -&gt; Tool Windows -&gt; Maven或者直接点击idea窗口右边的maven按钮，打开maven窗口。</p><p>在LifeCycle中可以找到相应的命令。</p><p>运行命令的方式是右键后选择Run，或者直接双击该命令。</p></blockquote><blockquote><p>clean：删除所有编译后的文件，类似于前面直接删除out文件夹。</p><p>compile：编译所有文件。</p><p>test：运行项目中单元测试。</p><p>package：打包</p><p>install：将项目打包并上传到本地仓库。</p><p>deploy：将项目打包并上传到远程私服。</p></blockquote><h4 id="八、通过普通项目创建web项目"><a href="#八、通过普通项目创建web项目" class="headerlink" title="八、通过普通项目创建web项目"></a>八、通过普通项目创建web项目</h4><blockquote><p>1、创建maven工程，不选择任何骨架。<a href>注意：</a>修改groupId和artifactId。</p><p>2、在pom.xml中添加packaging，设置为war</p><p>3、打开Project Stuctrue -&gt; 选择Modules，点击上面的+，选择添加Web。</p><p>4、通过右边的编辑按钮，来修改两个路径，将路径中包含src\main\webapp。修改完毕后，下面会有警告，点击警告后面的create Artifact按钮。</p><p>运行tomcat：</p><ul><li>点击右上角Edit Configration按钮，在弹出的窗口左上角点击+号，选择tomcat Server中的Local，然后在弹出的窗口右下角的fix按钮上点击，选择带有war exploded的一项。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VUE</title>
    <link href="/myblog/2021/10/22/VUE/"/>
    <url>/myblog/2021/10/22/VUE/</url>
    
    <content type="html"><![CDATA[<h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="一-开发工具"><a href="#一-开发工具" class="headerlink" title="一. 开发工具"></a>一. 开发工具</h3><p>​    VUE开发环境推荐使用VS code, 然后安装特定的插件即可开发，可用插件如下：</p><ul><li><strong>Vetur</strong> —— 语法高亮、智能感知、Emmet等 </li><li><strong>EsLint</strong>—— 语法纠错</li><li><strong>Auto Close Tag</strong> —— 自动闭合HTML/XML标签</li><li><strong>Auto Rename Tag</strong> —— 自动完成另一侧标签的同步修改</li><li><strong>Path Intellisense</strong> —— 自动路劲补全</li><li><strong>HTML CSS Support</strong> —— 让 html 标签上写class 智能提示当前项目所支持的样式</li><li><strong>Vue 2 Snippets</strong> ——vue的语法提示</li></ul><h3 id="二-第一个VUE程序"><a href="#二-第一个VUE程序" class="headerlink" title="二. 第一个VUE程序"></a>二. 第一个VUE程序</h3><h4 id="2-1-引入js"><a href="#2-1-引入js" class="headerlink" title="2.1 引入js"></a>2.1 引入js</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-给dom元素定义id"><a href="#2-2-给dom元素定义id" class="headerlink" title="2.2 给dom元素定义id"></a>2.2 给dom元素定义id</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">   </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="2-3-vue代码编写"><a href="#2-3-vue代码编写" class="headerlink" title="2.3 vue代码编写"></a>2.3 vue代码编写</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">new</span> <span class="hljs-type">Vue</span>(&#123;<br> el: <span class="hljs-string">&quot;#app&quot;</span>,<br>     <span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">     <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">            <span class="hljs-title">msg</span>: &quot;<span class="hljs-type">Hello</span> <span class="hljs-type">World</span>&quot;</span><br><span class="hljs-class">     &#125;</span><br> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="二-基本指令"><a href="#二-基本指令" class="headerlink" title="二. 基本指令"></a>二. 基本指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">v-text: v-text是用于操作纯文本，它会替代显示对应的数据对象上的值，可以简写为&#123;&#123;&#125;&#125;, 即插值表达式。<br></code></pre></td></tr></table></figure><p><strong>v-html:</strong> 将内容以html的形式呈现在页面。</p><p><strong>v-model:</strong> 双向数据绑定。</p><p><strong>v-if:</strong> 值如果为true的情况下，显示标签，如果为false会移除标签。</p><p><strong>v-else-if:</strong> 与v-if配合使用。</p><p><strong>v-else:</strong> 与v-if配合使用。</p><p><strong>v-show:</strong> 如果为true,显示信息，如果为false则隐藏标签。</p><p><strong>v-for:</strong> 循环遍历。语法形式为  v-for=“item in list”</p><p><strong>v-bind:</strong> 将值绑定到标签的自定义属性上，形式为 v-bind:title=”mytitle”，可以简写为 :属性名</p><p><strong>v-on:click:</strong> 点击事件，可以简写为@click。</p><p>如下代码为v-bind的演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.cls</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-class">.cls1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-class">.cls2</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;cls:isCls&#125;&quot;</span>&gt;</span>这是一段话<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[one, two, &#123;cls:isCls&#125;]&quot;</span>&gt;</span>这是一段话<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;attr&quot;</span>&gt;</span>这是一段话<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">isCls</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;hello world&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">one</span>: <span class="hljs-string">&#x27;cls1&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">two</span>: <span class="hljs-string">&#x27;cls2&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">attr</span>: <span class="hljs-string">&#x27;附加属性&#x27;</span></span><br><span class="javascript">        &#125; </span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>案例：1. 通过表单添加数据，渲染到列表中。</p><p>​        2. 遍历数组和对象，并能删除和更新。</p><h3 id="三-计算属性与监视器"><a href="#三-计算属性与监视器" class="headerlink" title="三. 计算属性与监视器"></a>三. 计算属性与监视器</h3><h4 id="3-1-计算属性"><a href="#3-1-计算属性" class="headerlink" title="3.1 计算属性"></a>3.1 计算属性</h4><p>​    计算属性是用来存储数据，而且数据可以进行逻辑操作，是基于其依赖的进行更新，只有在相关依赖发生变化的时候才会更新变化，计算属性是缓存的，只要相关依赖不发生变化，多次访问属性值是之前I计算得到的值，并不会多次执行。计算属性的属性名不需要纳入到Vue的数据对象中。</p><h4 id="3-2-监视器"><a href="#3-2-监视器" class="headerlink" title="3.2 监视器"></a>3.2 监视器</h4><p>​    所谓的监视器就是可以通过watch的方式观察某个属性的变化，然后做出相应的处理。</p><h4 id="3-3-案例"><a href="#3-3-案例" class="headerlink" title="3.3 案例"></a>3.3 案例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">FirstName: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;&lt;br&gt;<br>LastName: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;&lt;br&gt;<br>&lt;hr&gt;<br>FullName1(单向): &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;fullName1&quot;</span>&gt;&lt;br&gt;<br>FullName2(单向): &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;fullName2&quot;</span>&gt;&lt;br&gt;<br>FullName3(双向): &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;fullName3&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>对应的js代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;A&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;B&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">fullName2</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">computed</span>: &#123; <span class="hljs-comment">//计算属性</span></span><br><span class="javascript">            <span class="hljs-attr">fullName1</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; </span><br><span class="javascript">                <span class="hljs-comment">//当fullName1所依赖的数据发生改变的时候, 该方法会发生变化</span></span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName; </span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">fullName3</span>: &#123;</span><br><span class="javascript">                <span class="hljs-comment">//当fullName1所依赖的数据发生改变的时候, 该方法会发生变化</span></span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName;</span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-comment">//当fullName1的值发生变化的时候, 该方法被调用,value为fullName1的值 </span></span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> &#123;</span><br><span class="javascript">                     <span class="hljs-keyword">let</span> valArray = value.split(<span class="hljs-regexp">/\s/</span>);</span><br><span class="javascript">                     <span class="hljs-built_in">console</span>.log(valArray.length);</span><br><span class="javascript"> <span class="hljs-built_in">this</span>.firstName = valArray[<span class="hljs-number">0</span>];</span><br><span class="javascript">                     <span class="hljs-built_in">this</span>.lastName = valArray[<span class="hljs-number">1</span>];</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 第一个参数的值为新的值，第二个参数为旧的值</span></span><br><span class="javascript">            <span class="hljs-attr">firstName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.fullName2 = newVal + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    vm.$watch(<span class="hljs-string">&#x27;lastName&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.fullName2 = <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + newVal;</span><br><span class="javascript">    &#125;);</span><br></code></pre></td></tr></table></figure><p>案例，实现如下效果：</p><p><img src="/myblog/2021/10/22/VUE/sort.gif"></p><h3 id="四-事件相关"><a href="#四-事件相关" class="headerlink" title="四. 事件相关"></a>四. 事件相关</h3><h4 id="4-1-事件修饰符"><a href="#4-1-事件修饰符" class="headerlink" title="4.1 事件修饰符"></a>4.1 事件修饰符</h4><p>A. 阻止事件冒泡</p><p>​    一个盒子中嵌套另外一个盒子的时候，在内外层的盒子中都有有对应的事件行为，当点击内层盒子时候，默认情况下会触发外层盒子的事件，这种默认的行为就是事件冒泡。需要去阻止事件的冒泡。使用方法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@click.stop=<span class="hljs-string">&quot;方法名&quot;</span><br></code></pre></td></tr></table></figure><p>B. 阻止事件的默认行为</p><p>​    对于form表单来说，当点击表单中的button的时候，会默认触发表单的提交；对于a标签，当点击a标签的时候，会触发a标签访问。那么如何去阻止a标签的默认访问行为呢，使用方法是：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@click.prevent=<span class="hljs-string">&quot;方法名&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-按键修饰符"><a href="#4-2-按键修饰符" class="headerlink" title="4.2 按键修饰符"></a>4.2 按键修饰符</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.13</span>=<span class="hljs-string">&quot;showInfo&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;showInfo&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Vue(&#123;<br>el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>data: &#123;<br>info: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;,<br> methods: &#123;<br> showInfo()&#123;<br> alert(<span class="hljs-keyword">this</span>.info);<br> &#125;<br> &#125;<br> &#125;)<br></code></pre></td></tr></table></figure><h3 id="五-过滤器"><a href="#五-过滤器" class="headerlink" title="五. 过滤器"></a>五. 过滤器</h3><p>​    Vue中使用过滤器（Filters）来渲染数据是一种很有趣的方式，他不能替代Vue中的<code>methods</code>、<code>computed</code>或者<code>watch</code>，因为过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本。在很多不同的情况下，过滤器都是有用的，比如尽可能保持API响应的干净，并在前端处理数据的格式。在你希望避免重复和连接的情况下，它们也可以有效地封装成可重用代码块背后的所有逻辑。不过，在Vue 2.0中已经没有内置的过滤器了，我们必须要自己来构建它们。<strong>过滤器只能用于插值表达式中。</strong></p><h4 id="5-1-全局过滤器"><a href="#5-1-全局过滤器" class="headerlink" title="5.1 全局过滤器"></a>5.1 全局过滤器</h4><p>​    全局过滤器是只通过 Vue.filter()的方式来定义的过滤器，用这种方式定义的过滤器可以被所有的Vue实例使用。</p><p>案例一：将数字转换为美元的形式。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">price</span> | toUSD&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.filter(<span class="hljs-string">&#x27;toUSD&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;$&#x27;</span> + value;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">price</span>: <span class="hljs-number">345.45</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;);</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>案例二：串联过滤器，将数字四舍五入成两位有效数字，然后转换为美元表达方式</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;&#123;&#123;price | fix(2) | toUSD&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    //方法的第一个参数为数据源，第二个为保留几位小数。    Vue.filter(&#39;fix&#39;, (num, limit) =&gt; &#123;        return num.toFixed(limit);    &#125;);    //转换为美元表达方式    Vue.filter(&#39;toUSD&#39;, function(value)&#123;        return &#39;$&#39; + value;    &#125;)    new Vue(&#123;        el: &#39;#app&#39;,        data: &#123;            price: 345.45        &#125;    &#125;);&lt;/script&gt;</code></pre><h4 id="5-2-局部过滤器"><a href="#5-2-局部过滤器" class="headerlink" title="5.2 局部过滤器"></a>5.2 局部过滤器</h4><p>​    局部过滤器是定义在Vue实例中，只能在指定的实例中才能使用。</p><p>案例：我们创建博客的时候，都会有文章列表，每篇博客将会有一个文章摘要，然后提供一个“阅读更多”的功能。我们这个示例就是来创建一个名为readMore的过滤器，它将把字符串的长度限制为给定的字符数，并将其附加到你的选择的后缀中。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">article</span> | articleDisplay(<span class="hljs-name">20</span>, <span class="hljs-string">&#x27;...&#x27;</span>)&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">article</span>: <span class="hljs-string">&#x27;17日，复旦大学国际政治系副教授沈逸在接受观察者网采访时，将15日启动立法&#x27;</span> + </span></span><br><span class="javascript"><span class="xml">  <span class="hljs-string">&#x27;程序阻挠政府解禁华为的议员称为“杠精”和“戏精”，称其是为了在贸易问题上，&#x27;</span> + </span></span><br><span class="javascript"><span class="xml">  <span class="hljs-string">&#x27;加大国会在白宫面前的存在感，是美国政治的一种内斗形式，但最终，破坏的还是&#x27;</span> + </span></span><br><span class="javascript"><span class="xml">  <span class="hljs-string">&#x27;美国企业的利益。&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">filters</span>: &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// value为数据源，length表示要展示的长度，suffix为后缀</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">articleDisplay</span>(<span class="hljs-params">value, length, suffix</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> value.substring(<span class="hljs-number">0</span>, length) + suffix;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>练习：定义日期转换的过滤器。</p><h3 id="六-vue-cli构建项目与打包部署"><a href="#六-vue-cli构建项目与打包部署" class="headerlink" title="六.  vue-cli构建项目与打包部署"></a>六.  vue-cli构建项目与打包部署</h3><p>​    使用vue-cli能够快速的帮助我们构建项目，它就如同一个脚手架，提供了可选的模板。在使用vue-cli之前需要先安装nodejs。</p><h4 id="6-1-使用npm构建项目"><a href="#6-1-使用npm构建项目" class="headerlink" title="6.1 使用npm构建项目"></a>6.1 使用npm构建项目</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli             <span class="hljs-comment">#安装vue-cli,该步骤需要等一段时间</span><br>vue -V                              <span class="hljs-comment">#查看vue-cli的版本</span><br>vue create my-app                   <span class="hljs-comment">#创建名为my-app的项目</span><br></code></pre></td></tr></table></figure><h4 id="6-2-项目的结构介绍"><a href="#6-2-项目的结构介绍" class="headerlink" title="6.2 项目的结构介绍"></a>6.2 项目的结构介绍</h4><ul><li>public: 存放静态文件。</li><li>src: 源码文件，开发就在此目录下。</li><li>.gitignore: git的配置文件。</li><li>babel.config.js: babel的配置文件，在创建项目的时候才用的脚手架为bable。</li><li>package-lock.json：定义了依赖库的下载位置，保证了在项目迁移部署环境的一致性。</li><li>package.json: 定义了该项目依赖的类库。</li></ul><h4 id="6-3-项目的打包部署"><a href="#6-3-项目的打包部署" class="headerlink" title="6.3 项目的打包部署"></a>6.3 项目的打包部署</h4><p>执行命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">run</span> build<br></code></pre></td></tr></table></figure><p>将生成的dist目录下的文件放入到tomcat或者nginx下，启动服务器，即可访问。</p><h3 id="七-组件化开发"><a href="#七-组件化开发" class="headerlink" title="七. 组件化开发"></a>七. 组件化开发</h3><p>​    组件化开发是在ES6中提出的，可以提高页面的复用率，提高开发效率，便于团队协作，是一套模板化的代码，要有<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>三个标签，分别用来定义布局、脚本和样式。而且<code>&lt;template&gt;</code>下必须有一个根节点。</p><h4 id="7-1-编写App-vue和HelloWorld-vue"><a href="#7-1-编写App-vue和HelloWorld-vue" class="headerlink" title="7.1 编写App.vue和HelloWorld.vue"></a>7.1 编写App.vue和HelloWorld.vue</h4><p>HelloWorld.vue</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!-- template的根节点，是必须的 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">export default &#123;   <span class="hljs-comment">&lt;!-- 向外保留成员，表示向外暴露该组件 --&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data() &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">msg: &#x27;Hello World&#x27;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125; </span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.title</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">color</span>: red;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">article</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Helloworld</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Helloworld</span>&gt;</span> <span class="hljs-comment">&lt;!-- 在Helloworld.vue中的组件 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml"> * 引入HelloWorld.vue组件，使用Helloworld变量来接收，接收变量的组件</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml"> * 可以叫任何名字，但是推荐使用和导入组件保持一致。</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml"> */</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> Helloworld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HelloWorld.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">     *  需要在当前组件中来定义引入的组件，接收的形式可以有二种：</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">     * </span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">     *  components: &#123;HelloWorld&#125; 最原始的写法为&#123;Helloworld:Helloworld&#125;,第一个Helloworld</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">     *     在当前组件中使用的名字，可以随意更改，第二个Helloworld是上面import引入的时候用来接收的变</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">     *     量名。如果只写一个表示当前组件中使用的名字和变量名一致。 </span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">     */</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">components</span>: &#123;Helloworld&#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">//组件化编程必须使用定义data方法</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">article</span>: <span class="hljs-string">&#x27;路透社20日援引伊朗法尔斯通讯社消息称&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="7-2-定义入口JS文件"><a href="#7-2-定义入口JS文件" class="headerlink" title="7.2 定义入口JS文件"></a>7.2 定义入口JS文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>        <span class="hljs-comment">//引入vue</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>  <span class="hljs-comment">//引入自己定义的App.vue,使用变量App来接收</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),  <span class="hljs-comment">//将App组件渲染到index.html中。</span><br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>)<br></code></pre></td></tr></table></figure><p>render是Vue中的一个方法，方法的定义形式如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// render最原始的，而传入的参数createElement又是一个函数，用来生成dom结构</span><br>render: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">createElement</span>)</span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// 按照ES6的箭头函数的写法，进行第一次演变</span><br>render: <span class="hljs-function"><span class="hljs-params">createElement</span> =&gt;</span> createElement(模板)<br><span class="hljs-comment">// 将上面的createElement变为h，那么就得到最终的形式</span><br>render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br></code></pre></td></tr></table></figure><p>$mount(“#id”)该方法的作用是先实例化Vue对象，接着在挂载到指定Id的节点上，和在**<code>new Vue</code>**的时候使用el指定要渲染的节点的形式是一样的，只是换了种形式而已。</p><h3 id="八-案例演示"><a href="#八-案例演示" class="headerlink" title="八. 案例演示"></a>八. 案例演示</h3><p>案例一：利用组件化编程实现如下图示案例：</p><p><img src="/myblog/2021/10/22/VUE/comment.gif"></p><p>案例二：利用组件化编程实现如下图案例(并实现数据的存储)：</p><p><img src="/myblog/2021/10/22/VUE/todos.gif"></p><p>​    当你能够独立的完成如上两个案例，表示你已经比较深入的理解VUE了  ^_^</p><h3 id="九-组件通信"><a href="#九-组件通信" class="headerlink" title="九. 组件通信"></a>九. 组件通信</h3><h4 id="9-1-props"><a href="#9-1-props" class="headerlink" title="9.1 props"></a>9.1 props</h4><p><strong>父组件 App.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 前面一个msg标识子组件用于接收的变量名, 引号中的msg是当前组件的值 </span></span><br><span class="hljs-comment"><span class="xml"> 第一个add是子组件用于接收的变量名，第二个add是当前组件的方法名</span></span><br><span class="hljs-comment"><span class="xml">--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;msg&quot;</span>/&gt;</span> </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        child</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;这个信息来源于父组件&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>子组件 Child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addItem&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 使用props接收父组件传递过来的值</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">props</span>: &#123;  </span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">msg</span>: <span class="hljs-built_in">String</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="9-2-事件绑定、监听与取值"><a href="#9-2-事件绑定、监听与取值" class="headerlink" title="9.2 事件绑定、监听与取值"></a>9.2 事件绑定、监听与取值</h4><h5 id="9-2-1-子组件操作父组件"><a href="#9-2-1-子组件操作父组件" class="headerlink" title="9.2.1 子组件操作父组件"></a>9.2.1 子组件操作父组件</h5><p><strong>父组件 App.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">dosomething</span>=<span class="hljs-string">&quot;changeValue&quot;</span>/&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Child.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    Child</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">changeValue</span>(<span class="hljs-params">value</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.value = value;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>子组件 Child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dosomething&quot;</span>&gt;</span>子组件按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">dosomething</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// 调用父组件绑定的事件 dosomething，然后调用changeValue方法，并传值</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;dosomething&#x27;</span>, <span class="hljs-string">&#x27;张某人&#x27;</span>);</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="9-2-2-父组件监听子组件"><a href="#9-2-2-父组件监听子组件" class="headerlink" title="9.2.2 父组件监听子组件"></a>9.2.2 父组件监听子组件</h5><p><strong>父组件 App.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;child&quot;</span>/&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Child.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    Child</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">// 将当前组件中的changeValue方法，绑定到名为changeValue中监听事件中，</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">// 子组件通过 this.$emit(&#x27;changeValue&#x27;, &#x27;张某人&#x27;) 变会调用父组件的changeValue方法</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.$refs.child.$on(<span class="hljs-string">&#x27;changeValue&#x27;</span>, <span class="hljs-built_in">this</span>.changeValue);</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">changeValue</span>(<span class="hljs-params">value</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.value = value;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>子组件 Child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dosomething&quot;</span>&gt;</span>子组件按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;张某人&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">dosomething</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;changeValue&#x27;</span>, <span class="hljs-string">&#x27;张某人&#x27;</span>);</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="9-2-3-父组件取子组件中的值"><a href="#9-2-3-父组件取子组件中的值" class="headerlink" title="9.2.3 父组件取子组件中的值"></a>9.2.3 父组件取子组件中的值</h5><p><strong>父组件 App.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeValue&quot;</span>&gt;</span>取子组件的值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;child&quot;</span>/&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Child.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    Child</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">changeValue</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.$refs.child.value;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"></span><br></code></pre></td></tr></table></figure><p><strong>子组件 Child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是子组件，我中间定义了一个value=&#x27;张某人&#x27;的数据<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;张某人&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="9-3-订阅与发布-概念"><a href="#9-3-订阅与发布-概念" class="headerlink" title="9.3 订阅与发布(概念)"></a>9.3 订阅与发布(概念)</h4><p>​    订阅与发布(Publish发布、subscribe订阅)可以应用到各种场景之下，不仅仅是父子组件之间，也可以应用于兄弟组件之间。</p><p>安装pubsub-js这个类库：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>pubsub-<span class="hljs-keyword">js </span>--save<br></code></pre></td></tr></table></figure><p><strong>父组件 App.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>/&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;child&quot;</span>/&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Child.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> PubSub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    Child</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    PubSub.subscribe(<span class="hljs-string">&#x27;channel1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">msg, value</span>) =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.changeValue(value);</span></span><br><span class="javascript"><span class="xml">    &#125;);</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">changeValue</span>(<span class="hljs-params">value</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.value = value;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p><strong>子组件 Child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;pub&quot;</span>&gt;</span>子组件发布消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> PubSub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">pub</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">            PubSub.publish(<span class="hljs-string">&#x27;channel1&#x27;</span>, <span class="hljs-string">&#x27;张某人&#x27;</span>);</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="9-4-插槽-slot"><a href="#9-4-插槽-slot" class="headerlink" title="9.4 插槽(slot)"></a>9.4 插槽(slot)</h4><p>​    插槽的作用说白了就是一个占位的作用。</p><p><strong>父组件 App.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">List</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="xml">      可以简写为这种形式</span></span><br><span class="hljs-comment"><span class="xml">      &lt;template #title&gt;</span></span><br><span class="hljs-comment"><span class="xml">    --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>插槽案例<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="xml">      可以简写为这种形式</span></span><br><span class="hljs-comment"><span class="xml">      &lt;template #title=&quot;props&quot;&gt;</span></span><br><span class="hljs-comment"><span class="xml">    --&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item</span>=<span class="hljs-string">&quot;props&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>插槽属性<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>属性值：&#123;&#123;props&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> List <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/List.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        List</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">    <span class="hljs-selector-class">.site-header</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>子组件 Child.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;person&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span> <span class="hljs-comment">&lt;!-- 组件属性 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">person</span>: &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>&#125;</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="十-网络请求"><a href="#十-网络请求" class="headerlink" title="十. 网络请求"></a>十. 网络请求</h3><p>​    vue2.X版本中，官方推荐的网络请求的工具是axios。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install axios vue-axios <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h4 id="10-1-配置全局请求地址"><a href="#10-1-配置全局请求地址" class="headerlink" title="10.1 配置全局请求地址"></a>10.1 配置全局请求地址</h4><p>​    新建Base.vue文件，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">const</span> BASE_URL = <span class="hljs-string">&quot;http://localhost:8081&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>BASE_URL<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="10-2-main-js配置"><a href="#10-2-main-js配置" class="headerlink" title="10.2 main.js配置"></a>10.2 main.js配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> VueAxios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-axios&#x27;</span><br><span class="hljs-keyword">import</span> Base <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Base.vue&#x27;</span><br><br>Vue.use(VueAxios, axios);  <span class="hljs-comment">//顺序有关系</span><br>axios.defaults.baseURL = Base.BASE_URL  <span class="hljs-comment">//配置基本地址</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="10-3-发送GET请求"><a href="#10-3-发送GET请求" class="headerlink" title="10.3 发送GET请求"></a>10.3 发送GET请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.axios.get(<span class="hljs-string">&#x27;/user&#x27;</span><br>    <span class="hljs-comment">/**  可以通过如下方式，添加请求头信息</span><br><span class="hljs-comment">    ,&#123;</span><br><span class="hljs-comment">         headers: &#123;</span><br><span class="hljs-comment">             &#x27;token&#x27;: &#x27;hyfetrrabcpo&#x27;</span><br><span class="hljs-comment">         &#125;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    */</span><br>    )<br>    .then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;  <span class="hljs-comment">// 请求成功</span><br>      <span class="hljs-built_in">this</span>.users = resp.data;  <br>    &#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123; <span class="hljs-comment">//请求失败</span><br>       <span class="hljs-built_in">window</span>.console.log(error);  <span class="hljs-comment">//不能直接用console</span><br>    &#125;)<br></code></pre></td></tr></table></figure><h4 id="10-4-发送POST请求"><a href="#10-4-发送POST请求" class="headerlink" title="10.4 发送POST请求"></a>10.4 发送POST请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.axios.post(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>&#125;)  <span class="hljs-comment">//后台必须要用json接收</span><br>.then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">this</span>.users = resp.data;<br>&#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">window</span>.console.log(error);  <span class="hljs-comment">//不能直接用console</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="10-5-发送DELELE请求"><a href="#10-5-发送DELELE请求" class="headerlink" title="10.5 发送DELELE请求"></a>10.5 发送DELELE请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.axios.delete(<span class="hljs-string">&#x27;/user/56&#x27;</span>)<br>.then(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">this</span>.users = resp.data;<br>&#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">window</span>.console.log(error);  <span class="hljs-comment">//不能直接用console</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="十一-VueRouter"><a href="#十一-VueRouter" class="headerlink" title="十一. VueRouter"></a>十一. VueRouter</h3><p>​    Vue Router 是 <a href="http://cn.vuejs.org/">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p><h4 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install vue-router <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h4 id="11-2-配置路由信息"><a href="#11-2-配置路由信息" class="headerlink" title="11.2 配置路由信息"></a>11.2 配置路由信息</h4><p>​    新建一个文件夹叫做router，然后在里面定义一个index.js文件，在该文件中配置路由信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/About.vue&#x27;</span><br><br><br>Vue.use(Router)   <span class="hljs-comment">//使用插件</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>    <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,   <span class="hljs-comment">//选中状态下默认添加的样式</span><br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: Home<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: About<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/about&#x27;</span>   <span class="hljs-comment">//根路径默认会重定向到/about路径</span><br>            <br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="11-3-main-js文件中的配置"><a href="#11-3-main-js文件中的配置" class="headerlink" title="11.3 main.js文件中的配置"></a>11.3 main.js文件中的配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> VueAxios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-axios&#x27;</span><br><span class="hljs-keyword">import</span> Base <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Base.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br>Vue.use(VueAxios, axios);  <span class="hljs-comment">//顺序有关系</span><br>axios.defaults.baseURL = Base.BASE_URL<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>  router<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="11-4-访问与渲染"><a href="#11-4-访问与渲染" class="headerlink" title="11.4 访问与渲染"></a>11.4 访问与渲染</h4><p>使用<code>&lt;router-link&gt;</code>标签设置路径，to属性设置路由路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group-item&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-group-item&quot;</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>&lt;router-view&gt;</code>标签，将对应的路由组件设置到这个标签当中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="11-5-子路由"><a href="#11-5-子路由" class="headerlink" title="11.5 子路由"></a>11.5 子路由</h4><p>​    在路由的配置中使用children来配置子路由。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">children</span>: <span class="hljs-string">[</span><br><span class="hljs-attr">&#123;</span><br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home/game&#x27;,</span><br><span class="hljs-attr">component</span>: <span class="hljs-string">Games</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">]</span><br><br></code></pre></td></tr></table></figure><h4 id="11-6-参数的传递"><a href="#11-6-参数的传递" class="headerlink" title="11.6 参数的传递"></a>11.6 参数的传递</h4><p>​    在使用路由的过程中，经常会碰到路由参数的传递，那么传递方式大概有三种。</p><p>方式一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">路由配置：<br>&#123;path:&#x27;/user/:id&#x27;, component:userDetail, props:true&#125;<br>路由请求:<br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#x27;/user/&#x27; + user.id&quot;</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>取值:<br>在userDetail中使用 props: &#123;id: String&#125; 来接收数据<br></code></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">路由配置：<br>&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;userDetail&#x27;</span>, <span class="hljs-attr">component</span>:userDetail&#125;<br>路由请求:<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path:&#x27;/user&#x27;, query:&#123;id:user.id&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>取值：<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = <span class="hljs-built_in">this</span>.$route.query.id;   <span class="hljs-comment">//用户刷新的时候有用</span><br>&#125;,    <br><span class="hljs-attr">watch</span>:&#123; <span class="hljs-comment">//监听路由的变化</span><br>    <span class="hljs-attr">$route</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">val</span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.id = val.query.id;<br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-7-编程式路由"><a href="#11-7-编程式路由" class="headerlink" title="11.7 编程式路由"></a>11.7 编程式路由</h4><p>方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">实现跳转：<br><span class="hljs-built_in">this</span>.$router.push(&#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>          <span class="hljs-attr">query</span>: &#123;<span class="hljs-attr">id</span>:id&#125;<br>       &#125;);<br>取值：<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = <span class="hljs-built_in">this</span>.$route.query.id;<br>    &#125;,<br>    <br><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-attr">$route</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">val</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = val.query.id;<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs qml">实现跳转：<br><span class="hljs-keyword">this</span>.$router.push(&#123;<br>          <span class="hljs-attribute">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>          <span class="hljs-attribute">query</span>: &#123;<span class="hljs-attribute">id:</span><span class="hljs-string">id</span>&#125;<br>       &#125;);<br>取值：<br><span class="hljs-attribute">props</span>: &#123;<br>    <span class="hljs-attribute">id:</span><span class="hljs-string"> String</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-8-路由守卫"><a href="#11-8-路由守卫" class="headerlink" title="11.8 路由守卫"></a>11.8 路由守卫</h4><h5 id="11-8-1全局路由守卫"><a href="#11-8-1全局路由守卫" class="headerlink" title="11.8.1全局路由守卫"></a>11.8.1全局路由守卫</h5><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">router.beforeEach(<span class="hljs-function"><span class="hljs-params">(to,<span class="hljs-keyword">from</span>,<span class="hljs-built_in">next</span>)</span> =&gt;</span>&#123;<br>    <span class="hljs-built_in">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="11-8-2-局部路由守卫"><a href="#11-8-2-局部路由守卫" class="headerlink" title="11.8.2 局部路由守卫"></a>11.8.2 局部路由守卫</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>    <span class="hljs-comment">// 在渲染该组件的对应路由被 confirm 前调用</span><br>    <span class="hljs-comment">// 不！能！获取组件实例 `this`</span><br>    <span class="hljs-comment">// 因为当守卫执行前，组件实例还没被创建</span><br>&#125;,<br>beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>    <span class="hljs-comment">// 导航离开该组件的对应路由时调用</span><br>    <span class="hljs-comment">// 可以访问组件实例 `this`</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十二-vuex"><a href="#十二-vuex" class="headerlink" title="十二. vuex"></a>十二. vuex</h3><h4 id="12-1-vuex是什么"><a href="#12-1-vuex是什么" class="headerlink" title="12.1 vuex是什么"></a>12.1 vuex是什么</h4><p>​    vuex是对vue项目进行状态管理的js库，对于所有的组件来说，它是一个中央存储，这种模式就保证了只能按照特定的模式来更改状态。</p><p><img src="/myblog/2021/10/22/VUE/vuex.png"></p><h4 id="12-2-vuex的五大核心"><a href="#12-2-vuex的五大核心" class="headerlink" title="12.2 vuex的五大核心"></a>12.2 vuex的五大核心</h4><p><strong><font color="red">state</font></strong></p><p>​    说的直白点就是存储数据的地方。</p><p><strong><font color="red">actions</font></strong></p><p>​    通过异步的方式更改状态值，但是不能直接更改，需要借助于mutations来更改。</p><p><strong><font color="red">mutations</font></strong></p><p>​    通过直接同步的方式更改状态。</p><p><strong><font color="red">getters</font></strong></p><p>​    类似于计算属性，通常是需要通过state来间接计算得到的值。</p><p><strong><font color="red">modules</font></strong></p><p>​    一个项目中因为模块的原因，存在着各种不同的状态，需要按照模块来划分。</p><h4 id="12-3-安装vuex"><a href="#12-3-安装vuex" class="headerlink" title="12.3 安装vuex"></a>12.3 安装vuex</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install vuex <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h4 id="12-4-建立store"><a href="#12-4-建立store" class="headerlink" title="12.4 建立store"></a>12.4 建立store</h4><p>​    新建一个文件夹，名字叫store，在文件夹中新建一个文件，文件名叫index.js，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>Vue.use(Vuex);<br><br><span class="hljs-comment">//state</span><br><span class="hljs-keyword">const</span> state = &#123;<br>    <span class="hljs-attr">todos</span>:[&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;工作一&#x27;</span>, <span class="hljs-attr">complete</span>:<span class="hljs-literal">true</span>&#125;]<br>&#125;<br><span class="hljs-comment">// actions</span><br><span class="hljs-keyword">const</span> actions = &#123;<br><span class="hljs-comment">// 第一个参数必须是context, 第二个参数是需要的业务数据</span><br>    <span class="hljs-function"><span class="hljs-title">addTodo</span>(<span class="hljs-params">context, todo</span>)</span>&#123;<br>    <span class="hljs-comment">// 通过commit的方式提交个mutations, 真正实现对状态修改的其实是mutations</span><br>        context.commit(<span class="hljs-string">&#x27;addTodo&#x27;</span>, todo)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// getter,类似于计算属性，需要根据state来计算出其他想要的属性</span><br><span class="hljs-keyword">const</span> getters = &#123;<br>    <span class="hljs-attr">completedTodoNumber</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> state.todos.reduce(<span class="hljs-function">(<span class="hljs-params">preTotal, current</span>) =&gt;</span> preTotal + (current.complete ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>), <span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//操作</span><br><span class="hljs-keyword">const</span> mutations = &#123;<br>    <span class="hljs-comment">//添加待办事项，第一个参数必须是state, 第二个参数是传递过来的数据</span><br>    <span class="hljs-function"><span class="hljs-title">addTodo</span>(<span class="hljs-params">state, todo</span>)</span> &#123;<br>        state.todos.unshift(todo)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 对外暴露Vuex.Store的对象，在其他任何组件中都可以使用 $store来进行操作</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="12-5-main-js配置"><a href="#12-5-main-js配置" class="headerlink" title="12.5 main.js配置"></a>12.5 main.js配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    store,   <span class="hljs-comment">//引入store</span><br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br><br></code></pre></td></tr></table></figure><h4 id="12-6-组件中使用"><a href="#12-6-组件中使用" class="headerlink" title="12.6 组件中使用"></a>12.6 组件中使用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">this.<span class="hljs-variable">$store</span>.state.todos    <span class="hljs-regexp">//</span>获取状态值<br>this.<span class="hljs-variable">$store</span>.commit(<span class="hljs-string">&#x27;addTodo&#x27;</span>, todo);  <span class="hljs-regexp">//</span>通过mutations中的方法更新状态<br>this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;addTodo&#x27;</span>, todo); <span class="hljs-regexp">//</span>通过actions中的方法异步更新状态<br>this.<span class="hljs-variable">$store</span>.getters.completedTodoNumber;  <span class="hljs-regexp">//</span>获取getters中的属性<br><br></code></pre></td></tr></table></figure><h4 id="12-7-映射函数调用"><a href="#12-7-映射函数调用" class="headerlink" title="12.7 映射函数调用"></a>12.7 映射函数调用</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import &#123;mapState, mapActions, mapGetters, mapMutations&#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>computed: &#123;<br>    ..<span class="hljs-selector-class">.mapState</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;todos&#x27;</span>]</span>),  <span class="hljs-comment">//扩展运算符, 在当前组件中直接使用this的方式调用</span><br>    ..<span class="hljs-selector-class">.mapGetters</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;completedTodoNumber&#x27;</span>]</span>)<br>&#125;,<br>methods: &#123;<br><span class="hljs-comment">//引号中的内容为actions中定义的方法名, 可以直接使用this.addTodo来调用。</span><br>    ..<span class="hljs-selector-class">.mapActions</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;addTodo&#x27;</span>]</span>),  <br>    ..<span class="hljs-selector-class">.mapMutations</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;addTodo&#x27;</span>]</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-8-Modules"><a href="#12-8-Modules" class="headerlink" title="12.8 Modules"></a>12.8 Modules</h4><p>A. 新建一个shopping目录，目录下新建index.js文件，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> state = &#123;<br>    <span class="hljs-attr">todos</span>:[&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;工作一&#x27;</span>, <span class="hljs-attr">complete</span>:<span class="hljs-literal">true</span>&#125;]<br>&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>    <span class="hljs-function"><span class="hljs-title">addTodo</span>(<span class="hljs-params">context, todo</span>)</span>&#123;<br>        context.commit(<span class="hljs-string">&#x27;addTodo&#x27;</span>, todo)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">delDone</span>(<span class="hljs-params">context</span>)</span> &#123;<br>        context.commit(<span class="hljs-string">&#x27;delDone&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">delByIndex</span>(<span class="hljs-params">context, index</span>)</span> &#123;<br>        context.commit(<span class="hljs-string">&#x27;delByIndex&#x27;</span>, index);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> getters = &#123;<br>    <span class="hljs-attr">completedTodoNumber</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> state.todos.reduce(<span class="hljs-function">(<span class="hljs-params">preTotal, current</span>) =&gt;</span> preTotal + (current.complete ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>), <span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//操作</span><br><span class="hljs-keyword">const</span> mutations = &#123;<br>    <span class="hljs-comment">//添加待办事项</span><br>    <span class="hljs-function"><span class="hljs-title">addTodo</span>(<span class="hljs-params">state, todo</span>)</span> &#123;<br>        state.todos.unshift(todo)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">delDone</span>(<span class="hljs-params">state</span>)</span> &#123;<br>        state.todos = state.todos.filter(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> !todo.complete)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">delByIndex</span>(<span class="hljs-params">state, index</span>)</span> &#123;<br>        state.todos.splice(index, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    state,<br>    actions,<br>    getters,<br>    mutations<br>&#125;<br><br></code></pre></td></tr></table></figure><p>B. 在store下的index.js文件中写入如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> shopping <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;shopping&#x27;</span><br><br>Vue.use(Vuex);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    <span class="hljs-attr">modules</span>: &#123;<br>        shopping<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>C. 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">获取对应模块的state值方式一：<br>...mapState(&#123;<span class="hljs-attr">todos</span>: <span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.shopping.todos&#125;)<br>获取对应模块的state值方式二：<br><span class="hljs-attr">todos</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.shopping.todos;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​    至于getters、actions、mutations都被注册到全局上，和之前的使用方式一样。</p><h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><p>1.spring boot跨域支持</p><p>​    A. 在controller或者对应的方法上加上如下代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@CrossOrigin(origins = &#123;<span class="hljs-meta-string">&quot;http://localhost:8080&quot;</span>&#125;)</span><br></code></pre></td></tr></table></figure><p>​    B. 基于过滤器的跨域支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">corsFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource();<br>        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration();<br>        config.setAllowCredentials(<span class="hljs-keyword">true</span>);<br>        config.addAllowedOrigin(<span class="hljs-string">&quot;http://domain1.com&quot;</span>);<br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br>        FilterRegistrationBean bean = <span class="hljs-keyword">new</span> FilterRegistrationBean(<span class="hljs-keyword">new</span> CorsFilter(source));<br>        bean.setOrder(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题</title>
    <link href="/myblog/2021/10/22/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/myblog/2021/10/22/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="一-Java基础"><a href="#一-Java基础" class="headerlink" title="一. Java基础"></a>一. Java基础</h3><blockquote><ol><li>基本数据类型；</li><li>冒泡排序（手写）、二分法查找（手写）、二叉树遍历（前序、中序、后序，手写）</li><li>重载与重写的区别；</li><li>字符串的常用方法有哪些；</li><li>Java中如何实现科学计算，BigDecimal；</li><li>接口与抽象类的区别（要带版本谈）</li><li>Collection与Collections的区别；</li><li>ArrayList底层是如何实现的？LinkedList底层是如何实现的？</li><li>ArrayList 默认长度？是怎么实现扩容的？</li><li>ArrayList与LinkedList的区别；</li><li>Set与List的区别；</li><li>HashMap底层是如何实现的？</li><li>HashMap初始化长度？是如何扩容的？</li><li>HashMap的桶位为什么是2的倍数？</li><li>HashMap线程不安全体现在什么地方?</li><li>HashMap与HashTable的区别；</li><li>线程的创建方式？</li><li>线程的状态?</li><li>在工作中有没有用到过多线程？</li><li>wait 和 sleep 有什么区别？</li><li>有几种线程池？为什么要使用线程池？</li><li>CAS(Compare And Swap) 的过程？</li><li>描述下什么是AQS？</li><li>StringBuffer 与 StringBuilder的区别；</li><li>导致多线程不全安的因素；</li><li>Volatile 关键字的作用？它为什么不能解决原子性的问题？</li><li>ConcurrentHashMap 在JDK7和JDK8中是如何实现的？</li><li>JUC有哪些类？</li><li>JDK8的新特性？Stream流的性能如何？</li><li>什么是函数式接口？</li><li>Synchronized底层是如何实现的？</li><li>Synchronized锁升级的过程；</li><li>IO流的类有哪些？IO流的分类？</li><li>JUC中重入锁中公平锁与非公平锁是怎么实现的？</li><li>反射中常见的类？反射在项目中用在哪里？</li><li>单例模式(手写)</li><li>说出几种设计模式？以及在项目中在哪里用过？</li></ol></blockquote><h3 id="二-网络"><a href="#二-网络" class="headerlink" title="二. 网络"></a>二. 网络</h3><blockquote><ol><li>http协议三次握手四次挥手的过程</li><li>http协议的请求头有哪些？</li><li>http协议的响应头有哪些？</li><li>TCP/IP七层网络协议；四层网络协议；</li><li>TCP和UDP协议的区别；</li><li>http协议与https协议；</li><li>Websocket协议简单说一下；</li></ol></blockquote><h3 id="三-数据库"><a href="#三-数据库" class="headerlink" title="三. 数据库"></a>三. 数据库</h3><blockquote><ol><li>组函数有哪些？</li><li>数据库的优化方式有哪些？</li><li>B-Tree与B+Tree的区别？</li><li>explain主要查看哪些参数？</li><li>什么是回表查询？</li><li>最左原则？</li><li>数据库的行转列；</li><li>MyISAM存储引擎与InnoDB存储引擎的区别？</li><li>数据库设计的三大范式</li><li>数据库的隔离级别？</li><li>列举几个SQL注入</li><li>什么是事务？事务的四种特性？</li><li>什么是脏读、什么是幻读、什么是不可重复读？</li></ol></blockquote><h3 id="四-JDBC"><a href="#四-JDBC" class="headerlink" title="四. JDBC"></a>四. JDBC</h3><blockquote><p>JDBC的执行流程</p></blockquote><h3 id="五-JSP与Servlet"><a href="#五-JSP与Servlet" class="headerlink" title="五. JSP与Servlet"></a>五. JSP与Servlet</h3><blockquote><ol><li>jsp的执行流程</li><li>请求转发与重定向；</li><li>jsp的内置对象；</li><li>工作中日志的级别是什么?</li></ol></blockquote><h3 id="六-SpringMVC"><a href="#六-SpringMVC" class="headerlink" title="六. SpringMVC"></a>六. SpringMVC</h3><blockquote><ol><li>什么是 MVC 设计模式？</li><li>SpringMVC的执行流程；</li><li>SpringMVC 常用的注解有哪些？</li><li>过滤器与拦截器的区别？</li></ol></blockquote><h3 id="七-MyBatis"><a href="#七-MyBatis" class="headerlink" title="七. MyBatis"></a>七. MyBatis</h3><blockquote><ol><li>Mybatis底层是如何实现的？</li><li>#与$的区别；</li><li>多对一、一对多查询；</li><li>通用 sql 如何抽取？</li><li>Mybatis 的批量插入如何实现？</li></ol></blockquote><h3 id="八-Spring"><a href="#八-Spring" class="headerlink" title="八. Spring"></a>八. Spring</h3><blockquote><ol><li>什么是IOC、DI？</li><li>什么是AOP，AOP底层的实现方式？</li><li>AOP在项目中哪里用过？</li><li>Spring Bean的生命周期；</li><li>Spring 如何解决循环依赖？三级缓存有哪些？</li><li>BeanFactory与FactoryBean的区别？</li><li>Spring 事务的七种传播机制？</li><li>Spring 事务是如何实现的？（配置的代码要能背下来）</li></ol></blockquote><h3 id="九-SpringBoot"><a href="#九-SpringBoot" class="headerlink" title="九. SpringBoot"></a>九. SpringBoot</h3><blockquote><ol><li>为什么要使用 SpringBoot.</li><li>SpringBoot常用的注解有哪些？</li><li>SpringBoot的启动流程；</li><li>SpringBoot如何自定义 starter? 你在工作中有没有定义过？</li></ol></blockquote><h3 id="十-Vue"><a href="#十-Vue" class="headerlink" title="十. Vue"></a>十. Vue</h3><blockquote><ol><li>Vue的常用指令有哪些？</li><li>什么是渐进式框架？</li><li>什么是组件化编程？</li><li>聊聊 mvvm 设计模式；</li><li>简单说说路由？</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java测试第三阶段</title>
    <link href="/myblog/2021/10/20/Java%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/"/>
    <url>/myblog/2021/10/20/Java%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h5 id="Java2106第三阶段第四周考试内容"><a href="#Java2106第三阶段第四周考试内容" class="headerlink" title="Java2106第三阶段第四周考试内容"></a>Java2106第三阶段第四周考试内容</h5><p><img src="/myblog/2021/10/20/Java%E6%B5%8B%E8%AF%95%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5/page.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">试题：<br><span class="hljs-bullet">1.</span> 按照上图编写房屋出租系统。<br><span class="hljs-bullet">2.</span> 功能优先，功能做完再完善界面。<br>功能要求：<br><span class="hljs-bullet">1.</span> 显示所有房屋信息。（使用AJAX方式显示）<br><span class="hljs-bullet">2.</span> 添加房屋信息。（添加页面自定义，要求上传图片）<br><span class="hljs-bullet">3.</span> 默认不排序，当点击右上角租金按钮时，按租金升序排列，点击最新时按时间降序排列，点击默认恢复到不排序状态。（使用AJAX操作）。<br></code></pre></td></tr></table></figure><p>数据字典：库名（houses）</p><ol><li><p>房屋表(house)</p><table><thead><tr><th>字段名</th><th>描述</th><th>数据类型</th><th>长度</th><th>是否主外键</th><th>备注</th></tr></thead><tbody><tr><td>house_id</td><td>编号</td><td>int</td><td></td><td>PK</td><td>自增</td></tr><tr><td>house_name</td><td>名称</td><td>varchar</td><td>200</td><td></td><td></td></tr><tr><td>house_pic</td><td>图片</td><td>varchar</td><td>50</td><td></td><td>图片路径</td></tr><tr><td>house_size</td><td>大小</td><td>int</td><td></td><td></td><td>例如：15平米</td></tr><tr><td>house_layout</td><td>户型</td><td>varchar</td><td>50</td><td></td><td>4室1厅</td></tr><tr><td>house_floor</td><td>楼层</td><td>varchar</td><td>50</td><td></td><td>20/28层</td></tr><tr><td>house_master</td><td>户主</td><td>varchar</td><td>50</td><td></td><td>石俊</td></tr><tr><td>house_address</td><td>位置</td><td>varchar</td><td>200</td><td></td><td>洪山-关山 纺织路</td></tr><tr><td>house_estate</td><td>小区</td><td>varchar</td><td>200</td><td></td><td>金地格林东郡</td></tr><tr><td>house_price</td><td>租金</td><td>double</td><td></td><td></td><td>1330</td></tr><tr><td>house_type</td><td>类型</td><td>int</td><td></td><td>FK</td><td>引用house_type</td></tr><tr><td>create_date</td><td>创建时间</td><td>date</td><td></td><td></td><td></td></tr></tbody></table></li><li><p>类型表(house_type)</p></li></ol><table><thead><tr><th>字段名</th><th>描述</th><th>数据类型</th><th>长度</th><th>是否主外键</th><th>备注</th></tr></thead><tbody><tr><td>type_id</td><td>编号</td><td>int</td><td></td><td>PK</td><td>自增</td></tr><tr><td>type_name</td><td>名称</td><td>varchar</td><td>200</td><td></td><td>例如：合租</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/myblog/2021/10/20/Git/"/>
    <url>/myblog/2021/10/20/Git/</url>
    
    <content type="html"><![CDATA[<p><img src="/myblog/2021/10/20/Git/logo.jpg" alt="logo">  </p><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr><blockquote><ul><li><p>在单人开发过程中，需要进行版本管理，以利于开发进度的控制。</p></li><li><p>在多人开发过程中，不仅需要版本管理，还需要进行多人协同控制。</p></li></ul></blockquote><h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><hr><blockquote><ul><li>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li><li>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></li></ul></blockquote><h3 id="三、Git安装"><a href="#三、Git安装" class="headerlink" title="三、Git安装"></a>三、Git安装</h3><hr><h4 id="3-1-下载Git"><a href="#3-1-下载Git" class="headerlink" title="3.1 下载Git"></a>3.1 下载Git</h4><blockquote><p>下载Git <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></blockquote><table><thead><tr><th align="center">下载git</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/install1.jpg" alt="install1"></td></tr></tbody></table><h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><blockquote><p>安装，除了安装位置外，其他一直下一步即可</p></blockquote><h4 id="3-3-基本配置"><a href="#3-3-基本配置" class="headerlink" title="3.3 基本配置"></a>3.3 基本配置</h4><blockquote><ul><li><p>安装后，打开cmd ，自报家门</p></li><li><p>如下信息会在提交代码时要使用，记录在你的每次提交中。以后才知道哪次提交是谁做的。</p></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Your Name&quot;  #用户名<br>git config --global user.email &quot;email@example.com&quot;  #邮箱<br><span class="hljs-meta">#</span><span class="bash"> 查看信息</span><br>git config -l <br></code></pre></td></tr></table></figure><h4 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h4><blockquote><p>测试：cmd中执行 ,查看git版本</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git version  <br></code></pre></td></tr></table></figure><h3 id="四、架构"><a href="#四、架构" class="headerlink" title="四、架构"></a>四、架构</h3><hr><blockquote><ul><li><p>版本库：工作区中有一个隐藏目录 <code>.git</code>，这个目录不属于工作区，而是git的 <code>版本库</code>，是git管理的所有内容 </p></li><li><p>暂存区：版本库中包含一个临时区域，保存下一步要提交的文件。</p></li><li><p>分支：版本库中包含若干分支，提交的文件存储在分支中</p></li></ul></blockquote><table><thead><tr><th align="center">架构图</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%9A%82%E5%AD%98%E5%8C%BA.jpg" alt="暂存区"></td></tr></tbody></table><h3 id="五、仓库"><a href="#五、仓库" class="headerlink" title="五、仓库"></a>五、仓库</h3><hr><blockquote><p>对应的就是一个<a href>目录</a>，这个目录中的所有文件被git管理起来。</p><p>以后会将一个<a href>项目的根目录</a>，作为仓库。</p><p>仓库中的每个文件的改动 都由git跟踪。</p></blockquote><h4 id="5-1-新建仓库"><a href="#5-1-新建仓库" class="headerlink" title="5.1 新建仓库"></a>5.1 新建仓库</h4><blockquote><p>选择一个目录，执行指令：<a href>git init</a></p></blockquote><table><thead><tr><th align="center">新建仓库</th><th align="center">仓库目录</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.jpg" alt="新建仓库"></td><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%932.jpg" alt="新建仓库2"></td></tr></tbody></table><h4 id="5-2-工作区"><a href="#5-2-工作区" class="headerlink" title="5.2 工作区"></a>5.2 工作区</h4><blockquote><p>执行<a href>git init</a>的目录即为工作区，如上例，<a href>D:\repo1</a>目录即为工作区【不包含<a href>.git</a>目录】</p></blockquote><blockquote><p>所有文件，都首先在工作区新建，然后可以存入仓库(版本库)，进行版本控制。</p></blockquote><h4 id="5-3-暂存区"><a href="#5-3-暂存区" class="headerlink" title="5.3 暂存区"></a>5.3 暂存区</h4><blockquote><p>暂存区也在 <a href>.git</a> 目录内，工作区的文件进入仓库时，要先进入暂存区。</p></blockquote><h4 id="5-4-分支"><a href="#5-4-分支" class="headerlink" title="5.4 分支"></a>5.4 分支</h4><blockquote><p>版本控制，简单说，就是记录文件的诸多版本，分支就是这些版本的最终记录位置。</p></blockquote><h3 id="六、基本操作"><a href="#六、基本操作" class="headerlink" title="六、基本操作"></a>六、基本操作</h3><hr><h4 id="6-1-查看仓库状态"><a href="#6-1-查看仓库状态" class="headerlink" title="6.1 查看仓库状态"></a>6.1 查看仓库状态</h4><blockquote><p>执行 <a href>git  status</a> 可以看到工作区中文件的状态</p></blockquote><table><thead><tr><th align="center">未记录过的文件，是未跟踪状态</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%811.jpg" alt="查看状态1"></td></tr></tbody></table><h4 id="6-2-暂存文件"><a href="#6-2-暂存文件" class="headerlink" title="6.2 暂存文件"></a>6.2 暂存文件</h4><blockquote><p>执行 <a href>git add .</a> 将工作区中的文件全部<a href>存入暂存区</a></p></blockquote><table><thead><tr><th align="center">将工作区中的文件存入暂存区</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%9A%82%E5%AD%98%E6%96%87%E4%BB%B6.jpg" alt="暂存文件"></td></tr></tbody></table><h4 id="6-3-提交文件"><a href="#6-3-提交文件" class="headerlink" title="6.3 提交文件"></a>6.3 提交文件</h4><blockquote><p>执行 <a href>git commit -m “这里写提交的描述信息”</a> 作用是将暂存区的文件存入分支，形成一个版本</p></blockquote><table><thead><tr><th align="center">提交文件，形成一个版本</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6.jpg" alt="提交文件"></td></tr></tbody></table><h3 id="七、远程仓库"><a href="#七、远程仓库" class="headerlink" title="七、远程仓库"></a>七、远程仓库</h3><hr><blockquote><p>第5章中的仓库，其实是本地仓库。</p><p>当多人协同开发时，每人都在自己的本地仓库维护版本。</p><p>但很重要的一点是，多人之间需要共享代码、合并代码，此时就需要一个<a href>远程仓库</a>。</p></blockquote><h4 id="7-1-远程仓库工作模式"><a href="#7-1-远程仓库工作模式" class="headerlink" title="7.1 远程仓库工作模式"></a>7.1 远程仓库工作模式</h4><table><thead><tr><th align="center">远程仓库工作模式</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.jpg" alt="远程仓库"></td></tr></tbody></table><h4 id="7-2-远程仓库选型"><a href="#7-2-远程仓库选型" class="headerlink" title="7.2 远程仓库选型"></a>7.2 远程仓库选型</h4><blockquote><ul><li><p>有很多远程仓库可以选择，比如 github(<a href="https://github.com/">https://github.com/</a>),码云(<a href="https://gitee.com/">https://gitee.com/</a>)；</p><p> 此两种可以注册自己测试使用，但如果是商业项目，需要更多支持需要付费。</p></li><li><p>公司内部也可以有自己构建的远程仓库(<a href="http://qianfeng.qfjava.cn:8087/users/sign_in">http://qianfeng.qfjava.cn:8087/users/sign_in</a>)。</p></li></ul></blockquote><h4 id="7-3-基本操作"><a href="#7-3-基本操作" class="headerlink" title="7.3 基本操作"></a>7.3 基本操作</h4><blockquote><p>每个开发人员，在面对远程仓库时，会面临的一些基本操作。</p></blockquote><h5 id="7-3-1-注册git服务器账号"><a href="#7-3-1-注册git服务器账号" class="headerlink" title="7.3.1 注册git服务器账号"></a>7.3.1 注册git服务器账号</h5><blockquote><p>在 <a href="https://gitee.com/">码云</a> 注册账号，并登录。</p><p>进入公司后，很可能会使用公司自己搭建的git服务器，则账号向领导索要即可</p></blockquote><table><thead><tr><th align="center">点击注册，完成注册过程</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E7%A0%81%E4%BA%91%E6%B3%A8%E5%86%8C.jpg" alt="码云注册"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">登录后显示主页</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E7%A0%81%E4%BA%91%E7%99%BB%E5%BD%95.jpg" alt="码云登录"></td></tr></tbody></table><h5 id="7-3-2-新建远程仓库"><a href="#7-3-2-新建远程仓库" class="headerlink" title="7.3.2 新建远程仓库"></a>7.3.2 新建远程仓库</h5><table><thead><tr><th align="center">创建远程私有仓库-01</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%931.jpg" alt="创建远程仓库1"></td></tr></tbody></table><table><thead><tr><th align="center">创建远程私有仓库-02</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932.jpg" alt="创建远程仓库2"></td></tr></tbody></table><table><thead><tr><th align="center">创建远程私有仓库-03</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%933.jpg" alt="创建远程仓库3"></td></tr></tbody></table><h5 id="7-3-3-本地关联远程仓库"><a href="#7-3-3-本地关联远程仓库" class="headerlink" title="7.3.3 本地关联远程仓库"></a>7.3.3 本地关联远程仓库</h5><blockquote><p>本文档中选用仓库的 https协议的地址，将此地址关联到本地git中</p></blockquote><table><thead><tr><th align="center">如此后，本地即可用“origin” 代指远程仓库</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.jpg" alt="关联远程仓库"></td></tr></tbody></table><h5 id="7-3-4-推送文件到远程仓库"><a href="#7-3-4-推送文件到远程仓库" class="headerlink" title="7.3.4 推送文件到远程仓库"></a>7.3.4 推送文件到远程仓库</h5><blockquote><p>将本地仓库中已经commit的内容push到远程仓库，以共享自己的代码。</p></blockquote><table><thead><tr><th align="center">push</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/push%E5%88%B0%E8%BF%9C%E7%A8%8B.jpg" alt="push到远程"></td></tr></tbody></table><table><thead><tr><th align="center">输入凭证，如此码云才能接受此次上传的内容</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/push%E5%88%B0%E8%BF%9C%E7%A8%8B_%E8%BE%93%E5%85%A5%E5%87%AD%E8%AF%81.jpg" alt="push到远程_输入凭证"></td></tr></tbody></table><h5 id="7-3-5-克隆远程仓库"><a href="#7-3-5-克隆远程仓库" class="headerlink" title="7.3.5 克隆远程仓库"></a>7.3.5 克隆远程仓库</h5><blockquote><p>如果仓库已经由别人创建完毕，我们需要其中的内容，则可以通过 <a href>git clone</a> 将其复制到本地。</p></blockquote><table><thead><tr><th align="center">新建目录“repo2”，然后在其中执行 git clone</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/clone%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.jpg" alt="clone远程仓库"></td></tr></tbody></table><table><thead><tr><th align="center">远程仓库，复制到本地，并自动初始化为一个本地仓库</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/clone%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932.jpg" alt="clone远程仓库2"></td></tr></tbody></table><h5 id="7-3-6-代码共享"><a href="#7-3-6-代码共享" class="headerlink" title="7.3.6 代码共享"></a>7.3.6 代码共享</h5><blockquote><p>多人协同开发时，写好代码的<a href>git push</a> 上传到远程仓库；需要代码的 <a href>git pull</a> 拉取代码即可。 </p></blockquote><table><thead><tr><th align="center">有人再次将本地仓库内容，上传到了远程仓库</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%931.jpg" alt="pull远程仓库1"></td></tr></tbody></table><table><thead><tr><th align="center">重点：此时另一方如果想获得更新，则需要做一次拉取 git pull</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%932.jpg" alt="pull远程仓库2"></td></tr></tbody></table><h5 id="7-3-7-命令汇总"><a href="#7-3-7-命令汇总" class="headerlink" title="7.3.7 命令汇总"></a>7.3.7 命令汇总</h5><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git   remote   add  标识名(master)  远程地址</td><td>本地关联远程仓库</td></tr><tr><td>git   push  标识名  master</td><td>将本地仓库内容上传到远程仓库</td></tr><tr><td>git   pull  标识名   master</td><td>从远程仓库下载内容到本地仓库</td></tr><tr><td>git   clone  远程地址</td><td>将远程仓库复制到本地，并自动形成一个本地仓库</td></tr></tbody></table><h3 id="八、分支"><a href="#八、分支" class="headerlink" title="八、分支"></a>八、分支</h3><hr><h4 id="8-1-分支简介"><a href="#8-1-分支简介" class="headerlink" title="8.1 分支简介"></a>8.1 分支简介</h4><blockquote><ul><li><p>分支，是一个个版本最终存储的位置。</p></li><li><p>分支，就是一条时间线，每次<a href>git commit</a>形成一个个版本，一个个版本依次存储在分支的一个个提交点上。</p></li></ul></blockquote><table><thead><tr><th align="center">分支由多个提交点组成，分支上会有一个指针，默认总是指向最新的提交点</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%88%86%E6%94%AF%E5%9B%BE%E4%BE%8B1.jpg" alt="分支图例1"></td></tr></tbody></table><h4 id="8-2-分支操作"><a href="#8-2-分支操作" class="headerlink" title="8.2 分支操作"></a>8.2 分支操作</h4><h5 id="8-2-1-查看分支"><a href="#8-2-1-查看分支" class="headerlink" title="8.2.1 查看分支"></a>8.2.1 查看分支</h5><blockquote><ul><li><p>查看当前仓库的分支 <a href>git branch</a></p></li><li><p>仓库中默认只有 master 分支</p></li><li><p>执行<a href>git commit</a>时，默认是在master分支上保存版本。</p></li></ul></blockquote><table><thead><tr><th align="center">默认只有master分支</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF-master.jpg" alt="查看分支-master"></td></tr></tbody></table><h5 id="8-2-2-创建分支"><a href="#8-2-2-创建分支" class="headerlink" title="8.2.2 创建分支"></a>8.2.2 创建分支</h5><blockquote><ul><li><p>在商业项目开发过程中，我们不会轻易的在<a href>master</a>分支上做操作。</p></li><li><p>我们会新建一个<a href>开发用的分支</a>，在此分支上做版本的记录。</p><p>当代码确实没有问题时，才会将开发分支上成熟的代码版本添加到<a href>master</a>分支上。</p></li><li><p>保证开发过程中，可以及时记录版本，又保证<a href>master</a>分支上每个提交点都是稳健版本。</p></li></ul></blockquote><table><thead><tr><th align="center">创建分支</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF.jpg" alt="新建分支"></td></tr></tbody></table><h5 id="8-2-3-切换分支"><a href="#8-2-3-切换分支" class="headerlink" title="8.2.3 切换分支"></a>8.2.3 切换分支</h5><blockquote><ul><li><p>默认情况下，当前使用的分支是 master分支</p></li><li><p>可以切换到 dev分支，则后续的<a href>git commit</a> 便会在dev分支上新建版本(提交点)</p></li></ul></blockquote><table><thead><tr><th align="center">切换分支</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.jpg" alt="切换分支"></td></tr></tbody></table><table><thead><tr><th align="center">再次查看分支情况</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.jpg" alt="查看分支"></td></tr></tbody></table><h4 id="8-3-新建分支细节"><a href="#8-3-新建分支细节" class="headerlink" title="8.3 新建分支细节"></a>8.3 新建分支细节</h4><blockquote><p>新建分支时，新分支，默认有哪些内容？分支中包含了哪些次提交？</p></blockquote><h5 id="8-3-1-新分支初始内容"><a href="#8-3-1-新分支初始内容" class="headerlink" title="8.3.1 新分支初始内容"></a>8.3.1 新分支初始内容</h5><blockquote><p>每个分支都有一个<a href>指针</a>，新建一个分支，首先是新建一个<a href>指针</a>。</p><p>而且新分支的指针会和当前分支指向<a href>同一个提交点</a>。</p><p>新分支包含的提交点就是从第一个提交点到分支指针指向的提交点。</p></blockquote><table><thead><tr><th align="center">每个分支都有一个指针，新建一个分支，首先是新建一个指针</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E7%BB%86%E8%8A%821.jpg" alt="新建分支细节1"></td></tr></tbody></table><h5 id="8-3-2-多分支走向"><a href="#8-3-2-多分支走向" class="headerlink" title="8.3.2 多分支走向"></a>8.3.2 多分支走向</h5><blockquote><p>在master分支和新分支，分别进行 <a href>git add</a> 和 <a href>git commit</a></p><p>分支情况如下图：</p></blockquote><table><thead><tr><th align="center">master分支未动，在dev分支增加一次commit</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E7%BB%86%E8%8A%822.jpg" alt="新建分支细节2"></td></tr></tbody></table><table><thead><tr><th align="center">master分支增加一个commit，dev分支再增加一个commit</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E7%BB%86%E8%8A%823.jpg" alt="新建分支细节3"></td></tr></tbody></table><h5 id="8-3-3-分支提交日志"><a href="#8-3-3-分支提交日志" class="headerlink" title="8.3.3 分支提交日志"></a>8.3.3 分支提交日志</h5><blockquote><p>查看分支的提交日志，进而看到分支中提交点的详细情况。</p></blockquote><table><thead><tr><th align="center">提交情况如下</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%8F%90%E4%BA%A4%E6%97%A5%E5%BF%97.jpg" alt="提交日志"></td></tr></tbody></table><table><thead><tr><th align="center">查看当前分支的提交日志</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%8F%90%E4%BA%A4%E6%97%A5%E5%BF%972.jpg" alt="提交日志2"></td></tr></tbody></table><h4 id="8-4-分支合并"><a href="#8-4-分支合并" class="headerlink" title="8.4 分支合并"></a>8.4 分支合并</h4><blockquote><p>两个分支内容的合并</p></blockquote><blockquote><p><a href>git merge 分支a</a>  合并分支a</p></blockquote><blockquote><p>合并的方式有两种：快速合并 和  三方合并。</p></blockquote><h5 id="8-4-1-快速合并"><a href="#8-4-1-快速合并" class="headerlink" title="8.4.1 快速合并"></a>8.4.1 快速合并</h5><blockquote><p>如果分支A当前的修改，是完全基于分支B的修改而来，则B分支合并A分支，就是移动指针即可。</p></blockquote><table><thead><tr><th align="center">合并前分支状态</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E7%BB%86%E8%8A%822.jpg" alt="新建分支细节2"></td></tr></tbody></table><table><thead><tr><th align="center">快速合并效果（master 合并 dev）</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%BF%AB%E9%80%9F%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6.jpg" alt="快速分支合并"></td></tr></tbody></table><h5 id="8-4-2-三方合并"><a href="#8-4-2-三方合并" class="headerlink" title="8.4.2 三方合并"></a>8.4.2 三方合并</h5><blockquote><p>在不具备快速合并的条件下，会采用三方合并。</p></blockquote><table><thead><tr><th align="center">合并前，分支状态</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E7%BB%86%E8%8A%823.jpg" alt="新建分支细节3"></td></tr></tbody></table><table><thead><tr><th align="center">三方合并，将<code>2</code>和<code>3</code>的更改都累加在<code>1</code>上，形成新的提交点</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E4%B8%89%E6%96%B9%E5%90%88%E5%B9%B6.jpg" alt="三方合并"></td></tr></tbody></table><h5 id="8-4-3-合并冲突"><a href="#8-4-3-合并冲突" class="headerlink" title="8.4.3 合并冲突"></a>8.4.3 合并冲突</h5><blockquote><p>两个分支进行合并，但它们含有对同一个文件的修改，则在合并时出现冲突，git无法决断该保留改文件哪个分支的修改。</p></blockquote><h6 id="8-4-3-1-冲突演示"><a href="#8-4-3-1-冲突演示" class="headerlink" title="8.4.3.1 冲突演示"></a>8.4.3.1 冲突演示</h6><blockquote><p>场景模拟如下：</p></blockquote><table><thead><tr><th align="center">master分支修改hig.txt文件</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%86%B2%E7%AA%811.jpg" alt="冲突1"></td></tr></tbody></table><table><thead><tr><th align="center">dev分支修改hig.txt</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%86%B2%E7%AA%812.jpg" alt="冲突2"></td></tr></tbody></table><blockquote><p>在master分支 合并 dev分支</p></blockquote><table><thead><tr><th align="center">合并dev分支</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%86%B2%E7%AA%813.jpg" alt="冲突3"></td></tr></tbody></table><blockquote><p>此时，打开hig.txt 文件：</p></blockquote><table><thead><tr><th align="center">冲突后，git会将两个分支的内容都展示在文件中</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%86%B2%E7%AA%814.jpg" alt="冲突4"></td></tr></tbody></table><h6 id="8-4-3-2-冲突解决"><a href="#8-4-3-2-冲突解决" class="headerlink" title="8.4.3.2 冲突解决"></a>8.4.3.2 冲突解决</h6><blockquote><p>出现冲突后，如要由两个开发人员当面协商，该如何取舍，为冲突文件定义最终内容。</p><p>解决方案：</p><ol><li>保留某一方的，删除另一方的</li><li>保留双方的</li><li>但无论如何，要记得删除  <a href>&lt;&lt;&lt;&lt;  ====  &gt;&gt;&gt;&gt;</a> 这些</li><li>本质是两人协商为冲突的内容，定制出合理的内容。</li></ol></blockquote><table><thead><tr><th align="center">根据协商，再次编辑文件</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%86%B2%E7%AA%815.jpg" alt="冲突5"></td></tr></tbody></table><table><thead><tr><th align="center">提交 再次编辑后的文件</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%86%B2%E7%AA%816.jpg" alt="冲突6"></td></tr></tbody></table><h3 id="九、Idea关联Git"><a href="#九、Idea关联Git" class="headerlink" title="九、Idea关联Git"></a>九、Idea关联Git</h3><hr><h4 id="9-1-关联Git"><a href="#9-1-关联Git" class="headerlink" title="9.1 关联Git"></a>9.1 关联Git</h4><blockquote><p><a href>File &gt; Settings</a>  关联过程是自动的</p></blockquote><table><thead><tr><th align="center">此处关联是Idea可以自动完成的</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E5%85%B3%E8%81%94git.jpg" alt="idea-关联git"></td></tr></tbody></table><h4 id="9-2-创建仓库"><a href="#9-2-创建仓库" class="headerlink" title="9.2 创建仓库"></a>9.2 创建仓库</h4><blockquote><ul><li><p>新建项目后，将项目目录创建为git仓库</p></li><li><p>注意： 要在建仓库前，设置<a href>忽略文件 “.gitignore”</a></p><p>作用：被忽略的文件会被版本记录忽略，版本中不包含它们。</p><p>范围：不需要和其他开发共享的文件，具体见下图。</p></li></ul></blockquote><table><thead><tr><th align="center">创建仓库前，先添加忽略文件</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%930.jpg" alt="idea-创建仓库0"></td></tr></tbody></table><table><thead><tr><th align="center">将项目目录初始化为一个仓库</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%931.jpg" alt="idea-创建仓库1"></td></tr><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%932.jpg" alt="idea-创建仓库2"></td></tr></tbody></table><h4 id="9-3-提交-commit"><a href="#9-3-提交-commit" class="headerlink" title="9.3 提交-commit"></a>9.3 提交-commit</h4><blockquote><p>创建好仓库后，做第一次提交。</p></blockquote><table><thead><tr><th align="center">选择提交菜单</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-commit.jpg" alt="idea-commit"></td></tr></tbody></table><table><thead><tr><th align="center">选择提交文件，定义提交信息</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-commit2.jpg" alt="idea-commit2"></td></tr></tbody></table><table><thead><tr><th align="center">之后会有些友好提示，可以忽略，点击<code>“commit”</code>即可</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-commit3.jpg" alt="idea-commit3"></td></tr></tbody></table><h4 id="9-4-创建分支"><a href="#9-4-创建分支" class="headerlink" title="9.4 创建分支"></a>9.4 创建分支</h4><blockquote><p>新建开发分支</p></blockquote><table><thead><tr><th align="center">点击右下角链接，即可</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF.jpg" alt="idea-新建分支"></td></tr></tbody></table><table><thead><tr><th align="center">新建分支</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF2.jpg" alt="idea-新建分支2"></td></tr></tbody></table><table><thead><tr><th align="center">查看当前分支</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF3.jpg" alt="idea-新建分支3"></td></tr></tbody></table><h4 id="9-5-上传到远程仓库-push"><a href="#9-5-上传到远程仓库-push" class="headerlink" title="9.5 上传到远程仓库(push)"></a>9.5 上传到远程仓库(push)</h4><blockquote><ul><li><p>请首先参照第7章，创建一个远程仓库。</p></li><li><p>要求是裸库，且建议库名和项目名同名。</p></li></ul></blockquote><table><thead><tr><th align="center">选择<code>push</code>菜单</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-push.jpg" alt="idea-push"></td></tr></tbody></table><table><thead><tr><th align="center">定义远程仓库地址</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-push3.jpg" alt="idea-push3"></td></tr></tbody></table><table><thead><tr><th align="center">执行，push操作</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-push4.jpg" alt="idea-push4"></td></tr></tbody></table><table><thead><tr><th align="center">push成功后 ，弹窗提示</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-push5.jpg" alt="idea-push5"></td></tr></tbody></table><h4 id="9-6-复制到本地仓库-clone"><a href="#9-6-复制到本地仓库-clone" class="headerlink" title="9.6 复制到本地仓库(clone)"></a>9.6 复制到本地仓库(clone)</h4><blockquote><p>如果有建好的远程仓库，比如公司内已经在用的仓库，或者github，码云上的一些公开仓库，</p><p>可以将远程仓库的项目复制到本地使用。</p></blockquote><table><thead><tr><th align="center">点击克隆菜单</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-clone1.jpg" alt="idea-clone"></td></tr></tbody></table><table><thead><tr><th align="center">输入如远程仓库地址</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-clone2.jpg" alt="idea-clone2"></td></tr></tbody></table><table><thead><tr><th align="center">打开项目</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-clone3.jpg" alt="idea-clone3"></td></tr></tbody></table><table><thead><tr><th align="center">打开项目，选项</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-clone4.jpg" alt="idea-clone4"></td></tr></tbody></table><h4 id="9-7-更新本地项目"><a href="#9-7-更新本地项目" class="headerlink" title="9.7 更新本地项目"></a>9.7 更新本地项目</h4><blockquote><p>如果远程仓库有更新，则你的本地项目也需要一起更新。</p></blockquote><table><thead><tr><th align="center">选择pull菜单</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-pull1.jpg" alt="idea-pull1"></td></tr></tbody></table><table><thead><tr><th align="center">执行 pull操作</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-pull2.jpg" alt="idea-pull2"></td></tr></tbody></table><table><thead><tr><th align="center">更新日志显示</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-pull3.jpg" alt="idea-pull3"></td></tr></tbody></table><h4 id="9-8-冲突解决"><a href="#9-8-冲突解决" class="headerlink" title="9.8 冲突解决"></a>9.8 冲突解决</h4><blockquote><p>合并分支时，如果出现冲突，则需要解决冲突。</p></blockquote><table><thead><tr><th align="center">冲突出现，弹窗中可以选择如下</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E5%86%B2%E7%AA%81.jpg" alt="idea-冲突"></td></tr></tbody></table><table><thead><tr><th align="center">也可以直接修改冲突文件，然后commit即可</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/idea-%E5%86%B2%E7%AA%812.jpg" alt="idea-冲突2"></td></tr></tbody></table><h3 id="十、多人协同开发"><a href="#十、多人协同开发" class="headerlink" title="十、多人协同开发"></a>十、多人协同开发</h3><hr><blockquote><p>多人开发协同，git操作</p></blockquote><h4 id="10-1-项目管理员-项目经理"><a href="#10-1-项目管理员-项目经理" class="headerlink" title="10.1 项目管理员( 项目经理 )"></a>10.1 项目管理员( 项目经理 )</h4><blockquote><p>1&gt; 由管理员负责创建一个远程库，初始的库中什么也没有，为裸库。库的名称建议和项目同名</p></blockquote><blockquote><p>2&gt; 管理员会在idea中创建一个初始项目,其中包含.gitignore文件。                                                                                               并在项目根目录下 建立本地库。并建立 dev分支。</p></blockquote><blockquote><p>3&gt; 管理员将本地库上传到远程库</p></blockquote><blockquote><p>4&gt; 将其他开发人员拉入远程库的 <a href>开发成员列表中</a> ，使得其他开发人员可以访问该远程库。</p><p>流程如下：</p></blockquote><table><thead><tr><th align="center">点击添加成员</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E6%88%90%E5%91%98.jpg" alt="添加开发成员"></td></tr></tbody></table><table><thead><tr><th align="center">选择直接添加</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E6%88%90%E5%91%982.jpg" alt="添加开发成员2"></td></tr></tbody></table><table><thead><tr><th align="center">提交</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E6%88%90%E5%91%983.jpg" alt="添加开发成员3"></td></tr></tbody></table><table><thead><tr><th align="center">查看已添加的开发成员</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E6%B7%BB%E5%8A%A0%E5%BC%80%E5%8F%91%E6%88%90%E5%91%984.jpg" alt="添加开发成员4"></td></tr></tbody></table><blockquote><p>5&gt; master分支设置为 <a href>protected分支</a>，只有管理员有权限将代码合并到其中。dev分支设置为 <a href>常规分支</a>所有开发人员        都可以其中合并代码</p></blockquote><table><thead><tr><th align="center">进入分支设置</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E4%BF%9D%E6%8A%A4%E5%88%86%E6%94%AF1.jpg" alt="保护分支1"></td></tr></tbody></table><table><thead><tr><th align="center">设置保护分支，让master分支不能被随更改</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E4%BF%9D%E6%8A%A4%E5%88%86%E6%94%AF2.jpg" alt="保护分支2"></td></tr></tbody></table><h4 id="10-2-开发人员"><a href="#10-2-开发人员" class="headerlink" title="10.2 开发人员"></a>10.2 开发人员</h4><blockquote><ul><li><p>初始化：在idea中clone 远程库，获得项目。会建立本地库</p></li><li><p>后续的开发中，都要在dev分支上进行。开发完一个功能并测试通过后就commit      提交到本地的dev分支中，然后 上传(push)到远程dev分支中。    </p></li><li><p>需要更新项目内容时，通过 pull 从远程仓库拉取内容。                                                                       </p></li><li><p>注意：多人协同时，每次在 push 到远程库前，都先做一次pull，一来是把远程最新内容合并到本地，二来是核实本地内容是否和远程内容有冲突。</p></li><li><p>后续的开发，会接到一个个的功能任务，往复操作 2&gt;、3&gt;、4&gt; 而已。</p></li></ul></blockquote><h3 id="十一、经典问题"><a href="#十一、经典问题" class="headerlink" title="十一、经典问题"></a>十一、经典问题</h3><hr><blockquote><p>在使用https协议做push时，如果曾经使用过码云，但密码有过改动，此时会报错</p></blockquote><table><thead><tr><th align="center">使用https协议报错</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%9D%911.jpg" alt="坑1"></td></tr></tbody></table><blockquote><p>解决方案:  <a href>控制面板  》 凭据管理器 》</a> 删除对应凭证，再次使用时会提示重新输入密码。</p></blockquote><table><thead><tr><th align="center">删除之前的码云凭证，然后重新push即可</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/Git/%E5%9D%912.jpg" alt="坑2"></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/myblog/2021/10/20/springboot/"/>
    <url>/myblog/2021/10/20/springboot/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot的使用"><a href="#SpringBoot的使用" class="headerlink" title="SpringBoot的使用"></a>SpringBoot的使用</h3><p>[TOC]</p><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr><h4 id="1-1-初始化配置"><a href="#1-1-初始化配置" class="headerlink" title="1.1 初始化配置"></a>1.1 初始化配置</h4><blockquote><p>为了使用SSM框架去开发，准备SSM框架的模板配置。</p></blockquote><h4 id="1-2-整合第三方框架"><a href="#1-2-整合第三方框架" class="headerlink" title="1.2 整合第三方框架"></a>1.2 整合第三方框架</h4><blockquote><p>为了Spring整合第三方框架，单独的去编写xml文件。</p></blockquote><h4 id="1-3-后期维护"><a href="#1-3-后期维护" class="headerlink" title="1.3 后期维护"></a>1.3 后期维护</h4><blockquote><p>后期SSM项目后期xml文件特别多，维护xml文件的成本是很高的</p></blockquote><h4 id="1-4-部署工程"><a href="#1-4-部署工程" class="headerlink" title="1.4 部署工程"></a>1.4 部署工程</h4><blockquote><p>SSM工程部署也是很麻烦，依赖第三方的容器</p></blockquote><h4 id="1-5-敏捷式开发"><a href="#1-5-敏捷式开发" class="headerlink" title="1.5 敏捷式开发"></a>1.5 敏捷式开发</h4><blockquote><p>基于Java的SSM开发方式是很笨重，而现在的python，php，NodeJS的敏捷式开发已经盖过Java一头</p></blockquote><h3 id="二、SpringBoot介绍"><a href="#二、SpringBoot介绍" class="headerlink" title="二、SpringBoot介绍"></a>二、SpringBoot介绍</h3><hr><blockquote><p>SpringBoot是由Pivotal团队研发的，SpringBoot并不是一门新技术，只是将之前常用的Spring，SpringMVC，data-jpa等常用的框架封装到了一起，帮助你隐藏这些框架的整合细节，实现敏捷开发。</p><p>SpringBoot就是一个工具集。</p></blockquote><table><thead><tr><th align="center">LOGO</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587375104537.png" alt="1587375104537"></td></tr></tbody></table><blockquote><p>SpringBoot特点：</p><ul><li>SpringBoot项目不需要模板化的配置。</li><li>SpringBoot中整合第三方框架时，只需要导入相应的starter依赖包（启动器），就自动整合了。</li><li>SpringBoot默认只有一个.properties的配置文件，不推荐使用xml，推荐使用yml，后期会采用.java的文件去编写配置信息。</li><li>SpringBoot工程在部署时，采用的是jar包的方式，内部自动依赖Tomcat容器，提供了多环境的配置。</li><li>后期要学习的微服务框架SpringCloud需要建立在SpringBoot的基础上。</li></ul></blockquote><h3 id="三、SpringBoot快速入门【重点】"><a href="#三、SpringBoot快速入门【重点】" class="headerlink" title="三、SpringBoot快速入门【重点】"></a>三、SpringBoot快速入门【<code>重点</code>】</h3><hr><h4 id="3-1-快速构建SpringBoot"><a href="#3-1-快速构建SpringBoot" class="headerlink" title="3.1 快速构建SpringBoot"></a>3.1 快速构建SpringBoot</h4><h5 id="3-1-1-选择构建项目的类型"><a href="#3-1-1-选择构建项目的类型" class="headerlink" title="3.1.1 选择构建项目的类型"></a>3.1.1 选择构建项目的类型</h5><table><thead><tr><th align="center">选择构建项目的类型</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587376646848.png" alt="1587376646848"></td></tr></tbody></table><h5 id="3-1-2-项目的描述"><a href="#3-1-2-项目的描述" class="headerlink" title="3.1.2 项目的描述"></a>3.1.2 项目的描述</h5><table><thead><tr><th>项目的描述</th></tr></thead><tbody><tr><td><img src="/myblog/2021/10/20/springboot/1587376752337.png" alt="1587376752337"></td></tr></tbody></table><h5 id="3-1-3-指定SpringBoot版本和需要的依赖"><a href="#3-1-3-指定SpringBoot版本和需要的依赖" class="headerlink" title="3.1.3 指定SpringBoot版本和需要的依赖"></a>3.1.3 指定SpringBoot版本和需要的依赖</h5><table><thead><tr><th align="center">指定SpringBoot版本和需要的依赖</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587376825501.png" alt="1587376825501"></td></tr></tbody></table><h5 id="3-1-4-导入依赖"><a href="#3-1-4-导入依赖" class="headerlink" title="3.1.4 导入依赖"></a>3.1.4 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 将上述内容修改为下面的效果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-5-编写了Controller"><a href="#3-1-5-编写了Controller" class="headerlink" title="3.1.5 编写了Controller"></a>3.1.5 编写了Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello SpringBoot!&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-6-测试"><a href="#3-1-6-测试" class="headerlink" title="3.1.6 测试"></a>3.1.6 测试</h5><table><thead><tr><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587377297358.png" alt="1587377297358"></td></tr></tbody></table><h4 id="3-2-SpringBoot的目录结构"><a href="#3-2-SpringBoot的目录结构" class="headerlink" title="3.2 SpringBoot的目录结构"></a>3.2 SpringBoot的目录结构</h4><h5 id="3-2-1-pom-xml文件"><a href="#3-2-1-pom-xml文件" class="headerlink" title="3.2.1 pom.xml文件"></a>3.2.1 pom.xml文件</h5><blockquote><ul><li>指定了一个父工程： 指定当前工程为SpringBoot，帮助我们声明了starter依赖的版本。</li><li>项目的元数据：包名，项目名，版本号。</li><li>指定了properties信息：指定了java的版本为1.8</li><li>导入依赖：默认情况导入spring-boot-starter，spring-boot-starter-test</li><li>插件：spring-boot-maven-plugin</li></ul></blockquote><h5 id="3-2-2-gitignore文件"><a href="#3-2-2-gitignore文件" class="headerlink" title="3.2.2 .gitignore文件"></a>3.2.2 .gitignore文件</h5><blockquote><p>默认帮我们忽略了一些文件和目录，避免提交到Git仓库中</p></blockquote><h5 id="3-2-3-src目录"><a href="#3-2-3-src目录" class="headerlink" title="3.2.3 src目录"></a>3.2.3 src目录</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">-src<br>  -main  <br>    -java<br>      -包名<br>        启动类.java# 需要将controller类，放在启动类的子包中或者同级包下<br>    -resources<br>      -static  # 存放静态资源的<br>      -templates   # 存储模板页面的<br>      application.properties # SpringBoot提供的唯一的配置文件<br>  -test         # 只是为了测试用的<br></code></pre></td></tr></table></figure><h4 id="3-3-SpringBoot三种启动方式"><a href="#3-3-SpringBoot三种启动方式" class="headerlink" title="3.3 SpringBoot三种启动方式"></a>3.3 SpringBoot三种启动方式</h4><h5 id="3-3-1-运行启动类的main方法"><a href="#3-3-1-运行启动类的main方法" class="headerlink" title="3.3.1 运行启动类的main方法"></a>3.3.1 运行启动类的main方法</h5><blockquote><p>运行main方法即可</p></blockquote><h5 id="3-3-2-maven命令"><a href="#3-3-2-maven命令" class="headerlink" title="3.3.2 maven命令"></a>3.3.2 maven命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mvn spring-boot:run<br></code></pre></td></tr></table></figure><h5 id="3-3-3-采用jar包的方式运行"><a href="#3-3-3-采用jar包的方式运行" class="headerlink" title="3.3.3 采用jar包的方式运行"></a>3.3.3 采用jar包的方式运行</h5><blockquote><p>将当前项目打包成一个jar文件，并通过java -jar jar文件</p></blockquote><h3 id="四、SpringBoot常用注解【重点】"><a href="#四、SpringBoot常用注解【重点】" class="headerlink" title="四、SpringBoot常用注解【重点】"></a>四、SpringBoot常用注解【<code>重点</code>】</h3><hr><h4 id="4-1-Configuration和-Bean"><a href="#4-1-Configuration和-Bean" class="headerlink" title="4.1 @Configuration和@Bean"></a>4.1 @Configuration和@Bean</h4><blockquote><ul><li><p>之前使用SSM去开发时，在xml文件中编写bean标签，但是SpringBoot不推荐使用xml文件。</p></li><li><p>@Configuration注解相当于beans标签</p></li><li><p>@Bean注解相当于bean标签</p></li><li><p>id=“方法名 | 注解中的name属性（优先级更高）”</p></li><li><p> class=“方法的返回结果”</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>   <span class="hljs-comment">// 代表当前类是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserConfig</span> </span>&#123;<br>    <br>    <br>    <span class="hljs-meta">@Bean(name = &quot;user1&quot;)</span>       <span class="hljs-comment">// 构建一个实例，放到spring容器中</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    &lt;beans ....&gt;            @Configuration</span><br><span class="hljs-comment">        &lt;bean id=&quot;user1&quot; class=&quot;com.qf.firstspringboot.entity.User&quot; /&gt;</span><br><span class="hljs-comment">    &lt;/beans&gt;</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-SpringBootApplication"><a href="#4-2-SpringBootApplication" class="headerlink" title="4.2 @SpringBootApplication"></a>4.2 @SpringBootApplication</h4><blockquote><p>@SpringBootApplication就是一个组合注解：</p><ul><li> @SpringBootConfiguration就是@Configuration注解，代表启动类就是一个配置类。</li><li>@EnableAutoConfiguration帮你实现自动装配的，SpringBoot工程启动时，运行一个SpringFactoriesLoader的类，加载META-INF/spring.factories配置类（已经开启的），通过SpringFactoriesLoader中的load方法，以for循环的方式，一个一个加载。<ul><li>好处：无需编写大量的整合配置信息，只需要按照SpringBoot提供好了约定去整合即可。</li><li>坏处：如果说你导入了一个starter依赖，那么你就需要填写他必要的配置信息。</li><li>手动关闭自动装配指定内容：@SpringBootApplication(exclude = QuartzAutoConfiguration.class)</li></ul></li><li> @ComponentScan就相当于&lt;context:component-scan basePackage=“包名” /&gt;，帮助扫描注解的。</li></ul></blockquote><h3 id="五、SpringBoot常用配置【重点】"><a href="#五、SpringBoot常用配置【重点】" class="headerlink" title="五、SpringBoot常用配置【重点】"></a>五、SpringBoot常用配置【<code>重点</code>】</h3><hr><h4 id="5-1-SpringBoot的配置文件格式"><a href="#5-1-SpringBoot的配置文件格式" class="headerlink" title="5.1 SpringBoot的配置文件格式"></a>5.1 SpringBoot的配置文件格式</h4><blockquote><p>SpringBoot的配置文件支持properties和yml，甚至他还支持json。</p><p>更推荐使用yml文件格式：</p><ol><li><p>yml文件，会根据换行和缩进帮助咱们管理配置文件所在位置</p><ol start="2"><li>yml文件，相比properties更轻量级一些</li></ol></li></ol><p>yml文件的劣势：</p><ol><li><p>严格遵循换行和缩进</p><ol start="2"><li>在填写value时，一定要在: 后面跟上空格</li></ol></li></ol></blockquote><h4 id="5-2-多环境配置"><a href="#5-2-多环境配置" class="headerlink" title="5.2 多环境配置"></a>5.2 多环境配置</h4><blockquote><p>在application.yml文件中添加一个配置项：</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">环境名</span><br></code></pre></td></tr></table></figure><blockquote><p>在resource目录下，创建多个application-环境名.yml文件即可</p><p>在部署工程时，通过 java -jar jar文件 –spring.profiles.active=环境</p></blockquote><h4 id="5-3-引入外部配置文件信息"><a href="#5-3-引入外部配置文件信息" class="headerlink" title="5.3 引入外部配置文件信息"></a>5.3 引入外部配置文件信息</h4><blockquote><p>和传统的SSM方式一样，通过@Value的注解去获取properties/yml文件中的内容。</p><p>如果在yml文件中需要编写大量的自定义配置，并且具有统一的前缀时，采用如下方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java程序</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunProperties</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> String xxxx;<br>    <br>   <span class="hljs-keyword">private</span> ... ...;<br>&#125;<br><br><span class="hljs-comment">// 配置文件</span><br>aliyun:<br>  xxxx: xxxxxxxxx<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><br></code></pre></td></tr></table></figure><h4 id="5-4-热加载"><a href="#5-4-热加载" class="headerlink" title="5.4 热加载"></a>5.4 热加载</h4><h5 id="5-4-1-导入依赖"><a href="#5-4-1-导入依赖" class="headerlink" title="5.4.1 导入依赖"></a>5.4.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-4-2-settings配置"><a href="#5-4-2-settings配置" class="headerlink" title="5.4.2 settings配置"></a>5.4.2 settings配置</h5><table><thead><tr><th align="center">修改settings中的配置</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587449894048.png" alt="1587449894048"></td></tr></tbody></table><h5 id="5-4-3-重新构建工程"><a href="#5-4-3-重新构建工程" class="headerlink" title="5.4.3 重新构建工程"></a>5.4.3 重新构建工程</h5><table><thead><tr><th align="center">build</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587449931902.png" alt="1587449931902"></td></tr></tbody></table><h3 id="六、SpringBoot整合Mybatis【重点】"><a href="#六、SpringBoot整合Mybatis【重点】" class="headerlink" title="六、SpringBoot整合Mybatis【重点】"></a>六、SpringBoot整合Mybatis【<code>重点</code>】</h3><hr><h4 id="6-1-xml方式整合Mybatis"><a href="#6-1-xml方式整合Mybatis" class="headerlink" title="6.1 xml方式整合Mybatis"></a>6.1 xml方式整合Mybatis</h4><blockquote><p>xml方式在编写复杂SQL时，更适合</p></blockquote><h5 id="6-1-1-导入依赖。"><a href="#6-1-1-导入依赖。" class="headerlink" title="6.1.1 导入依赖。"></a>6.1.1 导入依赖。</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        druid连接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-1-2-编写配置文件"><a href="#6-1-2-编写配置文件" class="headerlink" title="6.1.2 编写配置文件"></a>6.1.2 编写配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 准备实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Air</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><br><span class="hljs-keyword">private</span> Integer districtId;<br><br><span class="hljs-keyword">private</span> java.util.Date monitorTime;<br><br><span class="hljs-keyword">private</span> Integer pm10;<br><br><span class="hljs-keyword">private</span> Integer pm25;<br><br><span class="hljs-keyword">private</span> String monitoringStation;<br><br><span class="hljs-keyword">private</span> java.util.Date lastModifyTime;<br><br>&#125;<br><span class="hljs-comment">// ================================================</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">District</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><br><span class="hljs-keyword">private</span> String name;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-1-3-准备Mybatis"><a href="#6-1-3-准备Mybatis" class="headerlink" title="6.1.3 准备Mybatis"></a>6.1.3 准备Mybatis</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AirMapper</span> </span>&#123;<br><br>    <span class="hljs-function">List&lt;Air&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-comment">// 2. 在启动类中添加直接，扫描Mapper接口所在的包</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.qf.firstspringboot.mapper&quot;)</span><br><br><span class="hljs-comment">// 3. 准备映射文件</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.qf.firstspringboot.mapper.AirMapper&quot;</span>&gt;<br><br>&lt;!--    <span class="hljs-function">List&lt;Air&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;findAll&quot;</span> resultType=<span class="hljs-string">&quot;Air&quot;</span>&gt;<br>        select * from air<br>    &lt;/select&gt;<br><br>&lt;/mapper&gt;<br><br><br><span class="hljs-comment">//4. yml文件</span><br>&lt;!-- 添加yml文件配置信息 --&gt;<br># mybatis配置<br>mybatis:<br>  # 扫描映射文件<br>  mapper-locations: classpath:mapper<span class="hljs-comment">/*.xml</span><br><span class="hljs-comment">  # 配置别名扫描的包</span><br><span class="hljs-comment">  type-aliases-package: com.qf.firstspringboot.entity</span><br><span class="hljs-comment">  configuration:</span><br><span class="hljs-comment">    # 开启驼峰映射配置</span><br><span class="hljs-comment">    map-underscore-to-camel-case: true</span><br><span class="hljs-comment"># 连接数据库的信息</span><br><span class="hljs-comment">spring:</span><br><span class="hljs-comment">  datasource:</span><br><span class="hljs-comment">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment">    url: jdbc:mysql:///air?serverTimezone=UTC</span><br><span class="hljs-comment">    username: root</span><br><span class="hljs-comment">    password: root</span><br><span class="hljs-comment">    type: com.alibaba.druid.pool.DruidDataSource    </span><br></code></pre></td></tr></table></figure><h5 id="6-1-4-测试。"><a href="#6-1-4-测试。" class="headerlink" title="6.1.4 测试。"></a>6.1.4 测试。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirMapperTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FirstSpringbootApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AirMapper airMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Air&gt; list = airMapper.findAll();<br>        <span class="hljs-keyword">for</span> (Air air : list) &#123;<br>            System.out.println(air);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-注解方式整合Mybatis"><a href="#6-2-注解方式整合Mybatis" class="headerlink" title="6.2 注解方式整合Mybatis"></a>6.2 注解方式整合Mybatis</h4><blockquote><p>注解方式在编写配置简单，简单SQL推荐使用</p></blockquote><h5 id="6-2-1-创建District的Mapper接口"><a href="#6-2-1-创建District的Mapper接口" class="headerlink" title="6.2.1 创建District的Mapper接口"></a>6.2.1 创建District的Mapper接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DistrictMapper</span> </span>&#123;<br>    <br>    <span class="hljs-function">List&lt;District&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-2-2-添加Mybatis注解"><a href="#6-2-2-添加Mybatis注解" class="headerlink" title="6.2.2 添加Mybatis注解"></a>6.2.2 添加Mybatis注解</h5><blockquote><p>针对增删改查：@Insert，@Delete，@Update，@Select</p><p>还是需要在启动类中添加@MapperScan注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from district&quot;)</span><br><span class="hljs-function">List&lt;District&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br><br><span class="hljs-meta">@Select(&quot;select * from district where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-function">District <span class="hljs-title">findOneById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="6-2-3-添加配置"><a href="#6-2-3-添加配置" class="headerlink" title="6.2.3 添加配置"></a>6.2.3 添加配置</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">//</span> <span class="hljs-string">yml文件</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.qf.firstspringboot.mapper:</span> <span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><h5 id="6-2-4-测试，查看日志"><a href="#6-2-4-测试，查看日志" class="headerlink" title="6.2.4 测试，查看日志"></a>6.2.4 测试，查看日志</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DistrictMapperTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FirstSpringbootApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DistrictMapper mapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;District&gt; list = mapper.findAll();<br>        <span class="hljs-keyword">for</span> (District district : list) &#123;<br>            System.out.println(district);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findOneById</span><span class="hljs-params">()</span> </span>&#123;<br>        District district = mapper.findOneById(<span class="hljs-number">5</span>);<br>        System.out.println(district);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3-SpringBoot整合分页助手"><a href="#6-3-SpringBoot整合分页助手" class="headerlink" title="6.3 SpringBoot整合分页助手"></a>6.3 SpringBoot整合分页助手</h4><h5 id="6-3-1-导入依赖"><a href="#6-3-1-导入依赖" class="headerlink" title="6.3.1 导入依赖"></a>6.3.1 导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        pageHelper依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="6-3-2-测试使用"><a href="#6-3-2-测试使用" class="headerlink" title="6.3.2 测试使用"></a>6.3.2 测试使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findByPage</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//1. 执行分页</span><br>    PageHelper.startPage(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">//2. 执行查询</span><br>    List&lt;Air&gt; list = airMapper.findAll();<br><br>    <span class="hljs-comment">//3. 封装PageInfo对象</span><br>    PageInfo&lt;Air&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(list);<br><br>    <span class="hljs-comment">//4. 输出</span><br>    <span class="hljs-keyword">for</span> (Air air : pageInfo.getList()) &#123;<br>        System.out.println(air);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="七、SpringBoot整合JSP"><a href="#七、SpringBoot整合JSP" class="headerlink" title="七、SpringBoot整合JSP"></a>七、SpringBoot整合JSP</h3><hr><h4 id="7-1-需要导入依赖"><a href="#7-1-需要导入依赖" class="headerlink" title="7.1 需要导入依赖"></a>7.1 需要导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        JSP核心引擎依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        JSTL--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-创建JSP页面"><a href="#7-2-创建JSP页面" class="headerlink" title="7.2 创建JSP页面"></a>7.2 创建JSP页面</h4><table><thead><tr><th align="center">创建webapp以及WEB-INF去存放JSP页面</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587467971330.png" alt="1587467971330"></td></tr></tbody></table><h4 id="7-3-创建Contorller"><a href="#7-3-创建Contorller" class="headerlink" title="7.3 创建Contorller"></a>7.3 创建Contorller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Controller</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JspController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-配置前缀和后缀"><a href="#7-4-配置前缀和后缀" class="headerlink" title="7.4 配置前缀和后缀"></a>7.4 配置前缀和后缀</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-comment"># 视图的前缀和后缀</span><br>    <span class="hljs-attr">view:</span><br>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/WEB-INF/</span><br>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span><br></code></pre></td></tr></table></figure><h3 id="八、SpringBoot练习"><a href="#八、SpringBoot练习" class="headerlink" title="八、SpringBoot练习"></a>八、SpringBoot练习</h3><hr><blockquote><p>页面查询客户信息从ES中查询</p><p>完成客户模块的增删改，并且同步到ES中。</p></blockquote><table><thead><tr><th align="center">练习业务图</th></tr></thead><tbody><tr><td align="center"><img src="/myblog/2021/10/20/springboot/1587569236813.png" alt="1587569236813"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/myblog/2021/10/20/hello-world%20(zh-CN)/"/>
    <url>/myblog/2021/10/20/hello-world%20(zh-CN)/</url>
    
    <content type="html"><![CDATA[<p>欢迎光临[Hexo] (<a href="https://hexo.io/">https://hexo.io/</a>) !这是你的第一个帖子。查看<a href="https://hexo.io/docs/">文档</a>获取更多信息。如果您在使用Hexo时遇到任何问题，您可以在<a href="https://hexo.io/docs/troubleshooting.html">故障排除</a>中找到答案，或者您可以在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我。</p><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br>$ hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/myblog/2019/10/22/AJAX/"/>
    <url>/myblog/2019/10/22/AJAX/</url>
    
    <content type="html"><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h4 id="一、JSON的概念"><a href="#一、JSON的概念" class="headerlink" title="一、JSON的概念"></a>一、JSON的概念</h4><blockquote><p>Javascript Object Notation JS对象标记。就是指js中对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;<br>[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;hobby&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;打游戏&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;看小说&quot;</span>&#125;]&#125;,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;hobby&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;打游戏&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;看小说&quot;</span>&#125;]&#125;]<br></code></pre></td></tr></table></figure><blockquote><p>特点：</p><p>1、是一种轻量级的<a href>数据传输</a>格式。</p><p>2、在网络中能够<a href>有效率</a>的传输。</p></blockquote><blockquote><p><a href>注意：</a></p><p>了解：xml格式：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mary<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mary<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobbies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>打游戏<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>看小说<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">hobbies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>lily<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobbies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>打游戏<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>看小说<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">hobbies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>历史原因：</p><p>在网络发展早期，使用的是xml格式传输数据，后来，移动互联网的兴起，导致需要体积较小的数据传输格式，JSON应运而生。</p></blockquote><h4 id="二、JSON解析"><a href="#二、JSON解析" class="headerlink" title="二、JSON解析"></a>二、JSON解析</h4><blockquote><p>指在Java服务器上，将json字符串与Java对象之间相互转换的过程。</p><p>即将JSON字符串转换成Java对象，或者将Java对象转换成JSON字符串。</p></blockquote><h5 id="2-1-原始的方式"><a href="#2-1-原始的方式" class="headerlink" title="2.1 原始的方式"></a>2.1 原始的方式</h5><blockquote><p>手动拼接、切割解析字符串，然后使用反射处理。比较麻烦</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">// &#123;&quot;id&quot;:1, &quot;name&quot;:&quot;mary&quot;, &quot;sex&quot;:&quot;女&quot;, &quot;age&quot;:20&#125;</span><br>        String str = <span class="hljs-string">&quot;&#123;\&quot;id\&quot;:&quot;</span>+student.getId()+<span class="hljs-string">&quot;, \&quot;name\&quot;:\&quot;&quot;</span>+student.getName()+<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;<br>        System.out.println(str);<br>        <span class="hljs-comment">// 先解析切割字符串，然后创建对象，并设置到对象的属性中</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-第三方库的处理方式"><a href="#2-2-第三方库的处理方式" class="headerlink" title="2.2 第三方库的处理方式"></a>2.2 第三方库的处理方式</h5><h6 id="2-2-1-FastJson"><a href="#2-2-1-FastJson" class="headerlink" title="2.2.1 FastJson"></a>2.2.1 FastJson</h6><blockquote><p>FastJson是阿里出品的第三方库。</p><p>核心是两个静态方法：</p><p>JSON.toJSONString()：将对象转换成JSON字符串。</p><p>JSON.parseObject()：将字符串转换成Java对象。</p><p>导入依赖：fastjson-1.2.68.jar</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 使用fastjson</span><br>    Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 将对象转换成JSON字符串</span><br>    <span class="hljs-keyword">final</span> String s = JSON.toJSONString(student);<br>    System.out.println(s);<br>    <span class="hljs-comment">// 将上面的字符串重新转成对象</span><br>    <span class="hljs-keyword">final</span> Student student1 = JSON.parseObject(s, Student.class);<br>    System.out.println(student1);<br><br>    <span class="hljs-comment">// 集合的处理</span><br>    List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">21</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">22</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">23</span>));<br>    <span class="hljs-comment">// 将集合对象转换成JSON字符串</span><br>    <span class="hljs-keyword">final</span> String s1 = JSON.toJSONString(list);<br>    System.out.println(s1);<br>    <span class="hljs-comment">// 将json字符串转换成集合对象</span><br>    <span class="hljs-keyword">final</span> List&lt;Student&gt; list1 = JSON.parseObject(s1, <span class="hljs-keyword">new</span> TypeReference&lt;List&lt;Student&gt;&gt;() &#123;&#125;);<br>    System.out.println(list1);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">// name属性不进行json的转换</span><br>    <span class="hljs-meta">@JSONField(serialize = false)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2-Jackson"><a href="#2-2-2-Jackson" class="headerlink" title="2.2.2 Jackson"></a>2.2.2 Jackson</h6><blockquote><p>Jackson主要使用ObjectMapper对象来处理json。</p><p>使用readValue和writeValue方法进行JSON的处理。</p><p>导入依赖：</p><p>jackson-annotations-2.9.10.jar</p><p>jackson-core-2.9.10.jar</p><p>jackson-databind-2.9.10.jar</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-comment">// 使用jackson</span><br>    Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 创建一个ObjectMapper对象</span><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    <span class="hljs-comment">// 当对象的属性值为空时，也可以转换成json，而不会抛异常</span><br>    mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);<br>    <span class="hljs-comment">// 将对象转换成JSON字符串</span><br>    <span class="hljs-keyword">final</span> String s = mapper.writeValueAsString(student);<br>    System.out.println(s);<br>    <span class="hljs-comment">// 将上面的字符串重新转成对象</span><br>    <span class="hljs-keyword">final</span> Student student1 = mapper.readValue(s, Student.class);<br>    System.out.println(student1);<br><br>    <span class="hljs-comment">// 集合的处理</span><br>    List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">21</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">22</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">23</span>));<br>    <span class="hljs-comment">// 将集合对象转换成JSON字符串</span><br>    <span class="hljs-keyword">final</span> String s1 = mapper.writeValueAsString(list);<br>    System.out.println(s1);<br>    <span class="hljs-comment">// 将json字符串转换成集合对象</span><br>    List&lt;Student&gt; list1 = mapper.readValue(s1, <span class="hljs-keyword">new</span> TypeReference&lt;List&lt;Student&gt;&gt;() &#123;&#125;);<br>    System.out.println(list1);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">// fastjson中对应name属性不进行json的转换</span><br><span class="hljs-comment">//    @JSONField(serialize = false)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// jackson中对应sex属性不进行json的转换</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-comment">// jackson中将age属性对应js的int属性</span><br>    <span class="hljs-meta">@JsonProperty(&quot;int&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-3-gson"><a href="#2-2-3-gson" class="headerlink" title="2.2.3 gson"></a>2.2.3 gson</h6><blockquote><p>google的json处理库。</p><p>使用gson对象。</p><p>核心方法：</p><p>gson.toJson() ：将对象转成json字符串。</p><p>gson.fromJson()：将字符串转换成Java对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-comment">// 使用gson</span><br>    Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-comment">// 创建一个gson对象</span><br>    Gson gson = <span class="hljs-keyword">new</span> Gson();<br><br>    <span class="hljs-comment">// 将对象转换成JSON字符串</span><br>    <span class="hljs-keyword">final</span> String s = gson.toJson(student);<br>    System.out.println(s);<br>    <span class="hljs-comment">// 将上面的字符串重新转成对象</span><br>    <span class="hljs-keyword">final</span> Student student1 = gson.fromJson(s, Student.class);<br>    System.out.println(student1);<br><br>    <span class="hljs-comment">// 集合的处理</span><br>    List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">21</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">22</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">23</span>));<br>    <span class="hljs-comment">// 将集合对象转换成JSON字符串</span><br>    <span class="hljs-keyword">final</span> String s1 = gson.toJson(list);<br>    System.out.println(s1);<br>    <span class="hljs-comment">// 将json字符串转换成集合对象</span><br>    List&lt;Student&gt; list1 = gson.fromJson(s1, <span class="hljs-keyword">new</span> TypeToken&lt;List&lt;Student&gt;&gt;() &#123;&#125;.getType());<br>    System.out.println(list1);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三、浏览器中使用JS处理JSON解析"><a href="#三、浏览器中使用JS处理JSON解析" class="headerlink" title="三、浏览器中使用JS处理JSON解析"></a>三、浏览器中使用JS处理JSON解析</h4><blockquote><p>在浏览器中，使用JS的过程中，也会遇到将json转成字符串，或者将字符串转成JSON过程。</p><p>核心方法：</p><p>JSON.stringfy() ：将JSON转成字符串</p><p>JSON.parse()：将字符串转成JSON</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 创建json对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> stu = &#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(stu);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(stu));</span><br><span class="javascript"><span class="hljs-comment">// 将JSON对象转成成字符串</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(stu);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(str);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(str));</span><br><span class="javascript"><span class="hljs-comment">// 将字符串转成json对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> stu1 = <span class="hljs-built_in">JSON</span>.parse(str);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(stu1);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(stu1));</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="四、AJAX"><a href="#四、AJAX" class="headerlink" title="四、AJAX"></a>四、AJAX</h4><h5 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h5><blockquote><p>Asynchronized JavaScript And XML，异步的JS和XML。</p><p>AJAX技术是一种页面局部刷新技术。</p></blockquote><h5 id="4-2-基本步骤"><a href="#4-2-基本步骤" class="headerlink" title="4.2 基本步骤"></a>4.2 基本步骤</h5><blockquote><p>1、创建Ajax对应的XMLHTTPRequest对象。</p><p>2、设置响应（回调）函数</p><p>3、设置请求的方法和请求的URL</p><p>4、发送请求</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> request;</span><br><span class="javascript">  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="javascript">    <span class="hljs-comment">// IE7+以及其他的浏览器</span></span><br><span class="javascript">    request = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">  &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// IE6</span></span><br><span class="javascript">    request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-comment">//2、设置响应（回调）函数</span></span><br><span class="javascript">  <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span></span><br><span class="javascript">  <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span></span><br><span class="javascript">  request.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span></span><br><span class="javascript">      <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;</span><br><span class="javascript">          <span class="hljs-comment">// 局部刷新页面要改变的内容</span></span><br><span class="javascript"></span><br><span class="javascript">      &#125;</span><br><span class="javascript">  &#125;;</span><br><span class="javascript">  <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span></span><br><span class="javascript">  <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span></span><br><span class="javascript">  request.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;服务器url&quot;</span>, <span class="hljs-literal">true</span>);</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//4、发送请求</span></span><br><span class="javascript">  <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span></span><br><span class="javascript">  <span class="hljs-comment">// 但是post也可以通过send来传参</span></span><br><span class="javascript">  request.send();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-3-AJAX发送请求的三种方式："><a href="#4-3-AJAX发送请求的三种方式：" class="headerlink" title="4.3 AJAX发送请求的三种方式："></a>4.3 AJAX发送请求的三种方式：</h5><blockquote><ul><li>发送普通的get请求，参数格式：name=mary&amp;sex=m&amp;age=20</li><li>发送普通的post请求，参数格式：name=mary&amp;sex=m&amp;age=20</li><li>发送json数据的post请求，参数格式：{“name”:”mary”, “sex”:”m”, “age”:20}</li></ul></blockquote><h6 id="4-3-1-发送get请求"><a href="#4-3-1-发送get请求" class="headerlink" title="4.3.1 发送get请求"></a>4.3.1 发送get请求</h6><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyGetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;sex&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收post请求&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;发送GET请求&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;发送GET请求&quot;</span> onclick=<span class="hljs-string">&quot;fn1()&quot;</span>&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>  <span class="hljs-function">function <span class="hljs-title">fn1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span><br>    <span class="hljs-keyword">var</span> request;<br>    <span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>      <span class="hljs-comment">// IE7+以及其他的浏览器</span><br>      request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-comment">// IE6</span><br>      request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2、设置响应（回调）函数</span><br>    <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span><br>    <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span><br>    request.onreadystatechange = function (resp) &#123;<br>      <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>      <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br><br>      &#125;<br>    &#125;;<br>    <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span><br>    <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span><br>    request.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;my.do?name=mary&amp;sex=m&amp;age=20&quot;</span>, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-comment">//4、发送请求</span><br>    <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span><br>    <span class="hljs-comment">// 但是post也可以通过send来传参</span><br>    request.send();<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="4-3-2-发送post请求"><a href="#4-3-2-发送post请求" class="headerlink" title="4.3.2 发送post请求"></a>4.3.2 发送post请求</h6><blockquote><p>post请求参数是可以象get一样放到url中传递的。</p><p>也可以放到send中发送，但是如果放到send中发送，需要设置请求的头。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my1.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPostServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收get请求&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;sex&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;发送POST请求&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;发送POST请求&quot;</span> onclick=<span class="hljs-string">&quot;fn1()&quot;</span>&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>  <span class="hljs-function">function <span class="hljs-title">fn1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span><br>    <span class="hljs-keyword">var</span> request;<br>    <span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>      <span class="hljs-comment">// IE7+以及其他的浏览器</span><br>      request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-comment">// IE6</span><br>      request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2、设置响应（回调）函数</span><br>    <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span><br>    <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span><br>    request.onreadystatechange = function (resp) &#123;<br>      <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>      <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br><br>      &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span><br>    <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span><br>    request.open(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;my1.do&quot;</span>, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-comment">// 如果要在send方法中传参，需要设置此行代码，而且需要在open方法之后，send方法之前执行。</span><br>    request.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>    <span class="hljs-comment">//4、发送请求</span><br>    <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span><br>    <span class="hljs-comment">// 但是post也可以通过send来传参</span><br>    request.send(<span class="hljs-string">&quot;name=mary&amp;sex=m&amp;age=21&quot;</span>);<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="4-3-3-使用post请求发送json数据"><a href="#4-3-3-使用post请求发送json数据" class="headerlink" title="4.3.3 使用post请求发送json数据"></a>4.3.3 使用post请求发送json数据</h6><blockquote><ul><li>要想发送json数据，只能使用post方式</li><li>不能使用url来发送数据</li><li>不能直接传递json，需要将json转换成字符串</li><li>服务器端不能使用request.getParameter接收数据，需要使用request.getInputStream接收。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my2.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyJSONPostServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收get请求&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> ServletInputStream inputStream = req.getInputStream();<br>        <span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            String str = <span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len);<br>            System.out.println(str);<br>        &#125;<br>        inputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;发送POST请求&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;发送POST请求JSON格式&quot;</span> onclick=<span class="hljs-string">&quot;fn1()&quot;</span>&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>  <span class="hljs-function">function <span class="hljs-title">fn1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span><br>    <span class="hljs-keyword">var</span> request;<br>    <span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>      <span class="hljs-comment">// IE7+以及其他的浏览器</span><br>      request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-comment">// IE6</span><br>      request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2、设置响应（回调）函数</span><br>    <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span><br>    <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span><br>    request.onreadystatechange = function (resp) &#123;<br>      <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>      <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br><br>      &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span><br>    <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span><br>    request.open(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;my2.do&quot;</span>, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-comment">// 如果要在send方法中传参，需要设置此行代码，而且需要在open方法之后，send方法之前执行。</span><br>    request.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>    <span class="hljs-comment">//4、发送请求</span><br>    <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span><br>    <span class="hljs-comment">// 但是post也可以通过send来传参</span><br>    <span class="hljs-keyword">var</span> u = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;;<br>    request.send(JSON.stringify(u));<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="4-4-AJAX接收响应"><a href="#4-4-AJAX接收响应" class="headerlink" title="4.4 AJAX接收响应"></a>4.4 AJAX接收响应</h5><blockquote><p>服务器处理AJAX请求，只能使用print的方式响应。</p><p><a href>注意：</a>AJAX请求对应的服务器响应一定不能直接使用重定向和请求转发。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/my.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyGetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;sex&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br><span class="hljs-comment">//        resp.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br>        resp.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        Student student = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">final</span> String s = JSON.toJSONString(student);<br>        out.print(s);<br>        out.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收post请求&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">request.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>    <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br>        <span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(request.responseText);<br>        <span class="hljs-built_in">console</span>.log(obj);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="五、AJAX案例"><a href="#五、AJAX案例" class="headerlink" title="五、AJAX案例"></a>五、AJAX案例</h4><h5 id="5-1-检查用户名是否存在"><a href="#5-1-检查用户名是否存在" class="headerlink" title="5.1 检查用户名是否存在"></a>5.1 检查用户名是否存在</h5><blockquote><p>当用户注册时，需要检查该用户名的唯一性，检查后，将结果直接在页面上使用文字的方式提示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/check.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckUsernameServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;zhangsan&quot;</span>))&#123;<br>            out.print(<span class="hljs-string">&quot;&#123;\&quot;isExist\&quot;:true&#125;&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            out.print(<span class="hljs-string">&quot;&#123;\&quot;isExist\&quot;:false&#125;&quot;</span>);<br>        &#125;<br>        out.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;注册&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>      年龄：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;br/&gt;<br>      用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> id=<span class="hljs-string">&quot;username&quot;</span> onblur=<span class="hljs-string">&quot;fnCheck()&quot;</span>&gt;<br>      &lt;span id=<span class="hljs-string">&quot;usernameSpan&quot;</span>&gt;&lt;/span&gt;<br>      &lt;br/&gt;<br>      密码：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span>&gt;&lt;br/&gt;<br>      &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;注册&quot;</span>&gt;<br>    &lt;/form&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>  <span class="hljs-function">function <span class="hljs-title">fnCheck</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 得到用户名</span><br>    <span class="hljs-keyword">var</span> u = document.getElementById(<span class="hljs-string">&quot;username&quot;</span>).value;<br>    <span class="hljs-comment">// 发送ajax请求</span><br>    <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span><br>    <span class="hljs-keyword">var</span> request;<br>    <span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>      <span class="hljs-comment">// IE7+以及其他的浏览器</span><br>      request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-comment">// IE6</span><br>      request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2、设置响应（回调）函数</span><br>    <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span><br>    <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span><br>    request.onreadystatechange = function () &#123;<br>      <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>      <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br>        <span class="hljs-keyword">var</span> obj = JSON.parse(request.responseText);<br>        console.log(obj);<br>        <span class="hljs-keyword">var</span> s = document.getElementById(<span class="hljs-string">&quot;usernameSpan&quot;</span>);<br>        <span class="hljs-keyword">if</span> (obj.isExist)&#123;<br>          s.innerText = <span class="hljs-string">&quot;该用户名已存在！&quot;</span>;<br>          s.style.color = <span class="hljs-string">&quot;red&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          s.innerText = <span class="hljs-string">&quot;该用户名可以使用&quot;</span>;<br>          s.style.color = <span class="hljs-string">&quot;green&quot;</span>;<br>        &#125;<br>      &#125;<br>    &#125;;<br>    <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span><br>    <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span><br>    request.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;check.do?username=&quot;</span>+u, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-comment">//4、发送请求</span><br>    <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span><br>    <span class="hljs-comment">// 但是post也可以通过send来传参</span><br>    request.send();<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="5-2-省市联动"><a href="#5-2-省市联动" class="headerlink" title="5.2 省市联动"></a>5.2 省市联动</h5><blockquote><p>两个下拉框，第一个下拉框显示省份，当选择某一个省份后，另一个下拉框显示该省份对应的城市。</p></blockquote><blockquote><p>涉及到业务：</p><p>1、查询所有的省份。</p><p>2、根据某一个省份的id，来查询相应的城市。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Province</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">City</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer provinceId;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProvinceService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Province&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<br>                <span class="hljs-keyword">new</span> Province(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;湖北&quot;</span>),<br>                <span class="hljs-keyword">new</span> Province(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;湖南&quot;</span>),<br>                <span class="hljs-keyword">new</span> Province(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;河南&quot;</span>)<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CityService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;City&gt; <span class="hljs-title">findAllByProvinceId</span><span class="hljs-params">(Integer provinceId)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (provinceId == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> Arrays.asList(<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;武汉&quot;</span>,<span class="hljs-number">1</span>),<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;黄石&quot;</span>,<span class="hljs-number">1</span>),<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;鄂州&quot;</span>,<span class="hljs-number">1</span>)<br>            );<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (provinceId == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> Arrays.asList(<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;长沙&quot;</span>,<span class="hljs-number">2</span>),<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;岳阳&quot;</span>,<span class="hljs-number">2</span>),<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;湘潭&quot;</span>,<span class="hljs-number">2</span>)<br>            );<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> Arrays.asList(<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;郑州&quot;</span>,<span class="hljs-number">3</span>),<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;洛阳&quot;</span>,<span class="hljs-number">3</span>),<br>                    <span class="hljs-keyword">new</span> City(<span class="hljs-number">9</span>, <span class="hljs-string">&quot;南阳&quot;</span>,<span class="hljs-number">3</span>)<br>            );<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/province.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProvinceServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ProvinceService provinceService = <span class="hljs-keyword">new</span> ProvinceService();<br>        resp.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        <span class="hljs-keyword">final</span> List&lt;Province&gt; list = provinceService.findAll();<br>        <span class="hljs-keyword">final</span> String s = JSON.toJSONString(list);<br>        out.print(s);<br>        out.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/city.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CityServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">final</span> String id = req.getParameter(<span class="hljs-string">&quot;provinceId&quot;</span>);<br>        <span class="hljs-keyword">int</span> nid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nid = Integer.parseInt(id);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        CityService cityService = <span class="hljs-keyword">new</span> CityService();<br>        resp.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-keyword">final</span> PrintWriter out = resp.getWriter();<br>        <span class="hljs-keyword">final</span> List&lt;City&gt; list = cityService.findAllByProvinceId(nid);<br>        <span class="hljs-keyword">final</span> String s = JSON.toJSONString(list);<br>        out.print(s);<br>        out.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;省市联动&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body onload=<span class="hljs-string">&quot;fnLoad()&quot;</span>&gt;<br>    &lt;select name=<span class="hljs-string">&quot;province&quot;</span> id=<span class="hljs-string">&quot;province&quot;</span> onchange=<span class="hljs-string">&quot;fnChange()&quot;</span>&gt;<br>        &lt;option value=<span class="hljs-string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;select name=<span class="hljs-string">&quot;city&quot;</span> id=<span class="hljs-string">&quot;city&quot;</span>&gt;<br>        &lt;option value=<span class="hljs-string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;<br>    &lt;/select&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>    <span class="hljs-function">function <span class="hljs-title">fnLoad</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 发送ajax请求</span><br>        <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span><br>        <span class="hljs-keyword">var</span> request;<br>        <span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>            <span class="hljs-comment">// IE7+以及其他的浏览器</span><br>            request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// IE6</span><br>            request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2、设置响应（回调）函数</span><br>        <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span><br>        <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span><br>        request.onreadystatechange = function () &#123;<br>            <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>            <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>                <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br>                <span class="hljs-keyword">var</span> arr = JSON.parse(request.responseText);<br>                console.log(arr);<br>                <span class="hljs-keyword">var</span> province = document.getElementById(<span class="hljs-string">&quot;province&quot;</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i in arr)&#123;<br>                    <span class="hljs-comment">// 创建一个option</span><br>                    <span class="hljs-keyword">var</span> option = <span class="hljs-keyword">new</span> Option(arr[i].name, arr[i].id);<br>                    <span class="hljs-comment">// 给province添加一个option</span><br>                    province.options.add(option);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span><br>        <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span><br>        request.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;province.do&quot;</span>, <span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//4、发送请求</span><br>        <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span><br>        <span class="hljs-comment">// 但是post也可以通过send来传参</span><br>        request.send();<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">fnChange</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 得到省份下拉框的值</span><br>        <span class="hljs-keyword">var</span> p = document.getElementById(<span class="hljs-string">&quot;province&quot;</span>).value;<br>        console.log(p);<br>        <span class="hljs-comment">// 发送ajax请求</span><br>        <span class="hljs-comment">//1、创建Ajax对应的XMLHTTPRequest对象。</span><br>        <span class="hljs-keyword">var</span> request;<br>        <span class="hljs-keyword">if</span>(window.XMLHttpRequest)&#123;<br>            <span class="hljs-comment">// IE7+以及其他的浏览器</span><br>            request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// IE6</span><br>            request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2、设置响应（回调）函数</span><br>        <span class="hljs-comment">// 当每次状态改变时会调用后面的函数</span><br>        <span class="hljs-comment">// 有5个状态0~4，之后最后一个完成就绪状态时，才需要去调用后面的处理函数</span><br>        request.onreadystatechange = function () &#123;<br>            <span class="hljs-comment">// 当请求处理完毕，且状态码为200（成功）</span><br>            <span class="hljs-keyword">if</span> (request.readyState == <span class="hljs-number">4</span> &amp;&amp; request.status == <span class="hljs-number">200</span>)&#123;<br>                <span class="hljs-comment">// 局部刷新页面要改变的内容</span><br>                <span class="hljs-keyword">var</span> arr = JSON.parse(request.responseText);<br>                console.log(arr);<br>                <span class="hljs-keyword">var</span> city = document.getElementById(<span class="hljs-string">&quot;city&quot;</span>);<br>                city.options.length = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i in arr)&#123;<br>                    <span class="hljs-comment">// 创建一个option</span><br>                    <span class="hljs-keyword">var</span> option = <span class="hljs-keyword">new</span> Option(arr[i].name, arr[i].id);<br>                    <span class="hljs-comment">// 给province添加一个option</span><br>                    city.options.add(option);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//3、设置请求的方法(GET或POST)和请求的URL，打开连接</span><br>        <span class="hljs-comment">// true表示异步发送请求，是默认值，可以省略，如果写false，表示发送同步请求</span><br>        request.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;city.do?provinceId=&quot;</span> + p, <span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">//4、发送请求</span><br>        <span class="hljs-comment">// send方法中可以传递参数，但是get是通过url传参，post也可以通过url传参</span><br>        <span class="hljs-comment">// 但是post也可以通过send来传参</span><br>        request.send();<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IO框架</title>
    <link href="/myblog/2019/10/22/IO%E6%A1%86%E6%9E%B6/"/>
    <url>/myblog/2019/10/22/IO%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h3><h4 id="一、流的概念"><a href="#一、流的概念" class="headerlink" title="一、流的概念"></a>一、流的概念</h4><blockquote><p>内存与存储设备之间传输数据的通道叫做流。</p><p><a href>注意：</a>流创建后，还需要进行数据的传递，传递结束应该关闭通道（流）。关闭的代码应该写在finally中。</p></blockquote><h4 id="二、流的分类"><a href="#二、流的分类" class="headerlink" title="二、流的分类"></a>二、流的分类</h4><h5 id="2-1-按方向"><a href="#2-1-按方向" class="headerlink" title="2.1 按方向"></a>2.1 按方向</h5><blockquote><p>参照物是内存。</p><p>输入流：从存储设备将数据输入到内存。读，Input</p><p>输出流：从内存中将数据输出到存储设备。写，Output</p><p>IO流是指输入输出流的简称。</p></blockquote><h5 id="2-2-按单位"><a href="#2-2-按单位" class="headerlink" title="2.2 按单位"></a>2.2 按单位</h5><blockquote><p>字节流：能够操作所有的文件类型，以字节为单位传输。</p><p>字符流：只能操作文本，而且受到字符集限制（如果字符集不对会出现乱码），以字符为单位。</p></blockquote><h5 id="2-3-按功能"><a href="#2-3-按功能" class="headerlink" title="2.3 按功能"></a>2.3 按功能</h5><blockquote><p>节点流：一般的传输数据的读写功能。</p><p>过滤流：在普通的节点流上做的增强功能。</p></blockquote><h4 id="三、字节流"><a href="#三、字节流" class="headerlink" title="三、字节流"></a>三、字节流</h4><h5 id="3-1-抽象父类"><a href="#3-1-抽象父类" class="headerlink" title="3.1 抽象父类"></a>3.1 抽象父类</h5><blockquote><p>InputStream：主要作用是读取(read)。</p><p>OutputStream：主要作用是写入(write)。</p></blockquote><h5 id="3-2-字节节点流"><a href="#3-2-字节节点流" class="headerlink" title="3.2 字节节点流"></a>3.2 字节节点流</h5><h6 id="3-2-1-FileInputStream"><a href="#3-2-1-FileInputStream" class="headerlink" title="3.2.1 FileInputStream"></a>3.2.1 FileInputStream</h6><blockquote><p>FileInputStream：操作文件读取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>FileInputStream fis = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">while</span>((n = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>System.out.print((<span class="hljs-keyword">char</span>)n);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span>(fis != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>fis.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<br>    <span class="hljs-comment">// 定义变量，此处定义的变量下面的区域均有访问作用域</span><br>    <span class="hljs-comment">// 在此处定义的变量必须具备有关闭的方法，会自动关闭</span><br>    FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>    <span class="hljs-comment">//int n = 5; // 此代码不能在此处定义，因为没有实现自动关闭的接口</span><br>)&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>((n = fis.read()) != -<span class="hljs-number">1</span>) &#123;<br>        System.out.print((<span class="hljs-keyword">char</span>)n);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-2-2-FileOutputStream"><a href="#3-2-2-FileOutputStream" class="headerlink" title="3.2.2 FileOutputStream"></a>3.2.2 FileOutputStream</h6><blockquote><p>FileOutputStream：以字节的方式写入数据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>)&#123;<br>String str = <span class="hljs-string">&quot;Hello, world\n&quot;</span>; <span class="hljs-comment">// 如果需要写入的时候换行，可以使用\n</span><br><span class="hljs-keyword">byte</span> [] bytes = str.getBytes(); <span class="hljs-comment">// 将字符串转成byte数组</span><br>fos.write(bytes);<br>fos.write(bytes);<br>fos.flush(); <span class="hljs-comment">// 刷新，清空系统缓冲区，目的将内存中的数据直接写到硬盘</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a></p><p>1、FileOutputStream可以处理中文</p><p>2、FileOutputStream写入文件时，并非追加内容，而是覆盖。</p></blockquote><h5 id="3-2-3-复制文件"><a href="#3-2-3-复制文件" class="headerlink" title="3.2.3 复制文件"></a>3.2.3 复制文件</h5><blockquote><p>复制文件，指的是将一个文件先读取，然后写入到另一个文件中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-comment">// 复制内容</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br><span class="hljs-comment">// 需要读取的文件</span><br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\14.png&quot;</span>);<br><span class="hljs-comment">// 需要写入的文件，如果文件不存在会自动创建文件，但是不会创建中途的文件夹</span><br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\2.txt&quot;</span>);<br>)&#123;<br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 创建一个1kb大小的空间，每次读写都操作1kb</span><br><span class="hljs-keyword">int</span> len; <span class="hljs-comment">// 每次读取的真正长度</span><br><span class="hljs-comment">// 每次读取1024个字节，len记录每次能够读取到的字节数</span><br><span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>fos.write(buffer, <span class="hljs-number">0</span>, len); <span class="hljs-comment">// 将读取的内容从0开始写，写入真正的内容长度</span><br>&#125;<br>fos.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-字节过滤流"><a href="#3-3-字节过滤流" class="headerlink" title="3.3 字节过滤流"></a>3.3 字节过滤流</h5><h6 id="3-3-1-缓冲流"><a href="#3-3-1-缓冲流" class="headerlink" title="3.3.1 缓冲流"></a>3.3.1 缓冲流</h6><blockquote><p>减少磁盘IO操作，提高性能。</p><p>缓冲区中的内容写入文件：</p><ul><li>flush方法</li><li>关闭流</li><li>缓冲区满时会自动写入</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>)&#123;<br><span class="hljs-keyword">int</span> n;<br>bis.skip(<span class="hljs-number">3</span>); <span class="hljs-comment">// 跳过部分，进行读取</span><br><span class="hljs-keyword">while</span>((n = bis.read()) != -<span class="hljs-number">1</span>) &#123;<br>System.out.print((<span class="hljs-keyword">char</span>)n);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain4</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>FileOutputStream fis = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>BufferedOutputStream bis = <span class="hljs-keyword">new</span> BufferedOutputStream(fis);<br>)&#123;<br>String str = <span class="hljs-string">&quot;hello, world\n&quot;</span>;<br>bis.write(str.getBytes());<br>bis.write(str.getBytes());<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-3-2-对象流"><a href="#3-3-2-对象流" class="headerlink" title="3.3.2 对象流"></a>3.3.2 对象流</h6><blockquote><p>主要作用是将对象写入文件，以及将文件中保存的对象读取到内存。</p><p><a href>注意：</a>要将对象写入文件或者从文件中读取，需要对象所对应的类实现序列化接口。</p></blockquote><blockquote><p>将对象的属性应该如何解析告知操作的流，叫做对象序列化。</p><p>在Java中对象序列化比较简单，只需要实现序列化接口即可。无需实现任何方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String sex;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br><span class="hljs-comment">// 省略getter和setter</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对象流写入文件：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain5</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>ObjectOutputStream fis = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>));<br>)&#123;<br>Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">20</span>);<br>fis.writeObject(stu);<br>fis.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>对象流读取文件：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain6</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>ObjectInputStream fis = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>));<br>)&#123;<br>Student stu = (Student)fis.readObject();<br>System.out.println(stu);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-3-3-序列化UID"><a href="#3-3-3-序列化UID" class="headerlink" title="3.3.3 序列化UID"></a>3.3.3 序列化UID</h6><blockquote><p>标识当前类唯一的版本号。作用在于不同版本的相同类型也不能进行序列化和反序列化。</p><p>序列化即告诉对象流如何写入一个对象。</p><p>反序列化即告诉对象流如何读取一个对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">840791652073023431L</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String sex;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br><span class="hljs-comment">// 省略getter和setter</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果写入的时候版本号为：-840791652073023430L， 但是读取时版本号已经改为-840791652073023431L，那么读取时会出现异常：java.io.InvalidClassException: com.qf.day21_IO.Student; local class incompatible: stream classdesc serialVersionUID = -840791652073023430, local class serialVersionUID = -840791652073023431</p></blockquote><h6 id="3-3-4-transient关键字"><a href="#3-3-4-transient关键字" class="headerlink" title="3.3.4 transient关键字"></a>3.3.4 transient关键字</h6><blockquote><p>用来修饰属性。表示在序列化和反序列化时忽略该属性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">840791652073023431L</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String sex; <span class="hljs-comment">// 忽略属性，不进行序列化和反序列化</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <br>    <span class="hljs-comment">// 省略getter和setter</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四、字符流"><a href="#四、字符流" class="headerlink" title="四、字符流"></a>四、字符流</h4><h5 id="4-1-抽象父类"><a href="#4-1-抽象父类" class="headerlink" title="4.1 抽象父类"></a>4.1 抽象父类</h5><blockquote><p>Reader：可以操作char型数组</p><p>Writer：可以操作char型数组，可以直接操作字符串。</p></blockquote><h5 id="4-2-字符节点流"><a href="#4-2-字符节点流" class="headerlink" title="4.2 字符节点流"></a>4.2 字符节点流</h5><blockquote><p>FileReader：文本文件读取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain7</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>FileReader reader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>)&#123;<br><span class="hljs-keyword">char</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = reader.read(buffer))!=-<span class="hljs-number">1</span>) &#123;<br>String str = <span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len);<br>System.out.println(str);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>FileWriter：文本文件写入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain8</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>FileWriter writer = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>)&#123;<br>String str = <span class="hljs-string">&quot;标识当前类唯一的版本号。作用在于不同版本的相同类型也不能进行序列化和反序列化。\n序列化即告诉对象流如何写入一个对象。&quot;</span>;<br>writer.write(str);<br>writer.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3-字符过滤流"><a href="#4-3-字符过滤流" class="headerlink" title="4.3 字符过滤流"></a>4.3 字符过滤流</h5><h6 id="4-3-1-缓冲流"><a href="#4-3-1-缓冲流" class="headerlink" title="4.3.1 缓冲流"></a>4.3.1 缓冲流</h6><blockquote><p>字符缓冲流是文本文档操作使用最多的流。能够直接操作一行，读取一行，写入一行，支持换行符等。</p></blockquote><blockquote><p>BufferedReader：读取文本文件，支持按行读取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain9</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>));<br>)&#123;<br>String str;<br><span class="hljs-comment">// 读取一行字符串</span><br><span class="hljs-keyword">while</span>((str = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(str);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>BufferedWriter：写入文本文件，支持按行写入，支持换行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain10</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>BufferedWriter writer = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>));<br>)&#123;<br>String str = <span class="hljs-string">&quot;标识当前类唯一的版本号。作用在于不同版本的相同类型也不能进行序列化和反序列化。&quot;</span>;<br>writer.write(str);<br>writer.newLine(); <span class="hljs-comment">// 写入换行</span><br>writer.write(<span class="hljs-string">&quot;序列化即告诉对象流如何写入一个对象。&quot;</span>);<br>writer.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-3-2-PrintWriter"><a href="#4-3-2-PrintWriter" class="headerlink" title="4.3.2 PrintWriter"></a>4.3.2 PrintWriter</h6><blockquote><p>封装了print()和println()这些打印的方法，支持原样打印。</p></blockquote><h4 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h4><blockquote><p>作用是将字节流转换字符流。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain11</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br><span class="hljs-comment">// 将字节流转换成字符流</span><br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 创建一个字节流</span><br>InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(fis, <span class="hljs-string">&quot;utf-8&quot;</span>); <span class="hljs-comment">// 创建一个转换流</span><br>BufferedReader reader = <span class="hljs-keyword">new</span> BufferedReader(isr); <span class="hljs-comment">// 创建一字符流</span><br>)&#123;<br>String str;<br><span class="hljs-keyword">while</span>((str = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(str);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain12</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br><span class="hljs-comment">// 将字节流转换成字符流</span><br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 创建一个字节流</span><br>OutputStreamWriter osr = <span class="hljs-keyword">new</span> OutputStreamWriter(fos, <span class="hljs-string">&quot;utf-8&quot;</span>); <span class="hljs-comment">// 创建一个转换流</span><br>BufferedWriter writer = <span class="hljs-keyword">new</span> BufferedWriter(osr); <span class="hljs-comment">// 创建一字符流</span><br>)&#123;<br>writer.write(<span class="hljs-string">&quot;床前明月光&quot;</span>);<br>writer.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a>在项目中，可以需要定义一些通用方法，此时，为了通用，会将所有文件操作定义成字节流，但是如果操作的文件在明知是文本文件的情况下，需要将得到字节流转换成字符流，此时就需要使用转换流。</p></blockquote><h4 id="六、File"><a href="#六、File" class="headerlink" title="六、File"></a>六、File</h4><h5 id="6-1-File类"><a href="#6-1-File类" class="headerlink" title="6.1 File类"></a>6.1 File类</h5><blockquote><p>File类代表磁盘上的一个文件或文件夹。</p><p>常见方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain13</span> </span>&#123;<br><span class="hljs-comment">// 文件操作</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;</span>);<br>file.createNewFile(); <span class="hljs-comment">// 创建一个文件</span><br>File file1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\1\\2\\3&quot;</span>);<br>file1.mkdir(); <span class="hljs-comment">// 创建一个文件夹，只能在上层文件夹存在情况下创建，否则无法创建</span><br>file1.mkdirs();<span class="hljs-comment">// 创建一个文件夹，但是如果路径中有上层文件夹不存在，会连上层一起创建，可以创建多层文件夹</span><br>file1.delete(); <span class="hljs-comment">// 删除文件或空文件夹</span><br>System.out.println(file.exists()); <span class="hljs-comment">// 判断一个文件或文件夹是否存在</span><br>System.out.println(file1.getAbsolutePath()); <span class="hljs-comment">// 得到文件或文件夹的绝对路径</span><br>System.out.println(file1.getName()); <span class="hljs-comment">// 得到当前文件或文件夹的名称</span><br>System.out.println(file.getParent()); <span class="hljs-comment">// 得到上层文件夹的路径名称</span><br>file.getParentFile(); <span class="hljs-comment">// 得到上层文件夹File对象</span><br>System.out.println(file.isDirectory()); <span class="hljs-comment">// 判断file是否文件夹</span><br>System.out.println(file.isFile()); <span class="hljs-comment">// 判断file是否文件</span><br>System.out.println(file.length()); <span class="hljs-comment">// 得到文件的大小</span><br>file.list(); <span class="hljs-comment">// 得到文件夹中的所有内容的路径</span><br>file.listFiles();<span class="hljs-comment">// 得到文件夹中所有的File对象</span><br>file.renameTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\2.txt&quot;</span>)); <span class="hljs-comment">// 给file改名</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-2-案例：复制文件夹中的所有内容"><a href="#6-2-案例：复制文件夹中的所有内容" class="headerlink" title="6.2 案例：复制文件夹中的所有内容"></a>6.2 案例：复制文件夹中的所有内容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain14</span> </span>&#123;<br><span class="hljs-comment">// 文件夹复制</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String srcPath = <span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\img&quot;</span>;<br>String destPath = <span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\11\\22&quot;</span>;<br>copy(srcPath, destPath);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复制文件夹</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> srcPath 源路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> destPath 目标路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(String srcPath, String destPath)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>File srcFile = <span class="hljs-keyword">new</span> File(srcPath); <span class="hljs-comment">// 源路径文件</span><br><span class="hljs-comment">// 如果源路径存在</span><br><span class="hljs-keyword">if</span>(srcFile.exists()) &#123;<br>File destFile = <span class="hljs-keyword">new</span> File(destPath); <span class="hljs-comment">// 目标路径文件</span><br><span class="hljs-keyword">if</span>(!destFile.exists()) &#123;<br>destFile.mkdirs();<br>&#125;<br>copyFile(srcFile, destFile);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(File src, File dest)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(src.isDirectory()) &#123;<br>dest.mkdir(); <span class="hljs-comment">// 创建该文件夹</span><br><span class="hljs-comment">// 循环遍历</span><br>File[] files = src.listFiles();<br><span class="hljs-keyword">for</span> (File file : files) &#123;<br><span class="hljs-comment">// 路径在不同的系统中不一样，win系统\\，Linux、macos都是/，win也可以使用/</span><br><span class="hljs-comment">// Java中提供路径常量File.separator</span><br>copyFile(file, <span class="hljs-keyword">new</span> File(dest + File.separator + file.getName())); <br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">try</span> (<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(src);<br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(dest);<br>)&#123;<br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>fos.write(buffer, <span class="hljs-number">0</span>, len);<br>&#125;<br>fos.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="七、FileFilter接口"><a href="#七、FileFilter接口" class="headerlink" title="七、FileFilter接口"></a>七、FileFilter接口</h4><blockquote><p>过滤文件，例如，在复制文件夹时，部分文件不复制。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain15</span> </span>&#123;<br><span class="hljs-comment">// 文件夹复制</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String srcPath = <span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\img&quot;</span>;<br>String destPath = <span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\11\\22&quot;</span>;<br>copy(srcPath, destPath);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复制文件夹</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> srcPath 源路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> destPath 目标路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(String srcPath, String destPath)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>File srcFile = <span class="hljs-keyword">new</span> File(srcPath); <span class="hljs-comment">// 源路径文件</span><br><span class="hljs-comment">// 如果源路径存在</span><br><span class="hljs-keyword">if</span>(srcFile.exists()) &#123;<br>File destFile = <span class="hljs-keyword">new</span> File(destPath); <span class="hljs-comment">// 目标路径文件</span><br><span class="hljs-keyword">if</span>(!destFile.exists()) &#123;<br>destFile.mkdirs();<br>&#125;<br>copyFile(srcFile, destFile);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(File src, File dest)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(src.isDirectory()) &#123;<br>dest.mkdir(); <span class="hljs-comment">// 创建该文件夹</span><br><span class="hljs-comment">// 循环遍历</span><br><span class="hljs-comment">// 文件名称过滤器</span><br>File[] files = src.listFiles(<span class="hljs-keyword">new</span> FilenameFilter() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">accept</span><span class="hljs-params">(File dir, String name)</span> </span>&#123;<br><span class="hljs-comment">// 得到文件</span><br>String path = dir.getAbsolutePath() + File.separator + name;<br><span class="hljs-comment">// 判断文件是否路径</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> File(path).isDirectory()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(name.endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>) || name.endsWith(<span class="hljs-string">&quot;.png&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;);<br><span class="hljs-keyword">for</span> (File file : files) &#123;<br><span class="hljs-comment">// 路径在不同的系统中不一样，win系统\\，Linux、macos都是/，win也可以使用/</span><br><span class="hljs-comment">// Java中提供路径常量File.separator</span><br>copyFile(file, <span class="hljs-keyword">new</span> File(dest + File.separator + file.getName())); <br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">try</span> (<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(src);<br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(dest);<br>)&#123;<br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>fos.write(buffer, <span class="hljs-number">0</span>, len);<br>&#125;<br>fos.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain16</span> </span>&#123;<br><span class="hljs-comment">// 文件夹复制</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String srcPath = <span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\img&quot;</span>;<br>String destPath = <span class="hljs-string">&quot;C:\\Users\\wangliang\\Desktop\\11\\22&quot;</span>;<br>copy(srcPath, destPath);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复制文件夹</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> srcPath 源路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> destPath 目标路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(String srcPath, String destPath)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>File srcFile = <span class="hljs-keyword">new</span> File(srcPath); <span class="hljs-comment">// 源路径文件</span><br><span class="hljs-comment">// 如果源路径存在</span><br><span class="hljs-keyword">if</span>(srcFile.exists()) &#123;<br>File destFile = <span class="hljs-keyword">new</span> File(destPath); <span class="hljs-comment">// 目标路径文件</span><br><span class="hljs-keyword">if</span>(!destFile.exists()) &#123;<br>destFile.mkdirs();<br>&#125;<br>copyFile(srcFile, destFile);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(File src, File dest)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(src.isDirectory()) &#123;<br>dest.mkdir(); <span class="hljs-comment">// 创建该文件夹</span><br><span class="hljs-comment">// 循环遍历</span><br><span class="hljs-comment">// 文件名称过滤器</span><br>File[] files = src.listFiles(<span class="hljs-keyword">new</span> FileFilter() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">accept</span><span class="hljs-params">(File file)</span> </span>&#123;<br><span class="hljs-comment">// 判断文件是否文件夹</span><br><span class="hljs-keyword">if</span>(file.isDirectory()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(file.getName().endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>) || file.getName().endsWith(<span class="hljs-string">&quot;.png&quot;</span>)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;);<br><span class="hljs-keyword">for</span> (File file : files) &#123;<br><span class="hljs-comment">// 路径在不同的系统中不一样，win系统\\，Linux、macos都是/，win也可以使用/</span><br><span class="hljs-comment">// Java中提供路径常量File.separator</span><br>copyFile(file, <span class="hljs-keyword">new</span> File(dest + File.separator + file.getName())); <br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">try</span> (<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(src);<br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(dest);<br>)&#123;<br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>fos.write(buffer, <span class="hljs-number">0</span>, len);<br>&#125;<br>fos.flush();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JQuery</title>
    <link href="/myblog/2019/10/22/JQuery/"/>
    <url>/myblog/2019/10/22/JQuery/</url>
    
    <content type="html"><![CDATA[<h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><h4 id="一、jQuery概念"><a href="#一、jQuery概念" class="headerlink" title="一、jQuery概念"></a>一、jQuery概念</h4><blockquote><p>jQuery是一个JS的框架。简化的js的操作。</p><p>特点：</p><p>1、采用链式结构。</p><p>2、支持css操作。</p><p>3、拥有丰富的插件。</p><p>4、<a href>兼容</a>各种主流的浏览器。</p><p>5、有丰富的<a href>选择器</a>，能够快速的得到要操作的对象。</p><p>两种版本：</p><p>min版本：项目上线时使用的版本，变量命名极简，没有注释，代码不规范， 能省则省，体积小。</p><p>开发调试版本：直接以版本号命名的就是开发调试版本，代码比较规范，注释清晰，变量命名合理，体积较大。作用是在开发调试过程中使用，可以查看源码，或者进行调试。</p></blockquote><h4 id="二、jQuery的安装"><a href="#二、jQuery的安装" class="headerlink" title="二、jQuery的安装"></a>二、jQuery的安装</h4><blockquote><p>两种方式：</p><p>1、将该js下载到本地，并在项目中引用。</p><p>每次有一个客户端访问服务器，都需要在服务器上下载该js。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2、直接引用网络上的js。(CDN方式)</p><p>常用的知名的CDN:</p><p><a href="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js">https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js</a></p><p><a href="https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js">https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js</a></p><p><a href="https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js">https://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.min.js</a></p><p><a href="https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js">https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js</a></p><p><a href="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js">https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js</a></p><p>客户端访问服务器，去别的服务器下载js。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;引用百度、新浪等网站的地址&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h4><blockquote><p>语法：</p><p>$(selector); 得到一个或者一组对象。</p><p>$(selector).action()；对象的操作。</p></blockquote><h4 id="四、选择器"><a href="#四、选择器" class="headerlink" title="四、选择器"></a>四、选择器</h4><blockquote><p>在jQuery中使用选择器来获取一个或者一组对象。</p></blockquote><h5 id="4-1-基本选择器"><a href="#4-1-基本选择器" class="headerlink" title="4.1 基本选择器"></a>4.1 基本选择器</h5><blockquote><p>id选择器，相当于document.getElementById(“id”);</p><p>语法：$(“#id”);</p></blockquote><blockquote><p>元素选择器，相当于document.getElementsByTagName(“div”);</p><p>语法：$(“div”)</p></blockquote><blockquote><p>class选择器，相当于document.getElementsByClassName(“c1”);</p><p>语法：$(“.c1”);</p></blockquote><blockquote><p>*：表示得到所有的元素</p><p>语法：$(“*”)</p></blockquote><blockquote><p>,：得到部分元素的组合。</p><p>$(“#div1, #div2, .c1, p”); 得到id为div1和div2的元素，以及所有的class为c1的元素以及所有的p标签元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>555<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>BBBB<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>CCCC<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>DDDD<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//document.getElementById(&quot;txt&quot;).value = &quot;zhangsan&quot;;</span></span><br><span class="javascript"><span class="hljs-comment">// id选择器</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#txt&quot;</span>).val(<span class="hljs-string">&quot;lisi&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// </span></span><br><span class="javascript"><span class="hljs-comment">//var arr = document.getElementsByTagName(&quot;div&quot;);</span></span><br><span class="javascript"><span class="hljs-comment">//for(var i in arr)&#123;</span></span><br><span class="javascript"><span class="hljs-comment">//arr[i].style.backgroundColor = &quot;red&quot;;</span></span><br><span class="javascript"><span class="hljs-comment">//&#125;</span></span><br><span class="javascript"><span class="hljs-comment">// 在jQuery中，操作可以直接针对一组元素，而不用循环</span></span><br><span class="javascript"><span class="hljs-comment">// 元素选择器</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;greenyellow&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//var arr = document.getElementsByClassName(&quot;c1&quot;);</span></span><br><span class="javascript"><span class="hljs-comment">//for(var i in arr)&#123;</span></span><br><span class="javascript"><span class="hljs-comment">//arr[i].style.backgroundColor = &quot;red&quot;;</span></span><br><span class="javascript"><span class="hljs-comment">//&#125;</span></span><br><span class="javascript"><span class="hljs-comment">// class选择器</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;.c1&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;greenyellow&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-2-层次选择器"><a href="#4-2-层次选择器" class="headerlink" title="4.2 层次选择器"></a>4.2 层次选择器</h5><blockquote><p>空格 ：得到某个元素的所有后代元素中的某个元素。</p><p>例如：$(“#div1 img”) 得到id为div1中的所有的img元素。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/14.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/14.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/14.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 得到id为div1中的所有的img元素。</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#div1 img&quot;).css(&quot;width&quot;, &quot;100px&quot;);</span></span><br><span class="javascript">        <span class="hljs-comment">// 得到id为div1中的所有子代的img元素。</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#div1&gt;img&quot;</span>).css(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;100px&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&gt;</code>：得到某个元素的所有子代元素中的某个元素。</p><p><code>+</code> ：得到某个元素后面相邻的兄弟元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter1&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 得到紧挨着每一个label的一个input元素</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;label+input&quot;).val(&quot;123&quot;);</span></span><br><span class="javascript"><span class="hljs-comment">// 得到每一个label的兄弟input元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;label~input&quot;</span>).val(<span class="hljs-string">&quot;123&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>~</code>：得到某个元素的所有兄弟元素</p></blockquote><h5 id="4-3-基础选择器"><a href="#4-3-基础选择器" class="headerlink" title="4.3 基础选择器"></a>4.3 基础选择器</h5><blockquote><p>语法：</p><p>$(“:selector”)</p></blockquote><blockquote><p>:first：表示一组元素中的第一个元素，例如：$(“li:first”) 得到所有li中的第一个li。</p><p>:last：表示一组元素中的最后一个元素，例如：$(“li:last”) 得到所有li中的最后一个li。</p><p>:even：得到一组元素中的偶数元素，0、2、4等，例如：$(“li:even”) 得到所有li中的偶数下标的li。</p><p>:odd：得到一组元素中的奇数元素，1、3、5等，例如：$(“li:odd”) 得到所有li中的奇数下标的li。</p><p>:not()：取反，例如：$(“li:not(:first)”) 得到所有li中的除了第一个以外其他的所有li。</p><p>:eq()：表示一组元素中的指定个元素，例如：$(“li:eq(0)”) 得到所有li中的第一个（下标为0）li。</p><p>:gt()：表示一组元素中下标大于几的所有元素，例如：$(“li:gt(3)”) 得到所有li中的下标大于3的所有li。</p><p>:lt()：表示一组元素中下标小于几的所有元素，例如：$(“li:lt(3)”) 得到所有li中的下标小于3的所有li。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 启动加载页面时加载内容</span></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 偶数行的颜色</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;tr:even&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;aquamarine&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">// 奇数行颜色</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;tr:odd&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;chocolate&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-4-内容选择器"><a href="#4-4-内容选择器" class="headerlink" title="4.4 内容选择器"></a>4.4 内容选择器</h5><blockquote><p>根据内容选择指定的元素。</p><p>:contains(text)：得到元素中包含指定文本的内容的所有元素。例如：$(“div:contains(‘武汉’)”); 得到所有的内容包含武汉的div。</p><p>:empty：得到元素中内容为空的元素。例如：$(“div:empty”)。得到页面所有空的div。</p><p>:parent：得到元素中内容不为空的元素。例如：$(“div:parent”)。得到页面所有不为空的div。</p><p>:has(selector)：得到包含有另一个选择器选中内容的所有元素。例如：$(“div:has(:checkbox)”)：得到所有其中包含有checkbox的div。</p></blockquote><h5 id="4-5-可见性选择器"><a href="#4-5-可见性选择器" class="headerlink" title="4.5 可见性选择器"></a>4.5 可见性选择器</h5><blockquote><p>:hidden：得到所有的隐藏元素。例如：$(“div:hidden”); 得到所有的隐藏的div。</p><p>:visible：得到所有的可见元素。例如：$(“div:visible”); 得到所有的可见的div。</p></blockquote><h5 id="4-6-属性选择器"><a href="#4-6-属性选择器" class="headerlink" title="4.6 属性选择器"></a>4.6 属性选择器</h5><blockquote><p>通过属性判断。</p><p><code>[attr]</code>：得到包含有某个属性的标签。例如：$(“div[id]”)；得到所有的包含有id的div。</p><p><code>[attr=v]</code>：得到某个属性的值为v的标签。例如：$(“a[title=’a1’]”)；得到所有的所有title值为a1的a标签。</p><p><code>[attr!=v]</code>：得到某个属性的值不为v的标签。例如：$(“a[title!=’a1’]”)；得到所有的所有title值不为a1的a标签。</p><p><code>[attr^=v]</code>：得到某个属性的值以v开头的标签。例如：$(“a[title^=’a1’]”)；得到所有的所有title值以a1开头的a标签。</p><p><code>[attr$=v]</code>：得到某个属性的值以v结尾的标签。例如：<code>$(&quot;a[title$=&#39;a1&#39;]&quot;)</code>；得到所有的所有title值以a1结尾的a标签。</p><p><code>[attr*=v]</code>：得到某个属性的值包含v的标签。例如：$(“a[title*=’a1’]”)；得到所有的所有title值包含a1的a标签。</p><p><code>[][][]</code>：对属性做多次限定。例如：<code>$(&quot;a[href^=&#39;http&#39;][title=a1][class!=c1]&quot;)</code>得到所有的href以http开头，title为a1，class不为c1的a标签。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>BBBB<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div2&quot;</span>&gt;</span>CCCC<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>DDDD<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;a1a&quot;</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span>BBBB<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>CCCC<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[id]&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;chartreuse&quot;</span>);</span><br><span class="javascript">$(<span class="hljs-string">&quot;a[title^=&#x27;a1&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-7-子元素选择器"><a href="#4-7-子元素选择器" class="headerlink" title="4.7 子元素选择器"></a>4.7 子元素选择器</h5><blockquote><p>:first-child：将得到元素根据父元素不同分为多组，每一组的第一个元素，结果可能是多个元素。与:first不同，:first是指将所有得到的元素归为一组，得到第一个元素，结果是一个元素。</p><p>:last-child：将得到元素根据父元素不同分为多组，每一组的最后一个元素，结果可能是多个元素。与:last不同，:last是指将所有得到的元素归为一组，得到最后一个元素，结果是一个元素。</p><p>:nth-child：将得到元素根据父元素不同分为多组，每一组指定一个元素，结果可能是多个元素。与:eq不同，:eq是指将所有得到的元素归为一组，得到指定一个元素，结果是一个元素。</p><p><a href>注意：</a>nth-child从1开始计算，而eq从0开始计算。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>444<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>555<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>666<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>BBBB<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>CCCC<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>DDDD<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>EEEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>FFFF<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 得到两组li，每组3个元素，每组的第一个元素变颜色，即111和444变颜色。</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;li:first-child&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span><br><span class="javascript"><span class="hljs-comment">// 得到一组li，共6个元素，第一个元素变颜色，即111变颜色。</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;li:first&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 得到一组p元素，共6个，下标为1（从0开始）的元素改变颜色，即BBB改变颜色。</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;p:eq(1)&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span><br><span class="javascript"><span class="hljs-comment">// 得到两组p元素，每组3个，每组的第1（从1开始）个元素改变颜色，即AAA和DDD改变颜色。</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;p:nth-child(1)&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-8-表单相关选择器"><a href="#4-8-表单相关选择器" class="headerlink" title="4.8 表单相关选择器"></a>4.8 表单相关选择器</h5><blockquote><p>:input ：得到所有的input表单元素，包括select之类的。</p><p>:text</p><p>:password</p><p>:radio</p><p>:checkbox</p><p>:submit</p><p>:reset</p><p>:button</p><p>:file</p><p>:hidden</p><p>:image：图片提交按钮</p><p>:enabled ：得到所有可用的元素</p><p>:disabled ：得到所有不可用的元素</p><p>:checked：得到所有的选中的单选框或者复选框</p><p>:selected：得到所有的选中的下拉框的选项</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;基本选择器.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 给页面上所有不可用元素赋值</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;:disabled&quot;</span>).val(<span class="hljs-string">&quot;1111&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="五、属性赋值相关"><a href="#五、属性赋值相关" class="headerlink" title="五、属性赋值相关"></a>五、属性赋值相关</h4><h5 id="5-1-元素属性赋值和取值"><a href="#5-1-元素属性赋值和取值" class="headerlink" title="5.1 元素属性赋值和取值"></a>5.1 元素属性赋值和取值</h5><blockquote><p>attr(key)：获取元素的属性值</p><p>attr(key, value)：给元素的某个属性赋值。</p><p>removeAttr(key)：删除某个属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 获取属性值</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> h = $(<span class="hljs-string">&quot;#a1&quot;</span>).attr(<span class="hljs-string">&quot;href&quot;</span>);</span><br><span class="javascript">alert(h);</span><br><span class="javascript"><span class="hljs-comment">// 修改属性值</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#a1&quot;</span>).attr(<span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;http://www.qfedu.com&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>案例：实现复选框的全选/全不选/反选功能。</p><p>prop(key)：获取元素的动态的属性值，例如checked属性</p><p>prop(key, value)：给元素的某个动态属性赋值。</p><p>removeProp(key)：删除某个动态属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn2()&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反选&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn3()&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 获取属性值</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> h = $(<span class="hljs-string">&quot;#a1&quot;</span>).attr(<span class="hljs-string">&quot;href&quot;</span>);</span><br><span class="javascript">alert(h);</span><br><span class="javascript"><span class="hljs-comment">// 修改属性值</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#a1&quot;</span>).attr(<span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;http://www.qfedu.com&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> v = $(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>);</span><br><span class="javascript">$(<span class="hljs-string">&quot;:checkbox:not(:first)&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>, v);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 循环所有的checkbox，设置与原来相反的值</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;:checkbox:not(:first)&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, obj</span>)</span>&#123;</span><br><span class="javascript">$(obj).prop(<span class="hljs-string">&quot;checked&quot;</span>, !$(obj).prop(<span class="hljs-string">&quot;checked&quot;</span>));</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-2-css操作"><a href="#5-2-css操作" class="headerlink" title="5.2 css操作"></a>5.2 css操作</h5><blockquote><p>1、将已经定义好的css以class属性来赋值。</p><p>addClass()</p><p>removeClass()</p></blockquote><blockquote><p>2、使用css方法</p></blockquote><blockquote><p>3、使用width、height等简化方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.c2</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br>111<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 通过属性赋值的方式设置样式</span></span><br><span class="javascript"><span class="hljs-comment">// 多次赋值，后面会覆盖前面的</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#div1&quot;)</span></span><br><span class="javascript"><span class="hljs-comment">//.attr(&quot;class&quot;, &quot;c1&quot;)</span></span><br><span class="javascript"><span class="hljs-comment">//.attr(&quot;class&quot;, &quot;c2&quot;);</span></span><br><span class="javascript"><span class="hljs-comment">// 给元素添加指定样式</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#div1&quot;).addClass(&quot;c1&quot;).addClass(&quot;c2&quot;);</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 删除某个指定样式</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#div1&quot;).removeClass(&quot;c1&quot;);</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 使用css方法添加单个样式</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#div1&quot;).css(&quot;background-color&quot;, &quot;aquamarine&quot;);</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 使用css方法添加多个样式</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).css(&#123;<span class="hljs-string">&quot;background-color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>, </span><br><span class="javascript"><span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;1px solid green&quot;</span>&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 设置宽度和高度</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).width(<span class="hljs-string">&quot;200&quot;</span>);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).height(<span class="hljs-string">&quot;200&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 获取某个样式的值</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> b = $(<span class="hljs-string">&quot;#div1&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>);</span><br><span class="javascript">alert(b);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-3-文本操作"><a href="#5-3-文本操作" class="headerlink" title="5.3 文本操作"></a>5.3 文本操作</h5><blockquote><p>文本框等表单元素value赋值和取值。相当原生js中的document.getElementById(“txt”).value = “zhangsan”;</p><p>语法：$(“#txt”).val();</p><p>元素的内容赋值和取值。相当原生的innerHTML和innerText。</p><p>语法：<code>$(&quot;div&quot;).html();</code>或者<code>$(&quot;div&quot;).text();</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn2()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 获取值</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> v = $(<span class="hljs-string">&quot;#txt&quot;</span>).val();</span><br><span class="javascript">alert(v);</span><br><span class="javascript"><span class="hljs-comment">// 赋值</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#txt&quot;</span>).val(<span class="hljs-string">&quot;hello, world&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// text方法只能设置文字内容</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#a1&quot;).attr(&quot;href&quot;, &quot;http://www.qfedu.com&quot;)</span></span><br><span class="javascript"><span class="hljs-comment">//.text(&quot;千锋&quot;);</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// html方法才能设置为html代码</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#a1&quot;</span>).attr(<span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;http://www.qfedu.com&quot;</span>)</span><br><span class="javascript">.html(<span class="hljs-string">&quot;&lt;img src=&#x27;img/14.png&#x27; /&gt;&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="六、jQuery与原生的js的转换"><a href="#六、jQuery与原生的js的转换" class="headerlink" title="六、jQuery与原生的js的转换"></a>六、jQuery与原生的js的转换</h4><blockquote><p>将jQuery转换成原生对象，需要加上[0]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 将jQuery转换成原生对象</span><br>    $(<span class="hljs-string">&quot;#s1&quot;</span>)[<span class="hljs-number">0</span>].options.add(<span class="hljs-keyword">new</span> Option(<span class="hljs-string">&quot;武汉&quot;</span>,<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>将原生对象转换成jQuery对象，使用$()</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn4</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> m = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;img1&quot;</span>);<br><span class="hljs-comment">//m.style.display = &#x27;none&#x27;;</span><br>$(m).hide(<span class="hljs-number">1000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="七、循环"><a href="#七、循环" class="headerlink" title="七、循环"></a>七、循环</h4><blockquote><p>jQuery对象.each()：对得到的jQuery对象进行循环。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 循环所有的div，并将1，4，7设置为红色背景，将2、5、8设置为绿色背景</span><br><span class="hljs-comment">// each函数用来循环，传入一个函数作为处理循环过程的函数，index为循环的下标，obj是每次循环的对象。</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).each(function(index, obj)&#123;<br>    <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span> || index == <span class="hljs-number">3</span> || index == <span class="hljs-number">6</span>)&#123;<span class="hljs-comment">// 1、4、7</span><br>        $(obj).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index == <span class="hljs-number">1</span> || index == <span class="hljs-number">4</span> || index == <span class="hljs-number">7</span>)&#123;<span class="hljs-comment">// 2、5、8</span><br>        $(obj).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>);<br>    &#125; <br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>对js的数组循环。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];<br>$.each(arr, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, obj</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;index=&quot;</span> + index + <span class="hljs-string">&quot;, obj=&quot;</span> + obj);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="八、文档操作"><a href="#八、文档操作" class="headerlink" title="八、文档操作"></a>八、文档操作</h4><h5 id="8-1-内部插入"><a href="#8-1-内部插入" class="headerlink" title="8.1 内部插入"></a>8.1 内部插入</h5><blockquote><p>在元素的内部添加。作为子元素。</p></blockquote><blockquote><p>append：添加到指定元素内部的最后一行。</p><p>prepend：添加到指定元素内部的第一行。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加一行&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> arr = [</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">21</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三2&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三3&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">23</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">4</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三4&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">24</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">5</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三5&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">6</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三6&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>&#125;</span><br><span class="javascript">];</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$.each(arr, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, obj</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 添加到table中的最后一行tr</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#t1&quot;).append(&quot;&lt;tr&gt;&lt;td&gt;&quot;+obj.id+&quot;&lt;/td&gt;&lt;td&gt;&quot;+obj.name+&quot;&lt;/td&gt;&lt;td&gt;&quot;+obj.age+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;);</span></span><br><span class="javascript">            <span class="hljs-comment">// 添加到table中的第一行tr</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#t1&quot;</span>).prepend(<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>+obj.id+<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>+obj.name+<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>+obj.age+<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>appendTo：得到页面元素，并将其添加到另一个元素中的最后。</p><p>prependTo：得到页面元素，并将其添加到另一个元素中的最前面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).appendTo(<span class="hljs-string">&quot;#div2&quot;</span>); <span class="hljs-comment">// 将id为div1的元素添加到id为div2的元素的内部的最后。</span><br>$(<span class="hljs-string">&quot;#div1&quot;</span>).prependTo(<span class="hljs-string">&quot;#div2&quot;</span>); <span class="hljs-comment">// 将id为div1的元素添加到id为div2的元素的内部的最前。</span><br></code></pre></td></tr></table></figure><h5 id="8-2-外部插入"><a href="#8-2-外部插入" class="headerlink" title="8.2 外部插入"></a>8.2 外部插入</h5><blockquote><p>将元素添加到另一个元素的旁边，作为兄弟元素，并列。</p></blockquote><blockquote><p>after：添加到指定元素后面。</p><p>before：添加到指定元素前面。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).after(<span class="hljs-string">&quot;&lt;b&gt;Hello&lt;/b&gt;&quot;</span>); <span class="hljs-comment">// 将b元素添加到p元素的后面</span><br>$(<span class="hljs-string">&quot;p&quot;</span>).before(<span class="hljs-string">&quot;&lt;b&gt;Hello&lt;/b&gt;&quot;</span>);<span class="hljs-comment">// 将b元素添加到p元素的前面</span><br></code></pre></td></tr></table></figure><blockquote><p>insertAfter：</p><p>insertBefore：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;b&quot;</span>).insertAfter(<span class="hljs-string">&quot;p&quot;</span>); <span class="hljs-comment">// 与$(&quot;p&quot;).after(&quot;&lt;b&gt;Hello&lt;/b&gt;&quot;); 相同</span><br>$(<span class="hljs-string">&quot;b&quot;</span>).insertBefore(<span class="hljs-string">&quot;p&quot;</span>) <span class="hljs-comment">// 与$(&quot;p&quot;).before(&quot;&lt;b&gt;Hello&lt;/b&gt;&quot;); 相同</span><br></code></pre></td></tr></table></figure><h5 id="8-3-删除元素"><a href="#8-3-删除元素" class="headerlink" title="8.3 删除元素"></a>8.3 删除元素</h5><blockquote><p>empty()：清空内部内容。</p><p>remove()：删除对象，可以使用条件过滤</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p&quot;</span>).empty() <span class="hljs-comment">// 清空p元素内部的所有内容。</span><br>$(<span class="hljs-string">&quot;p&quot;</span>).remove() <span class="hljs-comment">// 删除页面上所有的p元素</span><br>$(<span class="hljs-string">&quot;p&quot;</span>).remove(<span class="hljs-string">&quot;.c1&quot;</span>) <span class="hljs-comment">// 删除页面上所有的引用了c1样式的p元素</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加一行&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> arr = [</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">21</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">5</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三2&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">6</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三3&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">23</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">8</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三4&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">24</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">15</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三5&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">16</span>, <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三6&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>&#125;</span><br><span class="javascript">];</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$.each(arr, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, obj</span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#t1&quot;</span>).append(<span class="hljs-string">&quot;&lt;tr id=&#x27;tr&quot;</span>+obj.id+<span class="hljs-string">&quot;&#x27;&gt;&lt;td&gt;&quot;</span>+obj.id+<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>+obj.name+<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>+obj.age</span><br><span class="javascript">+<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&lt;input type=&#x27;button&#x27; value=&#x27;删除&#x27; onclick=&#x27;fn2(&quot;</span>+obj.id+<span class="hljs-string">&quot;)&#x27;&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params">n</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 发送一个ajax请求到后台去执行删除，成功后同时删除页面当前行</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#tr&quot;</span> + n).remove();</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="九、过滤和查找"><a href="#九、过滤和查找" class="headerlink" title="九、过滤和查找"></a>九、过滤和查找</h4><blockquote><p>将前面的基础选择器使用函数的方式来书写。</p><p>eq() 相当于:eq</p><p>first()</p><p>last()</p><p>not()</p><p>hasClass() 判断是否使用了某个class样式。</p><p>filter(selector) 再次使用选择器筛选。</p><p>slice(begin, end) : 截取一组元素中的一部分，从begin开始，到end结束。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>];</span><br><span class="javascript"><span class="hljs-comment">// 截取数组中子数组，从begin开始，到end结束</span></span><br><span class="javascript">arr = arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">// 结果为[3]</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(arr);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>];</span><br><span class="javascript"><span class="hljs-comment">//arr1.splice(2, 3); // 从下标2的位置开始删除3个元素</span></span><br><span class="javascript"><span class="hljs-comment">//console.log(arr1);</span></span><br><span class="javascript"><span class="hljs-comment">//arr1.splice(2, 0, &quot;z&quot;, &quot;y&quot;);// 从下标2的位置开始添加z和y两个元素</span></span><br><span class="javascript"><span class="hljs-comment">//console.log(arr1);</span></span><br><span class="javascript">arr1.splice(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>);<span class="hljs-comment">// 从下标2的位置开始删除4个元素，添加z和y</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(arr1);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>children() ：得到所有的后代元素</p><p>children(“.c1”) ：得到所有的后代元素中使用了样式c1的元素</p><p>next() ：得到相邻的兄弟元素。</p><p>next(“.c1”)</p><p>siblings() ：得到所有的兄弟元素。</p><p>siblings(“.c1”) ：得到所有的兄弟元素中使用了样式c1的元素。</p></blockquote><h4 id="十、事件"><a href="#十、事件" class="headerlink" title="十、事件"></a>十、事件</h4><h5 id="10-1-ready"><a href="#10-1-ready" class="headerlink" title="10.1 ready"></a>10.1 ready</h5><blockquote><p>页面启动时加载。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>&#125;); <span class="hljs-comment">// 相当于window.onload = function()&#123;&#125;</span><br><br><span class="hljs-comment">// 上面的代码可以简写为：</span><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="10-2-bind、unbind、one"><a href="#10-2-bind、unbind、one" class="headerlink" title="10.2 bind、unbind、one"></a>10.2 bind、unbind、one</h5><blockquote><p>bind表示绑定事件</p><p>unbind表示解绑事件</p><p>one表示执行一次的事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;绑定事件1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;解绑事件&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn2()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;绑定事件2&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn3()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;绑定仅执行一次的事件&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn5()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn4</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;我是一个点击事件&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).bind(<span class="hljs-string">&quot;click&quot;</span>, fn4);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 表示解绑一个函数fn4，如果click还绑定了其他的函数，仍旧执行</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;#btn1&quot;).unbind(&quot;click&quot;, fn4); </span></span><br><span class="javascript"><span class="hljs-comment">// 解绑所有的click事件所执行的函数</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).unbind(<span class="hljs-string">&quot;click&quot;</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).bind(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;我是另一个点击事件&quot;</span>);</span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn5</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).one(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&quot;我是仅执行一次的点击事件&quot;</span>);</span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="10-3-trigger（触发器）"><a href="#10-3-trigger（触发器）" class="headerlink" title="10.3 trigger（触发器）"></a>10.3 trigger（触发器）</h5><blockquote><p>模拟执行一次事件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;模拟点击&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn2()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">n++;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).text(n);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).trigger(<span class="hljs-string">&quot;click&quot;</span>);</span><br><span class="javascript">&#125;, <span class="hljs-number">1</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="10-4-直接绑定常用事件"><a href="#10-4-直接绑定常用事件" class="headerlink" title="10.4 直接绑定常用事件"></a>10.4 直接绑定常用事件</h5><blockquote><p>click</p><p>change</p><p>focus</p><p>blur等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 点击事件</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="十一、动画"><a href="#十一、动画" class="headerlink" title="十一、动画"></a>十一、动画</h4><blockquote><p>有3种自带动画：</p><p>1、直接隐藏和显示</p><p>show()和hide，也可以在函数中添加一个时间，以设置隐藏或显示的时间。</p></blockquote><blockquote><p>2、滑动隐藏和显示</p><p>slideUp()和slideDown，也可以在函数中添加一个时间，以设置隐藏或显示的时间。</p><p>3、淡入淡出</p><p>fadeIn和fadeOut</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/14.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;隐藏&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;显示&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn2()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//$(&quot;img&quot;).hide(1000);</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;img&quot;).slideUp(slow);</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;img&quot;</span>).fadeOut(<span class="hljs-number">2000</span>); </span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//$(&quot;img&quot;).show(1000);</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;img&quot;).slideDown(1000);</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;img&quot;</span>).fadeIn(<span class="hljs-number">2000</span>);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="十二、AJAX"><a href="#十二、AJAX" class="headerlink" title="十二、AJAX"></a>十二、AJAX</h4><blockquote><p>语法：</p><p>$.ajax({</p><p>​    url:””,</p><p>​    method:””.</p><p>​    dataType:””,</p><p>​    contentType:””,</p><p>​    data:””,</p><p>​    success: function(){},</p><p>​    fail:function(){}</p><p>});</p><p>提供两个简化的版本：</p><p>$.get(“url”, {“name”:”mary”, “age”:20},  function(data){}); // 发送get请求</p><p>$.post(“url”, {“name”:”mary”, “age”:20},  function(data){}); // 发送post请求</p><p>如果没有参数需要传递，也可以不写参数，get方法可以把参数写在url中。</p><p><a href>注意：</a>上面的get和post简化的方式，只能发送普通的表单请求，如果要发送json数据，需要使用ajax完全版。</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;省市联动&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-1.11.0.js&quot;</span> &gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body onload=<span class="hljs-string">&quot;fnLoad()&quot;</span>&gt;<br>    &lt;select name=<span class="hljs-string">&quot;province&quot;</span> id=<span class="hljs-string">&quot;province&quot;</span> onchange=<span class="hljs-string">&quot;fnChange()&quot;</span>&gt;<br>        &lt;option value=<span class="hljs-string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;select name=<span class="hljs-string">&quot;city&quot;</span> id=<span class="hljs-string">&quot;city&quot;</span> onchange=<span class="hljs-string">&quot;fnChange1()&quot;</span>&gt;<br>        &lt;option value=<span class="hljs-string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;<br>    &lt;/select&gt;<br>    &lt;select name=<span class="hljs-string">&quot;county&quot;</span> id=<span class="hljs-string">&quot;county&quot;</span>&gt;<br>        &lt;option value=<span class="hljs-string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;<br>    &lt;/select&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>    <span class="hljs-function">function <span class="hljs-title">fnLoad</span><span class="hljs-params">()</span> </span>&#123;<br>        $.get(<span class="hljs-string">&quot;province.do&quot;</span>, function (data) &#123;<br>            $.each(data, function (index, obj) &#123;<br>                $(<span class="hljs-string">&quot;#province&quot;</span>).append(<span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+obj.id+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+obj.name+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>);<br>            &#125;)<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">fnChange</span><span class="hljs-params">()</span> </span>&#123;<br>        $.get(<span class="hljs-string">&quot;city.do&quot;</span>, &#123;<span class="hljs-string">&quot;provinceId&quot;</span>: $(<span class="hljs-string">&quot;#province&quot;</span>).val()&#125;, function (data) &#123;<br>            $(<span class="hljs-string">&quot;#city&quot;</span>).html(<span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;请选择&lt;/option&gt;&quot;</span>);<br>            $(<span class="hljs-string">&quot;#county&quot;</span>).html(<span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;请选择&lt;/option&gt;&quot;</span>);<br>            $.each(data, function (index, obj) &#123;<br>                $(<span class="hljs-string">&quot;#city&quot;</span>).append(<span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+obj.id+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+obj.name+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>);<br>            &#125;)<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">fnChange1</span><span class="hljs-params">()</span> </span>&#123;<br>        $.get(<span class="hljs-string">&quot;county.do&quot;</span>, &#123;<span class="hljs-string">&quot;cityId&quot;</span>: $(<span class="hljs-string">&quot;#city&quot;</span>).val()&#125;, function (data) &#123;<br>            $(<span class="hljs-string">&quot;#county&quot;</span>).html(<span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;请选择&lt;/option&gt;&quot;</span>);<br>            $.each(data, function (index, obj) &#123;<br>                $(<span class="hljs-string">&quot;#county&quot;</span>).append(<span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+obj.id+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+obj.name+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span>);<br>            &#125;)<br>        &#125;);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="十三、多库共存"><a href="#十三、多库共存" class="headerlink" title="十三、多库共存"></a>十三、多库共存</h4><blockquote><p>当页面上使用多个js的库，并且都使用$()的方式来使用。此时会出现冲突。解决方案如下：</p><p>1、直接使用jQuery作为前缀。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#div&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br><span class="hljs-comment">// 改为</span><br>jQuery(<span class="hljs-string">&quot;#div&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>2、创建一个新的别名用以在接下来的库中使用jQuery对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jq = jQuery.noConflict();<br><span class="hljs-comment">// 基于 jQuery 的代码</span><br>jq(<span class="hljs-string">&quot;div p&quot;</span>).hide();<br><span class="hljs-comment">// 基于其他库的 $() 代码</span><br>$(<span class="hljs-string">&quot;content&quot;</span>).style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8新特性</title>
    <link href="/myblog/2019/10/22/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/myblog/2019/10/22/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h3><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><blockquote><p>于2014年发布，支持</p><ul><li>lambda表达式</li><li>函数式接口</li><li>方法引用</li><li>Stream API</li><li>新时间API</li></ul></blockquote><h4 id="二、lambda表达式"><a href="#二、lambda表达式" class="headerlink" title="二、lambda表达式"></a>二、lambda表达式</h4><blockquote><p>是特殊的匿名内部类，只是语法更简洁。</p></blockquote><blockquote><p>定义一个接口：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过匿名内部类的方式，创建对象，并调用该方法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m = <span class="hljs-keyword">new</span> MyInterface() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span> </span>&#123;<br>System.out.println(name);<br>&#125;<br>&#125;;<br>m.say(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>将上面的匿名内部类简化为：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m = (String name) -&gt; &#123;<br>System.out.println(name);<br>&#125;;<br>m.say(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a></p><ul><li>参数列表的类型会自动推断。</li></ul><p>上面的代码可以简化为：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m = (name) -&gt; &#123;<br>System.out.println(name);<br>&#125;;<br>m.say(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a></p><ul><li>如果参数列表为空，需要保留小括号。</li><li>如果参数列表有参，且只有一个参数，那么小括号可以去掉。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m = name -&gt; &#123;<br>System.out.println(name);<br>&#125;;<br>m.say(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a></p><ul><li>如果方法没有返回值，且代码只有一行，大括号可以省略。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m = name -&gt; System.out.println(name);<br>m.say(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果有返回值， 代码变成lambda表达式简化过程，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface2</span> </span>&#123;<br><span class="hljs-function">String <span class="hljs-title">m1</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface2 m = <span class="hljs-keyword">new</span> MyInterface2() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">m1</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>&#125;<br>&#125;;<br>        System.out.println(m.m1());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简化后：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface2 m = () -&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>&#125;;<br>        System.out.println(m.m1());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简化成一行：</p><p><a href>注意：</a></p><ul><li>如果方法有返回值，且代码只有一行，可以简化去掉大括号，但是需要去掉return关键字。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface2 m = () -&gt; <span class="hljs-string">&quot;Hello&quot;</span>;<br>        System.out.println(m.m1());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a></p><ul><li>lambda表达式不会单独生成一个内部类的文件，</li></ul></blockquote><h4 id="三、函数式接口"><a href="#三、函数式接口" class="headerlink" title="三、函数式接口"></a>三、函数式接口</h4><h5 id="3-1-函数式接口的定义"><a href="#3-1-函数式接口的定义" class="headerlink" title="3.1 函数式接口的定义"></a>3.1 函数式接口的定义</h5><blockquote><p>上面的lambda表达式的使用需要接口中只有一个方法，如果接口中有多个方法，则无法使用，如果在定义接口时，只定义了一个方法，并且使用了lambda表达式，但是如果后面扩展时添加了其他抽象方法，会导致之前使用的lambda表达式报错，为了解决此问题，使用了函数式接口的定义。</p></blockquote><blockquote><p>语法：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface2</span> </span>&#123;<br><span class="hljs-function">String <span class="hljs-title">m1</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此时，如果在该接口中定义多个抽象方法，会报错。</p></blockquote><h5 id="3-2-常用的函数式接口"><a href="#3-2-常用的函数式接口" class="headerlink" title="3.2 常用的函数式接口"></a>3.2 常用的函数式接口</h5><blockquote><ul><li>消费型接口Cosumer<T>，方法的特点是有参T，无返回值，主要作用是对该参数进行处理。</T></li><li>供给型接口Supplier<T>，方法的特点是无参，返回一个T对象，主要作用是用来创建对象。</T></li><li>函数型接口Fuction&lt;R, T&gt;，方法的特点是有参T，返回一个R对象。</li><li>断言型接口Predicate<T>，方法的特点是有参T，返回一个判断结果boolean值。</T></li></ul></blockquote><h4 id="四、方法引用"><a href="#四、方法引用" class="headerlink" title="四、方法引用"></a>四、方法引用</h4><h5 id="4-1-概念和分类"><a href="#4-1-概念和分类" class="headerlink" title="4.1 概念和分类"></a>4.1 概念和分类</h5><blockquote><p>是lambda表达式的简写，如果lambda表达式中只是调用一个特定的方法，则可以使用方法引用。</p></blockquote><blockquote><p>方法引用有4种形式：</p><p>对象::实例方法</p><p>类::静态方法</p><p>类::实例方法</p><p>类::new</p></blockquote><blockquote><p><a href>注意：</a>方法引用实际上类似于c语言中的方法指针。</p></blockquote><h5 id="4-2-对象-实例方法"><a href="#4-2-对象-实例方法" class="headerlink" title="4.2 对象::实例方法"></a>4.2 对象::实例方法</h5><blockquote><p>当函数式接口中的方法定义与类中的实例方法定义基本一致（返回值和参数列表），此时，可以直接作为方法的引用，表示使用该类中的实例方法来作为接口方法的实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">(String b)</span> </span>&#123;<br>String str = <span class="hljs-string">&quot;hello, &quot;</span> + b;<br>System.out.println(str);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面类中定义的a方法，与接口中定义的say方法，返回值类型与参数列表几乎一致，可以作为方法引用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyClass1 c = <span class="hljs-keyword">new</span> MyClass1();<br><span class="hljs-comment">// 接口中的方法引用对象中的方法</span><br>MyInterface m = c::a;<br>        <span class="hljs-comment">// 调用接口中的方法</span><br>m.say(<span class="hljs-string">&quot;张三&quot;</span>);<br><br>        <span class="hljs-comment">// 接口中的方法与系统提供的println方法也一致，也可以引用</span><br>        MyInterface m1 = System.out::println;<br>m1.say(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a>返回值类型是否可以不一致？接口中返回值类型必须大于引用的方法类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(String b)</span> </span>&#123;<br>String str = <span class="hljs-string">&quot;hello, &quot;</span> + b;<br>System.out.println(str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a>返回值类型是否可以不一致？接口中返回值类型为void时，引用的方法类型可以有返回值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(String b)</span> </span>&#123;<br>String str = <span class="hljs-string">&quot;hello, &quot;</span> + b;<br>System.out.println(str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3-类-静态方法"><a href="#4-3-类-静态方法" class="headerlink" title="4.3 类::静态方法"></a>4.3 类::静态方法</h5><blockquote><p>当函数式接口中的方法定义与类中的静态方法定义基本一致（返回值和参数列表），此时，可以直接作为方法的引用，表示使用该类中的静态方法来作为接口方法的实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">(String b)</span> </span>&#123;<br>System.out.println(b);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m2 = MyClass1::m1;<br>m2.say(<span class="hljs-string">&quot;aaa&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-4-类-new"><a href="#4-4-类-new" class="headerlink" title="4.4 类::new"></a>4.4 类::new</h5><blockquote><p>用来创建对象。可以使用系统定义供给型接口。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface3</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><span class="hljs-function">T <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain4</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface3&lt;MyClass1&gt; m = MyClass1::<span class="hljs-keyword">new</span>;<br>MyClass1 c = m.get();<br>System.out.println(c);<br><br>        <span class="hljs-comment">// 使用系统提供的供给型接口</span><br>Supplier&lt;MyClass1&gt; s = MyClass1::<span class="hljs-keyword">new</span>;<br>MyClass1 c1 = s.get();<br>System.out.println(c1);<br>        <br>        <span class="hljs-comment">// 消费型接口的使用</span><br>Consumer&lt;String&gt; con = System.out::println;<br>con.accept(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br><span class="hljs-comment">// 断言型接口的使用，返回boolean值</span><br>String str = <span class="hljs-string">&quot;hello&quot;</span>;<br>Predicate&lt;String&gt; p = str::equals;<br>System.out.println(p.test(<span class="hljs-string">&quot;Hello&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-5-类-实例方法"><a href="#4-5-类-实例方法" class="headerlink" title="4.5 类::实例方法"></a>4.5 类::实例方法</h5><blockquote><p>类::实例方法，是表示可以使用方法的引用去引用类中的实例方法，需要注意虽然是用类来::实例方法，但是还是需要使用对象才能调用该方法，所以在使用接口去引用时，接口中的方法必须要传入类的对象。意味着接口会比引用的方法要多一个参数（该对象类型的参数）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain5</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInterface m = String::length;<br>m.say(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>自定义的案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">(T t)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInter&lt;MyClass&gt; m1 = MyClass::test;<br>m1.m1(<span class="hljs-keyword">new</span> MyClass());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>自定义的案例2：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInter1</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">(T t, String str)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(String str)</span> </span>&#123;<br>System.out.println(str);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyInter1&lt;MyClass&gt; m2 = MyClass::test1;<br>m2.m1(<span class="hljs-keyword">new</span> MyClass(), <span class="hljs-string">&quot;aaaaa&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>比较字符串是否相等：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>String s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;world&quot;</span>;<br>s1.equals(s2);<br><br><span class="hljs-comment">// 在比较字符串前，需要先创建一个字符串，意味着只能比较hello与另一个字符串</span><br>Predicate&lt;String&gt; p1 = s1::equals;<br>p1.test(s2);<br><br><span class="hljs-comment">// 在比较字符串前，不需要先创建任何字符串，直到调用时才传入两个字符串，灵活性更强</span><br>BiPredicate&lt;String, String&gt; p2 = String::equals;<br>p2.test(s1, s2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="五、StreamAPI"><a href="#五、StreamAPI" class="headerlink" title="五、StreamAPI"></a>五、StreamAPI</h4><h5 id="5-1-基本使用"><a href="#5-1-基本使用" class="headerlink" title="5.1 基本使用"></a>5.1 基本使用</h5><blockquote><p>类似于集合，对一组数据的操作。</p></blockquote><blockquote><p>使用步骤：</p><p>1、创建流</p><p>2、中间操作</p><p>3、终止操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream.iterate(<span class="hljs-number">1</span>, x -&gt;x + <span class="hljs-number">1</span>) <span class="hljs-comment">// 创建一个流操作，每个数字比前面大1，第一个数字是1</span><br>    .limit(<span class="hljs-number">100</span>) <span class="hljs-comment">// 得到100个数字，中间操作</span><br>    .forEach(System.out::println); <span class="hljs-comment">// 循环打印，终止操作</span><br></code></pre></td></tr></table></figure><h5 id="5-2-创建流"><a href="#5-2-创建流" class="headerlink" title="5.2 创建流"></a>5.2 创建流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Stream&lt;Integer&gt; s1 = Stream.iterate(<span class="hljs-number">1</span>, x -&gt; x + <span class="hljs-number">1</span>); <span class="hljs-comment">// 后面的数字比前面的数字的变化</span><br>Stream.iterate(<span class="hljs-number">1</span>, x -&gt; &#123;<br><span class="hljs-comment">// 可以加一些判断条件</span><br><span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span>;<br>&#125;); <br><br>Stream&lt;Integer&gt; s2 = Stream.of(<span class="hljs-number">12</span>,<span class="hljs-number">35</span>,<span class="hljs-number">78</span>,<span class="hljs-number">43</span>,<span class="hljs-number">22</span>,<span class="hljs-number">15</span>); <span class="hljs-comment">// 列举，得到一组数据的流</span><br><br>Stream&lt;Integer&gt; s3 = Stream.generate(<span class="hljs-keyword">new</span> Random()::nextInt); <span class="hljs-comment">// 得到一组随机数操作</span><br><br>String [] arr = &#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>&#125;;<br>Stream&lt;String&gt; s4 = Arrays.stream(arr); <span class="hljs-comment">// 将数组变成流操作</span><br><br>ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;aaa&quot;</span>);<br>list.add(<span class="hljs-string">&quot;bbb&quot;</span>);<br>list.add(<span class="hljs-string">&quot;ccc&quot;</span>);<br>Stream&lt;String&gt; s5 = list.stream(); <span class="hljs-comment">// 将集合变成流，单线程操作</span><br>Stream&lt;String&gt; s6 = list.parallelStream();<span class="hljs-comment">// 将集合变成流，多线程操作</span><br><br>LongStream s7 = LongStream.range(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// 得到1到100（不包含100）的流</span><br>LongStream s8 = LongStream.rangeClosed(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// 得到1到100（包含100）的流</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-中间操作"><a href="#5-3-中间操作" class="headerlink" title="5.3 中间操作"></a>5.3 中间操作</h5><blockquote><p>limit：表示长度限制</p><p>filter：过滤、筛选</p><p>skip：跳过多少个元素</p><p>distinct：去掉重复的元素</p><p>sorted：排序</p><p>map：映射，迭代对每一个元素进行操作</p><p>parallel：使用多线程操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 得到10个随机数</span><br>Stream.generate(Math::random)<br>.limit(<span class="hljs-number">10</span>)<br>.forEach(System.out::println);<br><br>Stream.iterate(<span class="hljs-number">1</span>, x -&gt; x + <span class="hljs-number">1</span>)<br>.limit(<span class="hljs-number">100</span>)<br>.skip(<span class="hljs-number">20</span>) <span class="hljs-comment">// 跳过20个数字</span><br>.filter(t -&gt; t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">// 筛选所有的偶数</span><br>.forEach(System.out::println);<br><br>Stream.of(<span class="hljs-number">12</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">88</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>)<br>.distinct() <span class="hljs-comment">// 去掉重复的元素</span><br>.map(x -&gt; x * <span class="hljs-number">2</span>) <span class="hljs-comment">// 映射，循环每一个元素进行处理</span><br><span class="hljs-comment">//.parallel() // 使用多线程操作，对排序结果有影响</span><br>.sorted() <span class="hljs-comment">// 排序</span><br>.forEach(System.out::println);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-4-终止操作"><a href="#5-4-终止操作" class="headerlink" title="5.4 终止操作"></a>5.4 终止操作</h5><blockquote><p>forEach：循环</p><p>min：最小值</p><p>max：最大值</p><p>count：计数</p><p>reduce：归约，可以用来求和等操作</p><p>collect：收集</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(<br>Stream.of(<span class="hljs-number">12</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">88</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>)<br>.min((o1, o2) -&gt; o1 - o2) <span class="hljs-comment">// 求最小值</span><br>.get() <span class="hljs-comment">// 得到值</span><br>);<br><br><span class="hljs-keyword">long</span> count = Stream.iterate(<span class="hljs-number">1</span>, x -&gt; x + <span class="hljs-number">1</span>)<br>.limit(<span class="hljs-number">100</span>)<br>.filter(x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>.count();<br>System.out.println(count);<br><br>ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan1&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan2&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;女&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan3&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan4&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;女&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan5&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan6&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;女&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan7&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;男&quot;</span>));<br><br><span class="hljs-keyword">long</span> count2 = list.stream()<br>.filter(x-&gt;x.getAge() &gt; <span class="hljs-number">22</span>).count();<br>System.out.println(count2);<br><br>Integer integer = Stream.iterate(<span class="hljs-number">1</span>, x -&gt; x + <span class="hljs-number">1</span>)<br>.limit(<span class="hljs-number">100</span>)<br>.filter(x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>.reduce(<span class="hljs-number">0</span>, (a, b) -&gt; a + b); <span class="hljs-comment">// 归约，此处用来求和</span><br>System.out.println(integer);<br><br>Integer ages = list.stream()<br>.filter(x-&gt;x.getAge() &gt; <span class="hljs-number">22</span> &amp;&amp; x.getSex().equals(<span class="hljs-string">&quot;男&quot;</span>)) <span class="hljs-comment">// 筛选出年龄大于22并且男性</span><br>.map(Student::getAge) <span class="hljs-comment">// 只要年龄属性构成一个新的流</span><br>.reduce(<span class="hljs-number">0</span>, Integer::sum); <span class="hljs-comment">// 求和</span><br>System.out.println(ages);<br><br>List&lt;Integer&gt; list2 = Stream.of(<span class="hljs-number">12</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">88</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>)<br>.distinct() <span class="hljs-comment">// 去掉重复的元素</span><br>.sorted()<br>.collect(Collectors.toList()); <span class="hljs-comment">// 将结果收集为一个集合</span><br>System.out.println(list2);<br><br>List&lt;Student&gt; list3 = list.stream()<br>.filter(x-&gt;x.getAge()&gt;<span class="hljs-number">22</span> &amp;&amp; x.getSex().equals(<span class="hljs-string">&quot;男&quot;</span>))<br>.collect(Collectors.toList());<br>System.out.println(list3);<br>        <br>        <span class="hljs-comment">// 分组统计数量</span><br>System.out.println(list.stream()<br>.filter(x-&gt;x.getAge()&gt;<span class="hljs-number">22</span>)<br><span class="hljs-comment">// 将男性和女性分别计数</span><br>.collect(Collectors.groupingBy(Student::getSex, Collectors.counting())));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="六、新时间API"><a href="#六、新时间API" class="headerlink" title="六、新时间API"></a>六、新时间API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain4</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>LocalDate now = LocalDate.now(); <span class="hljs-comment">// 得到当前时间</span><br>LocalDate date = LocalDate.of(<span class="hljs-number">2014</span>, <span class="hljs-number">3</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">// 根据年月日创建当前时间</span><br>System.out.println(date);<br><span class="hljs-keyword">int</span> year = date.getYear();<span class="hljs-comment">// 得到年</span><br><span class="hljs-comment">// LocalDate得到日期</span><br><span class="hljs-comment">// LocalTime得到时间</span><br><span class="hljs-comment">// LocalDateTime得到日期时间</span><br><span class="hljs-comment">// 时间戳</span><br>Instant now2 = Instant.now();<br><span class="hljs-comment">// 打印的格式是：2021-07-29T09:12:07.666Z</span><br>System.out.println(now2);<br><span class="hljs-comment">// 得到当前默认时区</span><br>ZoneId zoneId = ZoneId.systemDefault();<br>System.out.println(zoneId);<br><span class="hljs-comment">// 格式化工具</span><br>DateTimeFormatter pattern = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>System.out.println(pattern);<br><span class="hljs-comment">// 格式化字符串</span><br>LocalDate date2 = LocalDate.parse(<span class="hljs-string">&quot;2020-02-12&quot;</span>, pattern);<br>System.out.println(date2.getYear());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>反射与注解</title>
    <link href="/myblog/2019/10/22/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
    <url>/myblog/2019/10/22/%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="反射与注解"><a href="#反射与注解" class="headerlink" title="反射与注解"></a>反射与注解</h3><h4 id="一、类对象"><a href="#一、类对象" class="headerlink" title="一、类对象"></a>一、类对象</h4><blockquote><p>类对象是描述类的信息的对象。</p><p>包含类有哪些属性、方法、构造方法等。</p></blockquote><blockquote><p>有三种获取方式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 第一种，通过对象获取</span><br>Student stu = <span class="hljs-keyword">new</span> Student();<br>Class c1 = stu.getClass();<br><br><span class="hljs-comment">// 第二种，通过类名获取</span><br>Class c2 = Student.class;<br><br><span class="hljs-comment">// 第三种，通过Class.forName方法获取</span><br><span class="hljs-keyword">try</span> &#123;<br>Class c3 = Class.forName(<span class="hljs-string">&quot;com.qf.day23.Student&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二、反射的用法"><a href="#二、反射的用法" class="headerlink" title="二、反射的用法"></a>二、反射的用法</h4><blockquote><p>当获得类对象后，可以获取该描述信息中的所有属性，方法，构造方法等信息，并且可以依据这些信息动态的创建对象，给属性赋值，调用方法。</p></blockquote><h5 id="2-1-反射操作属性"><a href="#2-1-反射操作属性" class="headerlink" title="2.1 反射操作属性"></a>2.1 反射操作属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取类对象信息</span><br>Class c = Class.forName(<span class="hljs-string">&quot;com.qf.day23.Student&quot;</span>);<br>String name = c.getName();<br>System.out.println(name); <span class="hljs-comment">// 获取名称</span><br>String simpleName = c.getSimpleName();<br>System.out.println(simpleName); <span class="hljs-comment">// 获取短名称</span><br>System.out.println(c.getPackage()); <span class="hljs-comment">// 获取包信息</span><br>System.out.println(c.getSuperclass());<span class="hljs-comment">// 获取父类信息</span><br>System.out.println(Arrays.toString(c.getInterfaces()));<span class="hljs-comment">// 获取接口信息</span><br><span class="hljs-comment">// 通过无参构造方法创建对象</span><br>Object obj = c.newInstance();<br><span class="hljs-comment">// 获取所有属性</span><br>Field[] fields = c.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>System.out.println(field.getName()); <span class="hljs-comment">// 打印属性的名称</span><br><span class="hljs-comment">// 把属性的访问限制修改为允许访问</span><br>field.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">// 给属性赋值</span><br><span class="hljs-comment">// 如果属性的类型是String</span><br><span class="hljs-keyword">if</span>(field.getType() == String.class) &#123;<br>field.set(obj, <span class="hljs-string">&quot;aaa&quot;</span>);<br><span class="hljs-comment">// 如果属性类型是int</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(field.getType() == <span class="hljs-keyword">int</span>.class) &#123;<br>field.set(obj, <span class="hljs-number">20</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 获取单个属性</span><br>Field field = c.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(field.getName());<br><span class="hljs-comment">// 把属性的访问限制修改为允许访问</span><br>field.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">// 得到该属性的值</span><br>System.out.println(field.get(obj));<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-反射操作方法"><a href="#2-2-反射操作方法" class="headerlink" title="2.2 反射操作方法"></a>2.2 反射操作方法</h5><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取类对象信息</span><br>Class c = Class.forName(<span class="hljs-string">&quot;com.qf.day23.Student&quot;</span>);<br><span class="hljs-comment">// 通过无参构造方法创建对象</span><br>Object obj = c.newInstance();<br><span class="hljs-comment">// 得到定义的所有方法</span><br>Method[] methods = c.getDeclaredMethods();<br><span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>System.out.println(method.getName());<br><span class="hljs-comment">// 判断是否以set开头</span><br><span class="hljs-keyword">if</span>(method.getName().startsWith(<span class="hljs-string">&quot;set&quot;</span>)) &#123;<br><span class="hljs-comment">// 得到方法的参数</span><br>Class[] classes = method.getParameterTypes();<br><span class="hljs-keyword">if</span>(classes.length == <span class="hljs-number">1</span> &amp;&amp; classes[<span class="hljs-number">0</span>] == String.class) &#123;<br><span class="hljs-comment">// 调用方法</span><br>method.invoke(obj, <span class="hljs-string">&quot;aaa&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(classes.length == <span class="hljs-number">1</span> &amp;&amp; classes[<span class="hljs-number">0</span>] == <span class="hljs-keyword">int</span>.class) &#123;<br><span class="hljs-comment">// 调用方法,指定参数值</span><br>method.invoke(obj, <span class="hljs-number">18</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 得到某一个方法</span><br>Method method = c.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>); <span class="hljs-comment">// 得到方法say()</span><br>method.invoke(obj);<br><span class="hljs-comment">// 得到某一个方法,指定方法的参数类型</span><br>Method method1 = c.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>, String.class); <span class="hljs-comment">// 得到方法say(String)</span><br>method1.invoke(obj, <span class="hljs-string">&quot;张三&quot;</span>);<br>Method method2 = c.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>, String.class, <span class="hljs-keyword">int</span>.class); <span class="hljs-comment">// 得到方法say(String, int)</span><br>method2.invoke(obj, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>);<br>Method method3 = c.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>, c); <span class="hljs-comment">// 得到方法say(Student)</span><br>method3.invoke(obj, obj);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-反射访问构造方法"><a href="#2-3-反射访问构造方法" class="headerlink" title="2.3 反射访问构造方法"></a>2.3 反射访问构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain3</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取类对象信息</span><br>Class c = Class.forName(<span class="hljs-string">&quot;com.qf.day23.Student&quot;</span>);<br><span class="hljs-comment">// 只能调用系统无参构造方法(不推荐使用)</span><br><span class="hljs-comment">//Object obj = c.newInstance();</span><br><span class="hljs-comment">//System.out.println(obj);</span><br><span class="hljs-comment">// 得到所有的构造方法</span><br>Constructor[] constructors = c.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor constructor : constructors) &#123;<br>System.out.println(constructor.getParameterCount());<br>&#125;<br><span class="hljs-comment">// 得到一个构造方法</span><br>Constructor constructor = c.getConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class);<br><span class="hljs-comment">// 通过构造方法来创建对象</span><br>Object object = constructor.newInstance(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>System.out.println(object);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三、设计模式"><a href="#三、设计模式" class="headerlink" title="三、设计模式"></a>三、设计模式</h4><blockquote></blockquote><h5 id="3-1-工厂模式"><a href="#3-1-工厂模式" class="headerlink" title="3.1 工厂模式"></a>3.1 工厂模式</h5><blockquote><p>使用工厂来实现对象的创建。</p></blockquote><h6 id="3-1-1-简单工厂"><a href="#3-1-1-简单工厂" class="headerlink" title="3.1.1 简单工厂"></a>3.1.1 简单工厂</h6><blockquote><p>工厂直接提供各种对象的创建。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br>    <span class="hljs-comment">// 创建汽车</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span> </span>&#123;<br>Car car = <span class="hljs-keyword">new</span> Car();<br>car.setBrand(<span class="hljs-string">&quot;五菱宏光&quot;</span>);<br>car.setColor(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>car.setId(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">return</span> car;<br>&#125;<br>    <br>    <span class="hljs-comment">// 提供其他对象的创建方法</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Car car = CarFactory.createCar();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-2-抽象工厂"><a href="#3-1-2-抽象工厂" class="headerlink" title="3.1.2 抽象工厂"></a>3.1.2 抽象工厂</h6><blockquote><p>工厂类作为一个父类，定义了该工厂能够生产的对象，但是没有具体的实现，需要自己定义一个工厂的子类去生产相应的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br><span class="hljs-comment">// 生产汽车</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">// 生产别的对象</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span> </span>&#123;<br>Car car = <span class="hljs-keyword">new</span> Car();<br>car.setBrand(<span class="hljs-string">&quot;五菱宏光&quot;</span>);<br>car.setColor(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>car.setId(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">return</span> car;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>AbstractFactory factory = <span class="hljs-keyword">new</span> MyFactory();<br>Car car2 = factory.createCar();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-单例模式"><a href="#3-2-单例模式" class="headerlink" title="3.2 单例模式"></a>3.2 单例模式</h5><blockquote><p>Singleton，表示该类只能创建一个对象。例如上面的工厂对象，在项目中就只需要创建一个。</p></blockquote><h6 id="3-2-1-饿汉（eager）模式"><a href="#3-2-1-饿汉（eager）模式" class="headerlink" title="3.2.1 饿汉（eager）模式"></a>3.2.1 饿汉（eager）模式</h6><blockquote><p>一开始就创建对象（能创建对象就创建）。</p><p>缺点是加载时创建对象，比较慢，使用时比较快。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerSingleton</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> EagerSingleton instance = <span class="hljs-keyword">new</span> EagerSingleton();<br><br>    <span class="hljs-comment">// 构造方法私有</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EagerSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;创建对象&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EagerSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-2-2-懒汉（lazy）模式"><a href="#3-2-2-懒汉（lazy）模式" class="headerlink" title="3.2.2 懒汉（lazy）模式"></a>3.2.2 懒汉（lazy）模式</h6><blockquote><p>一开始不创建对象，到使用时才创建。</p><p>优点是加载时不创建对象，会比较快，第一次使用时创建对象，相对较慢。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazySingleton instance;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazySingleton</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;创建对象&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;<br>instance = <span class="hljs-keyword">new</span> LazySingleton();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面的代码是有线程安全问题的，应该使用加锁的方式来解决线程安全问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazySingleton instance;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazySingleton</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;创建对象&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 双重检测</span><br><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (LazySingleton.class) &#123;<br><span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>) &#123;<br>instance = <span class="hljs-keyword">new</span> LazySingleton();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用内部类来实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazySingleton1</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;创建对象&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 只有加载内部类时才会创建对象，而getInstance方法中才去加载了内部类</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton1 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> Inner.instance;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton1 instance = <span class="hljs-keyword">new</span> LazySingleton1();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四、枚举"><a href="#四、枚举" class="headerlink" title="四、枚举"></a>四、枚举</h4><blockquote><p>枚举是一个特殊的类，是JDK1.5之后才有，是final的，通常用来列举一些值。</p></blockquote><h5 id="4-1-枚举的基本使用"><a href="#4-1-枚举的基本使用" class="headerlink" title="4.1 枚举的基本使用"></a>4.1 枚举的基本使用</h5><blockquote><p>以下是一个使用常量的案例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HeroStatus</span> </span>&#123;<br><span class="hljs-keyword">int</span> BING_DONG = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> XUAN_YUN = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">int</span> CHEN_MO = <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> status)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(status == HeroStatus.BING_DONG) &#123;<br>System.out.println(<span class="hljs-string">&quot;英雄被冰冻&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == HeroStatus.CHEN_MO) &#123;<br>System.out.println(<span class="hljs-string">&quot;英雄被沉默&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == HeroStatus.XUAN_YUN) &#123;<br>System.out.println(<span class="hljs-string">&quot;英雄被眩晕&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        <span class="hljs-comment">// 用户调用时，可以使用常量，但是用户也可以直接写数字1，甚至可以写数字5，都不会出现编译错误</span><br>hero.setStatus(HeroStatus.BING_DONG);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>为了让用户调用时，如果不用指定的常量，会出现编译错误，推荐使用枚举。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">HeroStatus</span> </span>&#123;<br>BING_DONG, <br>XUAN_YUN, <br>CHEN_MO;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(HeroStatus status)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(status == HeroStatus.BING_DONG) &#123;<br>System.out.println(<span class="hljs-string">&quot;英雄被冰冻&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == HeroStatus.CHEN_MO) &#123;<br>System.out.println(<span class="hljs-string">&quot;英雄被沉默&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == HeroStatus.XUAN_YUN) &#123;<br>System.out.println(<span class="hljs-string">&quot;英雄被眩晕&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Hero hero = <span class="hljs-keyword">new</span> Hero();<br>        <span class="hljs-comment">// 此时使用数字就会报错</span><br>hero.setStatus(HeroStatus.BING_DONG);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-枚举的高级使用"><a href="#4-2-枚举的高级使用" class="headerlink" title="4.2 枚举的高级使用"></a>4.2 枚举的高级使用</h5><blockquote><p>枚举是一个特殊的类，所以也能定义属性方法等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">HeroStatus</span> </span>&#123;<br><span class="hljs-comment">// 需要放到最前面</span><br>BING_DONG(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;冰冻&quot;</span>),  <span class="hljs-comment">// 构造方法</span><br>XUAN_YUN(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;眩晕&quot;</span>), <br>CHEN_MO(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;沉默&quot;</span>);<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String desc;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;name=&quot;</span> + name + <span class="hljs-string">&quot;, desc=&quot;</span> + desc);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">HeroStatus</span><span class="hljs-params">(String name, String desc)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.desc = desc;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(HeroStatus status)</span> </span>&#123;<br>status.say();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Hero hero = <span class="hljs-keyword">new</span> Hero();<br>hero.setStatus(HeroStatus.CHEN_MO);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="五、注解"><a href="#五、注解" class="headerlink" title="五、注解"></a>五、注解</h4><h5 id="5-1-注解的概念"><a href="#5-1-注解的概念" class="headerlink" title="5.1 注解的概念"></a>5.1 注解的概念</h5><blockquote><p>注解（Annotation），是在程序中的特殊标记，一般用来代替配置文件。</p></blockquote><blockquote><p>基本语法：</p><p>@类名，例如：@Override</p></blockquote><blockquote><p>定义方式：</p><p>public @interface 名称{</p><p>}</p></blockquote><h5 id="5-2-自定义注解"><a href="#5-2-自定义注解" class="headerlink" title="5.2 自定义注解"></a>5.2 自定义注解</h5><blockquote><p>定义一个自动读取文件的注解。</p><p>工具类的定义：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.FIELD)</span> <span class="hljs-comment">// 表示该注解用在属性上</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">// 表示该注解在运行时使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ReadPath &#123;<br><span class="hljs-comment">// value表示默认属性，在赋值时，可以不写名称，如果是其他属性，赋值必须写名称</span><br><span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;hello&quot;</span>; <span class="hljs-comment">// 定义属性，给一个默认值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadFactory</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">createObject</span><span class="hljs-params">(String className)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Class c = Class.forName(className);<br>Object obj = c.newInstance();<br><span class="hljs-comment">// 读取txt中的属性</span><br>Field[] fields = c.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field field : fields) &#123;<br><span class="hljs-comment">// 判断属性上是否有注解@ReadPath</span><br><span class="hljs-keyword">if</span>(field.isAnnotationPresent(ReadPath.class)) &#123;<br><span class="hljs-comment">// 得到该注解</span><br>ReadPath readPath = field.getDeclaredAnnotation(ReadPath.class);<br><span class="hljs-comment">// 得到该注解的值</span><br>String path = readPath.value();<br>System.out.println(path);<br><span class="hljs-comment">// 判断值不为空</span><br><span class="hljs-keyword">if</span>(path != <span class="hljs-keyword">null</span> &amp;&amp; path.length() &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 读取文件</span><br>String content = readContent(path);<br>field.setAccessible(<span class="hljs-keyword">true</span>);<br>field.set(obj, content);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> obj;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readContent</span><span class="hljs-params">(String path)</span> </span>&#123;<br><span class="hljs-keyword">try</span> (<br>BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(path));<br>)&#123;<br>StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();<br>String str;<br><span class="hljs-keyword">while</span>((str = br.readLine())!= <span class="hljs-keyword">null</span>) &#123;<br>builder.append(str + <span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadTxt</span> </span>&#123;<br><span class="hljs-meta">@ReadPath(&quot;C:\\Users\\wangliang\\Desktop\\1.txt&quot;)</span><br><span class="hljs-keyword">private</span> String content;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(content);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ReadTxt txt = (ReadTxt)ReadFactory.createObject(<span class="hljs-string">&quot;com.qf.day23.i.ReadTxt&quot;</span>);<br>txt.read();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-元注解"><a href="#5-3-元注解" class="headerlink" title="5.3 元注解"></a>5.3 元注解</h5><blockquote><p>元注解：用在注解上的注解。</p><p>元数据：描述数据的数据。</p><p>自定义的注解上至少应该有以下元注解：</p><p>@Target(ElementType.METHOD)：表示自定义的注解使用的位置（方法、属性、变量、类等）<br>@Retention(RetentionPolicy.SOURCE)：表示自定义的注解使用的时机（源代码、运行时）</p><p>还有两个系统提供的元注解：</p><p>@Inherited：表示该注解是否可以继承（组合注解）</p><p>@Documented：表示该注解是否生成文档</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程</title>
    <link href="/myblog/2019/10/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/myblog/2019/10/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="一、进程和线程"><a href="#一、进程和线程" class="headerlink" title="一、进程和线程"></a>一、进程和线程</h4><h5 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h5><blockquote><p>程序是机器上安装的软件，是一个静止的内容。当程序被启动，就会产生（至少）一个进程。一般情况下，一个程序产生一个进程，但是有些特殊用途的程序运行时可能会产生多个进程。</p><p>在一个进程中，可以创建多个任务来同时进行，这些任务称为线程，是一种轻量级的进程。当这些线程同时执行时（交替执行），称为多线程。</p></blockquote><h5 id="1-2-理解"><a href="#1-2-理解" class="headerlink" title="1.2 理解"></a>1.2 理解</h5><blockquote><p><a href>线程是同时执行还是交替执行？</a></p><p>线程是利用CPU的空闲时间交替执行，由于交替执行的时间较短，看起来像是同时执行。</p><p><a href>在现在的电脑上是交替执行，还是同时执行？</a></p><p>现在的电脑并非单核，单核CPU执行的多线程都是交替执行执行的，但是多核意味着有多个CPU，也就是说可以做到同时执行。</p></blockquote><h5 id="1-3-区别"><a href="#1-3-区别" class="headerlink" title="1.3 区别"></a>1.3 区别</h5><blockquote><p><a href>进程和线程的区别：</a></p><ul><li>一个程序运行后至少包含一个进程。</li><li>一个进程至少包含一个线程，可以包含多个线程。</li><li>进程是系统分配资源的基本单位，而线程是CPU调度的单位。</li><li>进程之间一般不能共享数据，但是线程之间可以共享数据。</li></ul></blockquote><h4 id="二、线程的创建"><a href="#二、线程的创建" class="headerlink" title="二、线程的创建"></a>二、线程的创建</h4><h5 id="2-1-线程的组成"><a href="#2-1-线程的组成" class="headerlink" title="2.1 线程的组成"></a>2.1 线程的组成</h5><blockquote><ul><li>CPU的时间片。每一个线程在执行时都需要CPU分配时间。</li><li>运行数据。<ul><li>堆空间数据，共享数据。</li><li>栈空间数据，一般是临时变量，线程中有独立空间来保存。</li></ul></li><li>逻辑代码。</li></ul></blockquote><h5 id="2-2-线程创建"><a href="#2-2-线程创建" class="headerlink" title="2.2 线程创建"></a>2.2 线程创建</h5><blockquote><p>线程创建有两种方式：</p><ul><li>继承Thread类</li><li>实现Runnable接口</li></ul></blockquote><h6 id="2-2-1-继承Thread类"><a href="#2-2-1-继承Thread类" class="headerlink" title="2.2.1 继承Thread类"></a>2.2.1 继承Thread类</h6><blockquote><p>继承Thread类，并重写run方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建两个线程</span><br>MyThread1 t1 = <span class="hljs-keyword">new</span> MyThread1();<br>MyThread2 t2 = <span class="hljs-keyword">new</span> MyThread2();<br><span class="hljs-comment">// 启动线程</span><br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;=====&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;-----&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-2-2-实现Runnable接口"><a href="#2-2-2-实现Runnable接口" class="headerlink" title="2.2.2 实现Runnable接口"></a>2.2.2 实现Runnable接口</h6><blockquote><p>实现Runnable接口，重写run方法。在使用时还是要创建Thread类的对象。</p></blockquote><blockquote><p><a href>继承Thread类和实现Runnable接口的区别：</a></p><ul><li>继承Thread类后使用简单，而实现接口后还是要创建Thread类的对象，使用相对复杂。</li><li>继承类后不能再继承其他类，而实现接口还可以继承其他类，或者实现其他接口，使用更灵活。</li><li>继承类后，中间逻辑代码不能复用，而实现接口后，逻辑代码还可以复用。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建两个线程</span><br>MyRunnable1 r1 = <span class="hljs-keyword">new</span> MyRunnable1();<br>Thread t1 = <span class="hljs-keyword">new</span> Thread(r1);<br>MyRunnable2 r2 = <span class="hljs-keyword">new</span> MyRunnable2();<br>Thread t2 = <span class="hljs-keyword">new</span> Thread(r2);<br><span class="hljs-comment">// 启动线程</span><br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;=====&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;-----&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>经典面试题：</a></p><p>start()与run()的区别：</p><ul><li>直接调用run方法是直接将线程类中的业务逻辑代码执行。等同于定义一个类，创建该类的对象，调用其方法。根本没有使用线程相关的内容，没有创建多的线程。</li><li>当调用start方法时，会先创建线程，进入就绪状态，等待抢占CPU的执行时间，进行执行run方法。</li></ul></blockquote><blockquote><p>当程序启动时， 会自动创建一个进程，该进程中会有一个默认线程，此线程名称为main（主线程）。</p></blockquote><h4 id="三、线程的状态"><a href="#三、线程的状态" class="headerlink" title="三、线程的状态"></a>三、线程的状态</h4><h5 id="3-1-基本状态"><a href="#3-1-基本状态" class="headerlink" title="3.1 基本状态"></a>3.1 基本状态</h5><blockquote><p>新建：创建Thread对象，与普通对象没有区别。</p><p>就绪：调用start后，进入就绪状态，此时会等待操作系统分配时间片。</p><p>运行：当被操作系统选中后，开始调用run方法执行相应的业务，如果业务没有执行完毕，但是时间片到期，会进入就绪状态，等待下一次的时间片。</p><p>终止：业务执行完毕或者main结束。</p></blockquote><blockquote><p>线程饿死：是指一个线程一直没有被分配到时间片，无法执行。</p></blockquote><h5 id="3-2-常用方法"><a href="#3-2-常用方法" class="headerlink" title="3.2 常用方法"></a>3.2 常用方法</h5><h6 id="3-2-1-sleep休眠"><a href="#3-2-1-sleep休眠" class="headerlink" title="3.2.1 sleep休眠"></a>3.2.1 sleep休眠</h6><blockquote><p>sleep：指让线程进入休眠状态，直到休眠的时间结束，进入就绪状态。</p><p>一旦线程进入休眠状态，其他的线程就会优先抢占时间片。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建两个线程</span><br>MyThread3 t1 = <span class="hljs-keyword">new</span> MyThread3();<br>MyThread4 t2 = <span class="hljs-keyword">new</span> MyThread4();<br><span class="hljs-comment">// 启动线程</span><br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 得到当前正在运行的线程名称</span><br>String name = Thread.currentThread().getName();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(name + <span class="hljs-string">&quot;=====&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-comment">// 单位是毫秒</span><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">5000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>String name = Thread.currentThread().getName();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(name + <span class="hljs-string">&quot;-----&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-2-2-yield让渡"><a href="#3-2-2-yield让渡" class="headerlink" title="3.2.2 yield让渡"></a>3.2.2 yield让渡</h6><blockquote><p>yield：让线程放弃当前的时间片，进入就绪状态。</p><p><a href>注意：</a>当一个线程让渡时，并不一定另一个线程就能抢到时间片。也可能让渡完又抢到时间片。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 创建两个线程</span><br>MyThread3 t1 = <span class="hljs-keyword">new</span> MyThread3();<br>MyThread4 t2 = <span class="hljs-keyword">new</span> MyThread4();<br><span class="hljs-comment">// 启动线程</span><br>t1.start();<br>t2.start();<br><span class="hljs-comment">//String name = Thread.currentThread().getName();</span><br><span class="hljs-comment">//System.out.println(name);</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 定义线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 得到当前正在运行的线程名称</span><br>String name = Thread.currentThread().getName();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(name + <span class="hljs-string">&quot;=====&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-comment">// 让渡</span><br>Thread.yield();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>String name = Thread.currentThread().getName();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(name + <span class="hljs-string">&quot;-----&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-2-3-join合并"><a href="#3-2-3-join合并" class="headerlink" title="3.2.3 join合并"></a>3.2.3 join合并</h6><blockquote><p>有一个线程A正在运行，此时如果join了线程B，那么线程A会等待线程B执行完毕后才继续执行。（插队）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain4</span> </span>&#123;<br><span class="hljs-comment">// 合并</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Runnable r1 = <span class="hljs-keyword">new</span> Runnable() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;=======&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;;<br><br>Thread t1 = <span class="hljs-keyword">new</span> Thread(r1);<br><br>Runnable r2 = <span class="hljs-keyword">new</span> Runnable() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;-----&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 会让t1执行完毕后，再执行t2剩下内容</span><br>t1.join();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br><br>Thread t2 = <span class="hljs-keyword">new</span> Thread(r2);<br><br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-线程等待"><a href="#3-3-线程等待" class="headerlink" title="3.3 线程等待"></a>3.3 线程等待</h5><blockquote><p>等待：线程进入了等待状态，等待结束后进入就绪状态。</p><ul><li>当线程中使用了sleep后，进入了限时等待，时间结束进入就绪状态。</li><li>当线程中使用join后，进入不限时等待，直到join进来的线程执行完毕才进入就绪状态。</li><li>当线程中使用了wait后，进入了等待，直到被唤醒或者等待超时，才进入就绪状态。</li></ul></blockquote><h5 id="3-4-线程安全"><a href="#3-4-线程安全" class="headerlink" title="3.4 线程安全"></a>3.4 线程安全</h5><blockquote><p>当多线程同时访问共享资源时，如果破坏了原子操作，可能会出现线程不安全问题。</p></blockquote><blockquote><p>解决方式：线程同步（加锁）。</p><p>语法：使用synchronized关键字。</p><ul><li>synchronized同步代码块</li><li>synchronized同步方法</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain5</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Seller s1 = <span class="hljs-keyword">new</span> Seller(<span class="hljs-string">&quot;张三&quot;</span>);<br>Seller s2 = <span class="hljs-keyword">new</span> Seller(<span class="hljs-string">&quot;李四&quot;</span>);<br>Seller s3 = <span class="hljs-keyword">new</span> Seller(<span class="hljs-string">&quot;王五&quot;</span>);<br>s1.start();<br>s2.start();<br>s3.start();<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// 售票员卖票问题</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Seller</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer ticket = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">private</span> String sellName;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Seller</span><span class="hljs-params">(String sellName)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.sellName = sellName;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">while</span>(ticket &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">// 加锁在此处必须是唯一的锁，而且需要引用数据类型</span><br><span class="hljs-keyword">synchronized</span> (A.obj) &#123; <span class="hljs-comment">// 同步代码块</span><br><span class="hljs-comment">// 双重检测锁</span><br><span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>) &#123;<br>ticket--;<br>System.out.println(sellName + <span class="hljs-string">&quot;卖出一张票，还剩下&quot;</span> + ticket + <span class="hljs-string">&quot;张&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object obj = <span class="hljs-keyword">new</span> Object();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-5-线程阻塞"><a href="#3-5-线程阻塞" class="headerlink" title="3.5 线程阻塞"></a>3.5 线程阻塞</h5><blockquote><p>阻塞：当线程运行过程中，遇到了加锁的代码，需要去获取锁，在没有获取锁时，进入阻塞状态，需要等待持有锁的线程将加锁的代码执行完毕后，才能继续执行。</p></blockquote><h4 id="四、死锁"><a href="#四、死锁" class="headerlink" title="四、死锁"></a>四、死锁</h4><blockquote><p>当一个线程持有锁A，等待锁B，另一个线程持有锁B，等待锁A，两个线程都不会释放锁，此时也无法继续获得另一把锁，产生死锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain6</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Boy boy = <span class="hljs-keyword">new</span> Boy();<br>Girl girl = <span class="hljs-keyword">new</span> Girl();<br>boy.start();<br>girl.start();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">synchronized</span> (A1.a) &#123;<br>System.out.println(<span class="hljs-string">&quot;男孩抢到了筷子A&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (A1.b) &#123;<br>System.out.println(<span class="hljs-string">&quot;男孩抢到了筷子B&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;男孩吃东西&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Girl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">synchronized</span> (A1.b) &#123;<br>System.out.println(<span class="hljs-string">&quot;女孩抢到了筷子B&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (A1.a) &#123;<br>System.out.println(<span class="hljs-string">&quot;女孩抢到了筷子A&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;女孩吃东西&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A1</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object a = <span class="hljs-keyword">new</span> Object(); <span class="hljs-comment">// 筷子A</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object b = <span class="hljs-keyword">new</span> Object(); <span class="hljs-comment">// 筷子B</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="五、线程通信"><a href="#五、线程通信" class="headerlink" title="五、线程通信"></a>五、线程通信</h4><blockquote><p>使用wait方法让线程进入等待状态。</p><p>使用notify或者notifyAll唤醒线程，进入就绪状态。</p><p><a href>注意：</a>使用wait需要在synchronized中使用。</p><p>使用wait等待是无限期等待，需要唤醒或者超时。</p><ul><li>唤醒，指使用notify或者notifyAll</li><li>超时，是指在指定时间内，如果没有唤醒，那么就放弃等待。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain7</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyThread5 t1 = <span class="hljs-keyword">new</span> MyThread5();<br>MyThread6 t2 = <span class="hljs-keyword">new</span> MyThread6();<br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;===========&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>MyObj.obj.wait(<span class="hljs-number">10000</span>);<span class="hljs-comment">// 指定超时时间，如果不唤醒，时间过了会自动醒来</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;----------&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyObj</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object obj = <span class="hljs-keyword">new</span> Object();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a>唤醒时也需要在synchronized中使用。唤醒后线程进行就绪状态。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain7</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyThread5 t1 = <span class="hljs-keyword">new</span> MyThread5();<br>MyThread6 t2 = <span class="hljs-keyword">new</span> MyThread6();<br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;===========&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>MyObj.obj.wait(<span class="hljs-number">10000</span>);<span class="hljs-comment">// 指定超时时间，如果不唤醒，时间过了会自动醒来</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread6</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;----------&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">800</span>) &#123;<br><span class="hljs-comment">// 唤醒</span><br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br>MyObj.obj.notify();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyObj</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object obj = <span class="hljs-keyword">new</span> Object();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href>注意：</a>如果有多个线程同时使用某个锁对象进行wait状态，那么一次notify方法调用只会随机唤醒一个，需要多次调用notify方法，此时，可以使用notifyAll一次唤醒所有的进入wait状态的线程。</p></blockquote><blockquote><p><a href>经典面试题：</a></p><p>sleep和wait的区别：</p><p>1、sleep需要指定时间，时间到了会自动醒来。而wait如果没有指定超时时间，会无限等待，直到被唤醒为止。</p><p>2、sleep是一个静态方法，而且不需要在同步时调用，而wait是一个对象方法，需要在同步时使用。</p><p>3、sleep在休眠时不会释放锁。而wait会释放锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain8</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyThread7 t1 = <span class="hljs-keyword">new</span> MyThread7();<br>MyThread8 t2 = <span class="hljs-keyword">new</span> MyThread8();<br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>String name = Thread.currentThread().getName();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(name + <span class="hljs-string">&quot;===========&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br>System.out.println(<span class="hljs-string">&quot;MyThread7获得锁&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// sleep不释放锁，下面的线程需要等待锁</span><br>Thread.sleep(<span class="hljs-number">10000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;----------&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">200</span>) &#123;<br><span class="hljs-comment">// 加锁</span><br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br>System.out.println(<span class="hljs-string">&quot;MyThread8获得锁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain8</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>MyThread7 t1 = <span class="hljs-keyword">new</span> MyThread7();<br>MyThread8 t2 = <span class="hljs-keyword">new</span> MyThread8();<br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread7</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>String name = Thread.currentThread().getName();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(name + <span class="hljs-string">&quot;===========&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br>System.out.println(<span class="hljs-string">&quot;MyThread7获得锁&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// wait会释放锁</span><br>MyObj.obj.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;----------&quot;</span> + i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">200</span>) &#123;<br><span class="hljs-comment">// 加锁</span><br><span class="hljs-keyword">synchronized</span> (MyObj.obj) &#123;<br>System.out.println(<span class="hljs-string">&quot;MyThread8获得锁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/myblog/2019/10/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/myblog/2019/10/22/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="一、什么是网络"><a href="#一、什么是网络" class="headerlink" title="一、什么是网络"></a>一、什么是网络</h4><blockquote><p>由点和线组成，表示多个对象之间的相互联系。</p></blockquote><h4 id="二、计算机网络"><a href="#二、计算机网络" class="headerlink" title="二、计算机网络"></a>二、计算机网络</h4><blockquote><p>多台计算机之间相互联系，通过通信线路连接，作用是实现资源共享和信息传递。</p><p>互联网：指计算机之间相互连接，少量连接叫做局域网，俗称内网。</p><p>万维网：世界上所有的计算机相互连接的网络。俗称外网。</p><p>物联网：万物互联。指将普通的事物也通过手段连入到互联网中。</p></blockquote><h4 id="三、网络编程"><a href="#三、网络编程" class="headerlink" title="三、网络编程"></a>三、网络编程</h4><blockquote><p>网络编程实现计算机之间的连接和通信。</p></blockquote><h4 id="四、网络模型（OSI模型）"><a href="#四、网络模型（OSI模型）" class="headerlink" title="四、网络模型（OSI模型）"></a>四、网络模型（OSI模型）</h4><blockquote><p>应用层：常见的应用，文件管理、远程操作等。（HTTP、FTP、SMTP）</p><p>表示层：负责定义和转换数据格式。（如选择二进制或ASCII。）</p><p>会话层：建立和维持通话。</p><p>传输层：定义传输层一些协议。（TCP、UDP协议）</p><hr><p>网络层：定义网络节点的逻辑地址。（IP地址）</p><p>链路层：通过协议或规程来控制正确性。（MAC）</p><p>物理层：提供传输信号和物理介质（网线、光纤等）</p></blockquote><h4 id="五、TCP-IP模型"><a href="#五、TCP-IP模型" class="headerlink" title="五、TCP/IP模型"></a>五、TCP/IP模型</h4><blockquote><p>应用层：即OSI模型中的会话层、表示层、应用层。</p><p>传输层</p><p>网络层</p><p>网络接口层：即OSI模型中的物理层和链路层。</p></blockquote><h4 id="六、TCP-UDP协议"><a href="#六、TCP-UDP协议" class="headerlink" title="六、TCP\UDP协议"></a>六、TCP\UDP协议</h4><blockquote><p>TCP：传输控制协议，面向连接的、可靠的、基于字节流的，数据大小无限制。连接时需要3次握手，断开时需要4次挥手（保证可靠性）。</p><p>UDP：用户数据报协议，是一种无连接的传输层协议，简单不可靠的服务。每个包的大小不能超过64KB。</p></blockquote><h4 id="七、IP"><a href="#七、IP" class="headerlink" title="七、IP"></a>七、IP</h4><blockquote><p>是互联网上分配给设备的唯一标识。</p><p>分为IPV4和IPV6：</p><p>IPV4：是指4个字节，分4段，每段0~255之间，中间使用点号隔开，最大255.255.255.255</p><p>IPV6：是指16个字节，分8段，每段0~65535之间，最大FFFF.FFFF.FFFF.FFFF.FFFF.FFFF.FFFF.FFFF</p><p><a href>注意：</a>现在是IPV4和IPV6的一个混用的时间节点。</p><p>回环地址：127.0.0.1表示本机</p><p>查看IP命令：ipconfig</p><p>测评IP命令：ping IP地址 -t </p></blockquote><h4 id="八、Port端口"><a href="#八、Port端口" class="headerlink" title="八、Port端口"></a>八、Port端口</h4><blockquote><p>是在设备上对程序的唯一标识。</p><p>端口号是一个数字，0~65535区间</p><p>系统常用端口0<del>1023，软件常用端口1023</del>10000，意味着写程序时，最好使用10000以后的端口，避免端口冲突。</p><p>常用软件的端口：</p><p>MySQL：3306</p><p>tomcat：8080</p><p>Oracle：1521</p><p>web服务器默认端口：80</p></blockquote><h4 id="九、InetAddress类"><a href="#九、InetAddress类" class="headerlink" title="九、InetAddress类"></a>九、InetAddress类</h4><blockquote><p>封装IP地址的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>InetAddress addr = InetAddress.getLocalHost(); <span class="hljs-comment">// 得到本机的信息</span><br>System.out.println(addr.getHostName()); <span class="hljs-comment">// 本机名称</span><br>System.out.println(addr.getHostAddress()); <span class="hljs-comment">// 本机IP</span><br>InetAddress addr1 = InetAddress.getByName(<span class="hljs-string">&quot;LH&quot;</span>); <span class="hljs-comment">// 通过主机名或者IP地址得到网络上对应设备</span><br>System.out.println(addr1.getHostName()); <br>System.out.println(addr1.getHostAddress()); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="十、网络编程"><a href="#十、网络编程" class="headerlink" title="十、网络编程"></a>十、网络编程</h4><h5 id="10-1-Socket编程"><a href="#10-1-Socket编程" class="headerlink" title="10.1 Socket编程"></a>10.1 Socket编程</h5><blockquote><p>基于TCP协议的编程。</p><p>主要分为客户端的Socket（套接字）以及服务器端的ServerSocket</p><p>编程时需要知道IP地址和端口号。</p></blockquote><blockquote><p>编程步骤：</p><p>服务器：</p><ul><li>创建ServerSocket，指定端口号</li><li>调用accept方法，等待客户端接入</li></ul><p>客户端：</p><ul><li>创建Socket，指定服务器的IP和端口号，建立连接</li><li>通过字节流进行输入输出通信</li></ul><p>服务端也使用字节流进行输入输出通信。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestServer</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>ServerSocket server = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">6666</span>);<br>System.out.println(<span class="hljs-string">&quot;服务器正在等待客户端的接入&quot;</span>);<br>Socket socket = server.accept(); <span class="hljs-comment">// 等待接收客户端接入</span><br><span class="hljs-comment">// 读取客户端的内容</span><br>InputStream is = socket.getInputStream();<br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>String str = <span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len);<br>System.out.println(str);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClient</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;192.168.50.70&quot;</span>, <span class="hljs-number">6666</span>); <span class="hljs-comment">// 建立客户端</span><br>System.out.println(<span class="hljs-string">&quot;客户端建立完成&quot;</span>);<br>OutputStream os = socket.getOutputStream();<br>String str = <span class="hljs-string">&quot;hello, world&quot;</span>;<br>os.write(str.getBytes());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="10-2-简易聊天室案例"><a href="#10-2-简易聊天室案例" class="headerlink" title="10.2 简易聊天室案例"></a>10.2 简易聊天室案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServer</span> </span>&#123;<br><span class="hljs-comment">// 定义一个hashmap用来存储所有的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, Socket&gt; map = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;String, Socket&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 创建一个服务器</span><br>ServerSocket server = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">6666</span>);<br>System.out.println(<span class="hljs-string">&quot;服务器创建成功，欢迎您的加入!&quot;</span>);<br><span class="hljs-comment">// 无限循环等待接收客户端的连接</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>Socket socket = server.accept();<br><span class="hljs-comment">// 得到key(IP地址和端口号)</span><br>String key = socket.getInetAddress().getHostAddress() + <span class="hljs-string">&quot;:&quot;</span> + socket.getPort();<br><span class="hljs-comment">// 将接收到的连接存入集合</span><br>map.put(key, socket);<br><span class="hljs-comment">// 每接收一个客户端创建一个线程来处理该客户端的消息</span><br>MyServerThread thread = <span class="hljs-keyword">new</span> MyServerThread(socket);<br>thread.start();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClient</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 创建一个客户端</span><br>Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;192.168.50.70&quot;</span>, <span class="hljs-number">6666</span>);<br><span class="hljs-comment">// 创建一个写的线程来处理该客户端的写操作</span><br>MyClientWriteThread thread = <span class="hljs-keyword">new</span> MyClientWriteThread(socket);<br>thread.start();<br><br><span class="hljs-comment">// 得到客户端的读取信息的流</span><br>InputStream is = socket.getInputStream();<br><span class="hljs-comment">// 无限循环读取信息</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>String str = <span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len);<br>System.out.println(str);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-keyword">private</span> Socket socket;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyServerThread</span><span class="hljs-params">(Socket socket)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.socket = socket;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>String key = socket.getInetAddress().getHostAddress() + <span class="hljs-string">&quot;:&quot;</span> + socket.getPort();<br>System.out.println(<span class="hljs-string">&quot;欢迎&quot;</span>+key+<span class="hljs-string">&quot;加入&quot;</span>);<br><span class="hljs-comment">// 得到客户端信息</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 得到客户端输入输出流</span><br>InputStream is = socket.getInputStream();<br>OutputStream os = socket.getOutputStream();<br><span class="hljs-comment">// 无限循环</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-comment">// 接收客户端的信息</span><br><span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>String msg = <span class="hljs-keyword">new</span> String(buffer, <span class="hljs-number">0</span>, len);<br>System.out.println(msg);<br><span class="hljs-comment">// 判断该信息是要群发还是单发</span><br>String[] arr = msg.split(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">if</span>(arr != <span class="hljs-keyword">null</span> &amp;&amp; arr.length == <span class="hljs-number">2</span>) &#123;<br>Socket toSocket = MyServer.map.get(arr[<span class="hljs-number">0</span>]);<br>msg = key + <span class="hljs-string">&quot;对你说：&quot;</span> + arr[<span class="hljs-number">1</span>];<br><span class="hljs-comment">// 单独发送消息</span><br>sendTo(toSocket, msg);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 群发</span><br>sendToAll(key + <span class="hljs-string">&quot;说：&quot;</span> + msg);<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendToAll</span><span class="hljs-params">(String msg)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (Socket socket : MyServer.map.values()) &#123;<br>sendTo(socket, msg);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendTo</span><span class="hljs-params">(Socket socket, String msg)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>OutputStream os = socket.getOutputStream();<br>os.write(msg.getBytes());<br>os.flush();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClientWriteThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-keyword">private</span> Socket socket;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClientWriteThread</span><span class="hljs-params">(Socket socket)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.socket = socket;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 得到客户端的输出流</span><br><span class="hljs-keyword">try</span> &#123;<br>OutputStream os = socket.getOutputStream();<br><span class="hljs-comment">// 定义一个键盘输入</span><br>Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br><span class="hljs-comment">// 无限循环，接收控制台输入，将其发送(输出)到服务器</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>String str = input.nextLine();<br>os.write(str.getBytes());<br>os.flush();<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="10-3-udp开发飞秋发消息"><a href="#10-3-udp开发飞秋发消息" class="headerlink" title="10.3 udp开发飞秋发消息"></a>10.3 udp开发飞秋发消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMain1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>sendMsg(<span class="hljs-string">&quot;一会去看篮球赛&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>DatagramSocket ds = <span class="hljs-keyword">new</span> DatagramSocket();<br>InetAddress ip = InetAddress.getByName(<span class="hljs-string">&quot;192.168.50.8&quot;</span>); <span class="hljs-comment">// ip</span><br><span class="hljs-keyword">int</span> port = <span class="hljs-number">2425</span>; <span class="hljs-comment">// 端口号</span><br><span class="hljs-comment">// 1:100:飞秋名:主机名:32:信息</span><br>String str = <span class="hljs-string">&quot;1:100:程灿:LAPTOP-DL0IQI8H:32:&quot;</span> + msg; <span class="hljs-comment">// 协议和内容</span><br><span class="hljs-comment">// 打包</span><br>DatagramPacket dp = <span class="hljs-keyword">new</span> DatagramPacket(str.getBytes(), str.getBytes().length, ip, port);<br>ds.send(dp); <span class="hljs-comment">// 发送消息</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于页</title>
    <link href="/myblog/2019/10/10/about/"/>
    <url>/myblog/2019/10/10/about/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
